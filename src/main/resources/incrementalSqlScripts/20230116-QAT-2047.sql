UPDATE rm_equivalency_unit_mapping eum SET eum.PROGRAM_ID=null where eum.PROGRAM_ID=0;

USE `fasp`;
DROP procedure IF EXISTS `getForecastError`;

USE `fasp`;
DROP procedure IF EXISTS `fasp`.`getForecastError`;
;

DELIMITER $$
USE `fasp`$$
CREATE DEFINER=`faspUser`@`%` PROCEDURE `getForecastError`(VAR_PROGRAM_ID INT(10), VAR_VERSION_ID INT (10), VAR_VIEW_BY INT(10), VAR_UNIT_ID INT(10), VAR_START_DATE DATE, VAR_STOP_DATE DATE, VAR_REGION_IDS TEXT, VAR_EQUIVALENCY_UNIT_ID INT(10), VAR_PREVIOUS_MONTHS INT(10), VAR_DAYS_OF_STOCK_OUT TINYINT (1))
BEGIN
    SET @programId = VAR_PROGRAM_ID; 
    SET @versionId = VAR_VERSION_ID; -- Can be -1 for the latest Program
    SET @unitId= VAR_UNIT_ID; -- PU or FU based on viewBy
    SET @startDate = VAR_START_DATE;
    SET @stopDate = VAR_STOP_DATE;
    SET @viewBy = VAR_VIEW_BY; -- 1 for PU and 2 for FU
    SET @regionIds = VAR_REGION_IDS; -- empty if all Regions
    SET @equivalencyUnitId = VAR_EQUIVALENCY_UNIT_ID; -- If the output is to be in EquivalencyUnit then this is a non zero id
    SET @previousMonths = VAR_PREVIOUS_MONTHS; -- The number of months that we need to average the Consumption for WAPE. Does not include current month which is always included.
    SET @daysOfStockOut = VAR_DAYS_OF_STOCK_OUT; -- Boolean field that if true means we should consider the Days of Stock Out valued and adjust the consumption accordingly. Only adjusts for Actual Consumption.
    
    IF @versionId = -1 THEN 
        SELECT MAX(pv.VERSION_ID) into @versionId FROM rm_program_version pv where pv.PROGRAM_ID=@programId;
    END IF;

    SELECT 
	r.REGION_ID, r.LABEL_ID, r.LABEL_EN, r.LABEL_FR, r.LABEL_SP, r.LABEL_PR,
        cs.MONTH1 `CONSUMPTION_DATE`, cs.UNIT_ID, COALESCE(eum1.CONVERT_TO_EU, eum2.CONVERT_TO_EU) `CONVERT_TO_EU`,
	SUM(IF(@viewBy=1,IF(@equivalencyUnitId=0,cs.ADJUSTED_ACTUAL_CONSUMPTION1,cs.ADJUSTED_ACTUAL_CONSUMPTION1*cs.MULTIPLIER*COALESCE(eum1.CONVERT_TO_EU,eum2.CONVERT_TO_EU)), IF(@equivalencyUnitId=0,cs.ADJUSTED_ACTUAL_CONSUMPTION1*cs.MULTIPLIER,cs.ADJUSTED_ACTUAL_CONSUMPTION1*cs.MULTIPLIER*COALESCE(eum1.CONVERT_TO_EU,eum2.CONVERT_TO_EU)))) ADJUSTED_ACTUAL_CONSUMPTION1,
        SUM(IF(@viewBy=1,IF(@equivalencyUnitId=0,cs.AVG_ADJUSTED_ACTUAL_CONSUMPTION,cs.AVG_ADJUSTED_ACTUAL_CONSUMPTION*COALESCE(eum1.CONVERT_TO_EU,eum2.CONVERT_TO_EU)),IF(@equivalencyUnitId=0,cs.AVG_ADJUSTED_ACTUAL_CONSUMPTION*cs.MULTIPLIER,cs.AVG_ADJUSTED_ACTUAL_CONSUMPTION*cs.MULTIPLIER*COALESCE(eum1.CONVERT_TO_EU,eum2.CONVERT_TO_EU)))) AVG_ADJUSTED_ACTUAL_CONSUMPTION,
        SUM(IF(@viewBy=1,IF(@equivalencyUnitId=0,cs.FORECASTED_CONSUMPTION1,cs.FORECASTED_CONSUMPTION1*COALESCE(eum1.CONVERT_TO_EU,eum2.CONVERT_TO_EU)),IF(@equivalencyUnitId=0,cs.FORECASTED_CONSUMPTION1*cs.MULTIPLIER,cs.FORECASTED_CONSUMPTION1*cs.MULTIPLIER*COALESCE(eum1.CONVERT_TO_EU,eum2.CONVERT_TO_EU)))) FORECASTED_CONSUMPTION1,
        SUM(IF(@viewBy=1,IF(@equivalencyUnitId=0,cs.AVG_FORECASTED_CONSUMPTION,cs.AVG_FORECASTED_CONSUMPTION*COALESCE(eum1.CONVERT_TO_EU,eum2.CONVERT_TO_EU)),IF(@equivalencyUnitId=0,cs.AVG_FORECASTED_CONSUMPTION*cs.MULTIPLIER,cs.AVG_FORECASTED_CONSUMPTION*cs.MULTIPLIER*COALESCE(eum1.CONVERT_TO_EU,eum2.CONVERT_TO_EU)))) AVG_FORECASTED_CONSUMPTION
    FROM (
SELECT 
	c1.MONTH MONTH1, c2.MONTH MONTH2, c1.REGION_ID, c1.PLANNING_UNIT_ID, IF(@viewBy=1, c1.PLANNING_UNIT_ID, c1.FORECASTING_UNIT_ID) UNIT_ID, pu.MULTIPLIER,
        c1.ADJUSTED_ACTUAL_CONSUMPTION `ADJUSTED_ACTUAL_CONSUMPTION1`, 
        -- c2.ADJUSTED_ACTUAL_CONSUMPTION `ADJUSTED_ACTUAL_CONSUMPTION2`, 
        AVG(c2.ADJUSTED_ACTUAL_CONSUMPTION) `AVG_ADJUSTED_ACTUAL_CONSUMPTION`, 
        c1.FORECASTED_CONSUMPTION `FORECASTED_CONSUMPTION1`,
        -- c2.FORECASTED_CONSUMPTION `FORECASTED_CONSUMPTION2`
        AVG(c2.FORECASTED_CONSUMPTION) `AVG_FORECASTED_CONSUMPTION` 
FROM (
	SELECT 
		mn.MONTH, pr.REGION_ID, tc1.PLANNING_UNIT_ID, tc1.FORECASTING_UNIT_ID, tc1.`ACTUAL_CONSUMPTION`, tc1.`ADJUSTED_ACTUAL_CONSUMPTION`, tc1.`FORECASTED_CONSUMPTION` 
    FROM mn 
    LEFT JOIN rm_program_region pr ON pr.PROGRAM_ID=@programId
    LEFT JOIN (
		SELECT 
			ct.CONSUMPTION_DATE, ct.`REGION_ID`, ct.PLANNING_UNIT_ID, pu.FORECASTING_UNIT_ID,
			SUM(IF(ct.`ACTUAL_FLAG`=1, ct.`CONSUMPTION_QTY`, null)) `ACTUAL_CONSUMPTION`,
			SUM(IF(ct.`ACTUAL_FLAG`=1, IF(ct.CONSUMPTION_QTY is null, null, IF(@daysOfStockOut=1, DAY(LAST_DAY(ct.CONSUMPTION_DATE))/(DAY(LAST_DAY(ct.CONSUMPTION_DATE))-ct.`DAYS_OF_STOCK_OUT`)*ct.`CONSUMPTION_QTY`, ct.`CONSUMPTION_QTY`)), null)) `ADJUSTED_ACTUAL_CONSUMPTION`,
			SUM(IF(ct.`ACTUAL_FLAG`=0, ct.`CONSUMPTION_QTY`, null)) `FORECASTED_CONSUMPTION`
		FROM (
			SELECT ct.CONSUMPTION_ID, MAX(ct.VERSION_ID) MAX_VERSION_ID FROM rm_consumption c LEFT JOIN rm_consumption_trans ct ON c.CONSUMPTION_ID=ct.CONSUMPTION_ID WHERE (@versionId=-1 OR ct.VERSION_ID<=@versionId) AND c.PROGRAM_ID=@programId GROUP BY ct.CONSUMPTION_ID
		) tc
		LEFT JOIN rm_consumption cons ON tc.CONSUMPTION_ID=cons.`CONSUMPTION_ID`
		LEFT JOIN rm_consumption_trans ct ON cons.CONSUMPTION_ID=ct.CONSUMPTION_ID AND tc.MAX_VERSION_ID=ct.VERSION_ID
		LEFT JOIN rm_planning_unit pu ON ct.`PLANNING_UNIT_ID`=pu.`PLANNING_UNIT_ID`
                LEFT JOIN rm_program_planning_unit ppu ON ct.PLANNING_UNIT_ID=ppu.PLANNING_UNIT_ID AND ppu.PROGRAM_ID=@programId
		WHERE
			ct.CONSUMPTION_DATE BETWEEN @startDate AND @stopDate
                        AND ct.ACTIVE AND ppu.ACTIVE
			AND (@regionIds='' OR FIND_IN_SET(ct.`REGION_ID`, @regionIds) )
			AND ((@viewBy=1 AND ct.PLANNING_UNIT_ID=@unitId) OR (@viewBy=2 AND pu.`FORECASTING_UNIT_ID`=@unitId))
			group by ct.CONSUMPTION_DATE, ct.REGION_ID, ct.PLANNING_UNIT_ID
	) tc1 ON mn.MONTH=tc1.CONSUMPTION_DATE AND pr.REGION_ID=tc1.REGION_ID
    WHERE mn.MONTH BETWEEN @startDate AND @stopDate
) as c1
--
LEFT JOIN (
--
	SELECT 
		mn.MONTH, pr.REGION_ID, tc2.PLANNING_UNIT_ID, tc2.FORECASTING_UNIT_ID, tc2.`ACTUAL_CONSUMPTION`, tc2.`ADJUSTED_ACTUAL_CONSUMPTION`, tc2.`FORECASTED_CONSUMPTION` 
    FROM mn 
    LEFT JOIN rm_program_region pr ON pr.PROGRAM_ID=@programId
    LEFT JOIN (
		SELECT 
			ct.CONSUMPTION_DATE, ct.`REGION_ID`, ct.PLANNING_UNIT_ID, pu.FORECASTING_UNIT_ID,
			SUM(IF(ct.`ACTUAL_FLAG`=1, ct.`CONSUMPTION_QTY`, null)) `ACTUAL_CONSUMPTION`,
			SUM(IF(ct.`ACTUAL_FLAG`=1, IF(ct.CONSUMPTION_QTY is null, null, IF(@daysOfStockOut=1, DAY(LAST_DAY(ct.CONSUMPTION_DATE))/(DAY(LAST_DAY(ct.CONSUMPTION_DATE))-ct.`DAYS_OF_STOCK_OUT`)*ct.`CONSUMPTION_QTY`, ct.`CONSUMPTION_QTY`)), null)) `ADJUSTED_ACTUAL_CONSUMPTION`,
			SUM(IF(ct.`ACTUAL_FLAG`=0, ct.`CONSUMPTION_QTY`, null)) `FORECASTED_CONSUMPTION`
		FROM (
			SELECT ct.CONSUMPTION_ID, MAX(ct.VERSION_ID) MAX_VERSION_ID FROM rm_consumption c LEFT JOIN rm_consumption_trans ct ON c.CONSUMPTION_ID=ct.CONSUMPTION_ID WHERE (@versionId=-1 OR ct.VERSION_ID<=@versionId) AND c.PROGRAM_ID=@programId GROUP BY ct.CONSUMPTION_ID
		) tc
		LEFT JOIN rm_consumption cons ON tc.CONSUMPTION_ID=cons.`CONSUMPTION_ID`
		LEFT JOIN rm_consumption_trans ct ON cons.CONSUMPTION_ID=ct.CONSUMPTION_ID AND tc.MAX_VERSION_ID=ct.VERSION_ID
		LEFT JOIN rm_planning_unit pu ON ct.`PLANNING_UNIT_ID`=pu.`PLANNING_UNIT_ID`
                LEFT JOIN rm_program_planning_unit ppu ON ct.PLANNING_UNIT_ID=ppu.PLANNING_UNIT_ID AND ppu.PROGRAM_ID=@programId
		WHERE
			ct.CONSUMPTION_DATE BETWEEN SUBDATE(@startDate, INTERVAL @previousMonths MONTH) AND @stopDate
                        AND ct.ACTIVE AND ppu.ACTIVE
			AND (@regionIds='' OR FIND_IN_SET(ct.`REGION_ID`, @regionIds) )
			AND ((@viewBy=1 AND ct.PLANNING_UNIT_ID=@unitId) OR (@viewBy=2 AND pu.`FORECASTING_UNIT_ID`=@unitId))
			group by ct.CONSUMPTION_DATE, ct.REGION_ID, ct.PLANNING_UNIT_ID
	) tc2 ON mn.MONTH=tc2.CONSUMPTION_DATE AND pr.REGION_ID=tc2.REGION_ID
    WHERE mn.MONTH BETWEEN SUBDATE(@startDate, INTERVAL @previousMonths MONTH) AND @stopDate
) c2 ON c2.MONTH BETWEEN SUBDATE(c1.MONTH, INTERVAL @previousMonths MONTH) AND c1.MONTH AND c1.REGION_ID=c2.REGION_ID AND c1.PLANNING_UNIT_ID=c2.PLANNING_UNIT_ID
LEFT JOIN rm_planning_unit pu ON c1.PLANNING_UNIT_ID=pu.PLANNING_UNIT_ID
group by c1.MONTH, c1.REGION_ID, c1.PLANNING_UNIT_ID
) cs 
LEFT JOIN vw_region r ON cs.REGION_ID=r.REGION_ID
LEFT JOIN rm_realm_country rc ON r.REALM_COUNTRY_ID=rc.REALM_COUNTRY_ID
LEFT JOIN rm_planning_unit pu ON pu.PLANNING_UNIT_ID=@unitId AND @viewBy=1
LEFT JOIN rm_forecasting_unit fu ON fu.FORECASTING_UNIT_ID=@unitId AND @viewBy=2
LEFT JOIN rm_equivalency_unit_mapping eum1 ON COALESCE(fu.FORECASTING_UNIT_ID,pu.FORECASTING_UNIT_ID)=eum1.FORECASTING_UNIT_ID AND eum1.EQUIVALENCY_UNIT_ID=@equivalencyUnitId AND eum1.REALM_ID=rc.REALM_ID AND eum1.PROGRAM_ID=@programId
LEFT JOIN rm_equivalency_unit_mapping eum2 ON COALESCE(fu.FORECASTING_UNIT_ID,pu.FORECASTING_UNIT_ID)=eum2.FORECASTING_UNIT_ID AND eum2.EQUIVALENCY_UNIT_ID=@equivalencyUnitId AND eum2.REALM_ID=rc.REALM_ID AND eum2.PROGRAM_ID is null
group by cs.MONTH1, cs.REGION_ID;
    
END$$

DELIMITER ;
;

