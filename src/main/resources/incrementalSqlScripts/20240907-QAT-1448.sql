USE `fasp`;
DROP procedure IF EXISTS `getDashboardStockStatus`;

USE `fasp`;
DROP procedure IF EXISTS `fasp`.`getDashboardStockStatus`;
;

DELIMITER $$
USE `fasp`$$
CREATE DEFINER=`faspUser`@`%` PROCEDURE `getDashboardStockStatus`(VAR_START_DATE DATE, VAR_STOP_DATE DATE, VAR_PROGRAM_ID INT)
BEGIN
    
    SELECT COUNT(mn.MONTH) INTO @monthCount FROM mn WHERE mn.MONTH BETWEEN VAR_START_DATE AND VAR_STOP_DATE;
    SELECT COUNT(*) INTO @puCount FROM rm_program_planning_unit ppu LEFT JOIN rm_planning_unit pu ON ppu.PLANNING_UNIT_ID=pu.PLANNING_UNIT_ID where ppu.PROGRAM_ID=VAR_PROGRAM_ID AND ppu.ACTIVE AND pu.ACTIVE;
    
    SELECT 
        SUM(p2.`COUNT_OF_STOCK_OUT`) `COUNT_OF_STOCK_OUT`, 
        SUM(p2.`COUNT_OF_UNDER_STOCK`) `COUNT_OF_UNDER_STOCK`, 
        SUM(p2.`COUNT_OF_ADEQUATE_STOCK`) `COUNT_OF_ADEQUATE_STOCK`, 
        SUM(p2.`COUNT_OF_OVER_STOCK`) `COUNT_OF_OVER_STOCK`, 
        @puCount*@monthCount - (SUM(p2.`COUNT_OF_STOCK_OUT`)+SUM(p2.`COUNT_OF_UNDER_STOCK`)+SUM(p2.`COUNT_OF_ADEQUATE_STOCK`)+SUM(p2.`COUNT_OF_OVER_STOCK`)) `COUNT_OF_NA`,
        @puCount*@monthCount `COUNT_OF_TOTAL`
    FROM vw_program p 
    LEFT JOIN rm_program_planning_unit ppu ON p.PROGRAM_ID=ppu.PROGRAM_ID AND ppu.ACTIVE
    LEFT JOIN vw_planning_unit pu ON ppu.PLANNING_UNIT_ID=pu.PLANNING_UNIT_ID AND pu.ACTIVE 
    LEFT JOIN (
        SELECT 
            p1.PLANNING_UNIT_ID, 
            SUM(IF(p1.STOCK_CONDITION=0, 1, 0)) `COUNT_OF_STOCK_OUT`, 
            SUM(IF(STOCK_CONDITION=1, 1, 0)) `COUNT_OF_UNDER_STOCK`, 
            SUM(IF(STOCK_CONDITION=2, 1, 0)) `COUNT_OF_ADEQUATE_STOCK`, 
            SUM(IF(STOCK_CONDITION=3, 1, 0)) `COUNT_OF_OVER_STOCK`, 
            SUM(IF(STOCK_CONDITION=4, 1, 0)) `COUNT_OF_NA`,
            SUM(IF(STOCK_CONDITION=5, 1, 0)) `COUNT_OF_UNK`
        FROM ( 
        SELECT 
            amc.PLANNING_UNIT_ID, amc.`TRANS_DATE`,
            CASE
                WHEN ROUND(amc.MOS,1) is null THEN 4 -- NA
                WHEN ROUND(amc.MOS,1)=0 THEN 0 -- StockOut
                WHEN ROUND(amc.MOS,1) < IF(ppu.PLAN_BASED_ON=1,ppu.MIN_MONTHS_OF_STOCK,ppu.MIN_QTY) THEN 1 -- UnderStock
                WHEN ROUND(amc.MOS,1) <= IF(ppu.PLAN_BASED_ON=1,(ppu.MIN_MONTHS_OF_STOCK+ppu.REORDER_FREQUENCY_IN_MONTHS),ROUND(amc.MAX_STOCK_QTY)) THEN 2 -- Adequate Stock
                WHEN ROUND(amc.MOS,1) > IF(ppu.PLAN_BASED_ON=1,(ppu.MIN_MONTHS_OF_STOCK+ppu.REORDER_FREQUENCY_IN_MONTHS),ROUND(amc.MAX_STOCK_QTY)) THEN 3 -- Over Stock
                ELSE 5 -- Unknown
            END `STOCK_CONDITION`
        FROM vw_program p 
        LEFT JOIN rm_program_planning_unit ppu ON p.PROGRAM_ID=ppu.PROGRAM_ID
        LEFT JOIN rm_planning_unit pu ON ppu.PLANNING_UNIT_ID=pu.PLANNING_UNIT_ID 
        LEFT JOIN rm_supply_plan_amc amc ON p.PROGRAM_ID=amc.PROGRAM_ID AND p.CURRENT_VERSION_ID=amc.VERSION_ID AND ppu.PLANNING_UNIT_ID=amc.PLANNING_UNIT_ID
        WHERE p.PROGRAM_ID=VAR_PROGRAM_ID AND amc.TRANS_DATE BETWEEN VAR_START_DATE AND VAR_STOP_DATE and ppu.ACTIVE AND pu.ACTIVE
        ) p1 GROUP BY p1.PLANNING_UNIT_ID) p2 ON pu.PLANNING_UNIT_ID=p2.PLANNING_UNIT_ID
    WHERE p.PROGRAM_ID = VAR_PROGRAM_ID AND pu.PLANNING_UNIT_ID IS NOT NULL
    GROUP BY p.PROGRAM_ID;
END$$

DELIMITER ;
;


USE `fasp`;
DROP procedure IF EXISTS `getDashboardShipmentDetailsReportBy`;

USE `fasp`;
DROP procedure IF EXISTS `fasp`.`getDashboardShipmentDetailsReportBy`;
;

DELIMITER $$
USE `fasp`$$
CREATE DEFINER=`faspUser`@`%` PROCEDURE `getDashboardShipmentDetailsReportBy`(VAR_START_DATE DATE, VAR_STOP_DATE DATE, VAR_PROGRAM_ID INT, VAR_DISPLAY_SHIPMENTS_BY INT)
BEGIN

    SELECT p.CURRENT_VERSION_ID INTO @varVersionId FROM vw_program p WHERE p.PROGRAM_ID = VAR_PROGRAM_ID;
    
    IF VAR_DISPLAY_SHIPMENTS_BY = 1 THEN -- FundingSource
        SELECT 
            fs.`FUNDING_SOURCE_ID` `REPORT_BY_ID`, fs.FUNDING_SOURCE_CODE `REPORT_BY_CODE`, fs.LABEL_ID `RB_LABEL_ID`, fs.LABEL_EN `RB_LABEL_EN`, fs.LABEL_FR `RB_LABEL_FR`, fs.LABEL_SP `RB_LABEL_SP`, fs.LABEL_PR `RB_LABEL_PR`, 
            COUNT(st.SHIPMENT_ID) `ORDER_COUNT`,  
            SUM(st.SHIPMENT_QTY) `QUANTITY`, 
            SUM((IFNULL(st.PRODUCT_COST,0) + IFNULL(st.FREIGHT_COST,0)) * s.CONVERSION_RATE_TO_USD) `COST` 
        FROM 
            ( 
            SELECT 
                s.SHIPMENT_ID, MAX(st.VERSION_ID) MAX_VERSION_ID, s.CONVERSION_RATE_TO_USD 
            FROM rm_shipment s 
            LEFT JOIN rm_shipment_trans st ON s.SHIPMENT_ID=st.SHIPMENT_ID 
            WHERE 
                s.PROGRAM_ID=VAR_PROGRAM_ID
                AND st.VERSION_ID<=@varVersionId
                AND st.SHIPMENT_TRANS_ID IS NOT NULL 
            GROUP BY s.SHIPMENT_ID 
        ) AS s 
        LEFT JOIN rm_shipment s1 ON s.SHIPMENT_ID=s1.SHIPMENT_ID 
        LEFT JOIN rm_shipment_trans st ON s.SHIPMENT_ID=st.SHIPMENT_ID AND s.MAX_VERSION_ID=st.VERSION_ID 
        LEFT JOIN vw_funding_source fs ON st.FUNDING_SOURCE_ID=fs.FUNDING_SOURCE_ID 
        LEFT JOIN vw_planning_unit pu ON st.PLANNING_UNIT_ID=pu.PLANNING_UNIT_ID 
        LEFT JOIN rm_program_planning_unit ppu ON s1.PROGRAM_ID=ppu.PROGRAM_ID AND st.PLANNING_UNIT_ID=ppu.PLANNING_UNIT_ID 
        WHERE 
            st.ACTIVE AND st.ACCOUNT_FLAG AND ppu.ACTIVE AND pu.ACTIVE 
            AND st.SHIPMENT_STATUS_ID!=8 
            AND COALESCE(st.RECEIVED_DATE, st.EXPECTED_DELIVERY_DATE) BETWEEN VAR_START_DATE AND VAR_STOP_DATE 
        GROUP BY st.FUNDING_SOURCE_ID;
    ELSEIF VAR_DISPLAY_SHIPMENTS_BY = 2 THEN -- ProcurementAgent
        SELECT 
            pa.`PROCUREMENT_AGENT_ID` `REPORT_BY_ID`, pa.PROCUREMENT_AGENT_CODE `REPORT_BY_CODE`, pa.LABEL_ID `RB_LABEL_ID`, pa.LABEL_EN `RB_LABEL_EN`, pa.LABEL_FR `RB_LABEL_FR`, pa.LABEL_SP `RB_LABEL_SP`, pa.LABEL_PR `RB_LABEL_PR`, 
            COUNT(st.SHIPMENT_ID) `ORDER_COUNT`, 
            SUM(st.SHIPMENT_QTY) `QUANTITY`, 
            SUM((IFNULL(st.PRODUCT_COST,0) + IFNULL(st.FREIGHT_COST,0)) * s.CONVERSION_RATE_TO_USD) `COST` 
        FROM 
            ( 
            SELECT 
                s.SHIPMENT_ID, MAX(st.VERSION_ID) MAX_VERSION_ID, s.CONVERSION_RATE_TO_USD 
            FROM rm_shipment s 
            LEFT JOIN rm_shipment_trans st ON s.SHIPMENT_ID=st.SHIPMENT_ID 
            WHERE 
                s.PROGRAM_ID=VAR_PROGRAM_ID
                AND st.VERSION_ID<=@varVersionId
                AND st.SHIPMENT_TRANS_ID IS NOT NULL 
            GROUP BY s.SHIPMENT_ID 
        ) AS s 
        LEFT JOIN rm_shipment s1 ON s.SHIPMENT_ID=s1.SHIPMENT_ID 
        LEFT JOIN rm_shipment_trans st ON s.SHIPMENT_ID=st.SHIPMENT_ID AND s.MAX_VERSION_ID=st.VERSION_ID 
        LEFT JOIN vw_procurement_agent pa ON st.PROCUREMENT_AGENT_ID=pa.PROCUREMENT_AGENT_ID 
        LEFT JOIN vw_planning_unit pu ON st.PLANNING_UNIT_ID=pu.PLANNING_UNIT_ID 
        LEFT JOIN rm_program_planning_unit ppu ON s1.PROGRAM_ID=ppu.PROGRAM_ID AND st.PLANNING_UNIT_ID=ppu.PLANNING_UNIT_ID 
        WHERE 
            st.ACTIVE AND st.ACCOUNT_FLAG AND ppu.ACTIVE AND pu.ACTIVE 
            AND st.SHIPMENT_STATUS_ID!=8 
            AND COALESCE(st.RECEIVED_DATE, st.EXPECTED_DELIVERY_DATE) BETWEEN VAR_START_DATE AND VAR_STOP_DATE 
        GROUP BY st.PROCUREMENT_AGENT_ID;
    ELSEIF VAR_DISPLAY_SHIPMENTS_BY = 3 THEN -- Status
        SELECT 
            ss.`SHIPMENT_STATUS_ID` `REPORT_BY_ID`, ss.LABEL_EN `REPORT_BY_CODE`, ss.LABEL_ID `RB_LABEL_ID`, ss.LABEL_EN `RB_LABEL_EN`, ss.LABEL_FR `RB_LABEL_FR`, ss.LABEL_SP `RB_LABEL_SP`, ss.LABEL_PR `RB_LABEL_PR`, 
            COUNT(st.SHIPMENT_ID) `ORDER_COUNT`, 
            SUM(st.SHIPMENT_QTY) `QUANTITY`, 
            SUM((IFNULL(st.PRODUCT_COST,0) + IFNULL(st.FREIGHT_COST,0)) * s.CONVERSION_RATE_TO_USD) `COST` 
        FROM 
            ( 
            SELECT 
                s.SHIPMENT_ID, MAX(st.VERSION_ID) MAX_VERSION_ID, s.CONVERSION_RATE_TO_USD 
            FROM rm_shipment s 
            LEFT JOIN rm_shipment_trans st ON s.SHIPMENT_ID=st.SHIPMENT_ID 
            WHERE 
                s.PROGRAM_ID=VAR_PROGRAM_ID
                AND st.VERSION_ID<=@varVersionId
                AND st.SHIPMENT_TRANS_ID IS NOT NULL 
            GROUP BY s.SHIPMENT_ID 
        ) AS s 
        LEFT JOIN rm_shipment s1 ON s.SHIPMENT_ID=s1.SHIPMENT_ID 
        LEFT JOIN rm_shipment_trans st ON s.SHIPMENT_ID=st.SHIPMENT_ID AND s.MAX_VERSION_ID=st.VERSION_ID 
        LEFT JOIN vw_shipment_status ss ON st.SHIPMENT_STATUS_ID=ss.SHIPMENT_STATUS_ID 
        LEFT JOIN vw_planning_unit pu ON st.PLANNING_UNIT_ID=pu.PLANNING_UNIT_ID 
        LEFT JOIN rm_program_planning_unit ppu ON s1.PROGRAM_ID=ppu.PROGRAM_ID AND st.PLANNING_UNIT_ID=ppu.PLANNING_UNIT_ID 
        WHERE 
            st.ACTIVE AND st.ACCOUNT_FLAG AND ppu.ACTIVE AND pu.ACTIVE 
            AND st.SHIPMENT_STATUS_ID!=8 
            AND COALESCE(st.RECEIVED_DATE, st.EXPECTED_DELIVERY_DATE) BETWEEN VAR_START_DATE AND VAR_STOP_DATE 
        GROUP BY st.SHIPMENT_STATUS_ID;
    END IF;
END$$

DELIMITER ;
;

USE `fasp`;
DROP procedure IF EXISTS `getDashboardShipmentWithFundingSourceTbd`;

USE `fasp`;
DROP procedure IF EXISTS `fasp`.`getDashboardShipmentWithFundingSourceTbd`;
;

DELIMITER $$
USE `fasp`$$
CREATE DEFINER=`faspUser`@`%` PROCEDURE `getDashboardShipmentWithFundingSourceTbd`(VAR_START_DATE DATE, VAR_STOP_DATE DATE, VAR_PROGRAM_ID INT)
BEGIN

    SELECT p.CURRENT_VERSION_ID INTO @varVersionId FROM vw_program p WHERE p.PROGRAM_ID = VAR_PROGRAM_ID;
    
    SELECT 
        pu.`PLANNING_UNIT_ID`, pu.LABEL_ID, pu.LABEL_EN, pu.LABEL_FR, pu.LABEL_SP, pu.LABEL_PR, 
        COUNT(st.SHIPMENT_ID) `COUNT`
    FROM 
        ( 
        SELECT 
            s.SHIPMENT_ID, MAX(st.VERSION_ID) MAX_VERSION_ID, s.CONVERSION_RATE_TO_USD 
        FROM rm_shipment s 
        LEFT JOIN rm_shipment_trans st ON s.SHIPMENT_ID=st.SHIPMENT_ID 
        WHERE 
            s.PROGRAM_ID=VAR_PROGRAM_ID
            AND st.VERSION_ID<=@varVersionId
            AND st.SHIPMENT_TRANS_ID IS NOT NULL 
        GROUP BY s.SHIPMENT_ID 
    ) AS s 
    LEFT JOIN rm_shipment s1 ON s.SHIPMENT_ID=s1.SHIPMENT_ID 
    LEFT JOIN rm_shipment_trans st ON s.SHIPMENT_ID=st.SHIPMENT_ID AND s.MAX_VERSION_ID=st.VERSION_ID 
    LEFT JOIN vw_planning_unit pu ON st.PLANNING_UNIT_ID=pu.PLANNING_UNIT_ID 
    LEFT JOIN rm_program_planning_unit ppu ON s1.PROGRAM_ID=ppu.PROGRAM_ID AND st.PLANNING_UNIT_ID=ppu.PLANNING_UNIT_ID 
    WHERE 
        st.ACTIVE AND st.ACCOUNT_FLAG AND ppu.ACTIVE AND pu.ACTIVE 
        AND st.SHIPMENT_STATUS_ID!=8 
        AND COALESCE(st.RECEIVED_DATE, st.EXPECTED_DELIVERY_DATE) BETWEEN VAR_START_DATE AND VAR_STOP_DATE 
        AND st.FUNDING_SOURCE_ID=8
    GROUP BY st.PLANNING_UNIT_ID;
END$$

DELIMITER ;
;


USE `fasp`;
DROP procedure IF EXISTS `getDashboardForecastConsumptionProblems`;

DELIMITER $$
USE `fasp`$$
CREATE DEFINER=`faspUser`@`%` PROCEDURE `getDashboardForecastConsumptionProblems`(VAR_PROGRAM_ID INT, VAR_CUR_DATE DATE)
BEGIN

    SET @varStartDate = VAR_CUR_DATE;
    SET @varStopDate = DATE_ADD(@varStartDate, INTERVAL 18 MONTH);
    SELECT p.CURRENT_VERSION_ID into @versionId FROM rm_program p WHERE p.PROGRAM_ID=VAR_PROGRAM_ID;
    
    SELECT p2.PU_COUNT, SUM(IF(FORECAST_COUNT=19*p2.REGION_COUNT,1,0)) `GOOD_COUNT` FROM 
        (
        SELECT p1.*, COUNT(ppu.PLANNING_UNIT_ID) `PU_COUNT` FROM 
            (
            SELECT 
                p.PROGRAM_ID, COUNT(pr.REGION_ID) `REGION_COUNT`  
            FROM vw_program p 
            LEFT JOIN rm_program_region pr ON p.PROGRAM_ID=pr.PROGRAM_ID 
            WHERE p.PROGRAM_ID=VAR_PROGRAM_ID
            GROUP BY p.PROGRAM_ID
        ) p1 
        LEFT JOIN rm_program_planning_unit ppu ON p1.PROGRAM_ID=ppu.PROGRAM_ID AND ppu.ACTIVE
        LEFT JOIN rm_planning_unit pu ON ppu.PLANNING_UNIT_ID=pu.PLANNING_UNIT_ID AND pu.ACTIVE
        GROUP BY p1.PROGRAM_ID
    ) p2 
    LEFT JOIN (SELECT 
            ct.PLANNING_UNIT_ID, SUM(IF(ct.ACTUAL_FLAG=0, IF(ct.CONSUMPTION_QTY is not null, 1, 0), 0)) `FORECAST_COUNT`
	FROM (SELECT ct.CONSUMPTION_ID, MAX(ct.VERSION_ID) MAX_VERSION_ID FROM rm_consumption c LEFT JOIN rm_consumption_trans ct ON c.CONSUMPTION_ID=ct.CONSUMPTION_ID WHERE (@versionId=-1 OR ct.VERSION_ID<=@versionId) AND c.PROGRAM_ID=VAR_PROGRAM_ID GROUP BY ct.CONSUMPTION_ID) tc 
	LEFT JOIN rm_consumption cons ON tc.CONSUMPTION_ID=cons.CONSUMPTION_ID
	LEFT JOIN rm_consumption_trans ct ON tc.CONSUMPTION_ID=ct.CONSUMPTION_ID AND tc.MAX_VERSION_ID=ct.VERSION_ID
    LEFT JOIN vw_planning_unit pu ON ct.PLANNING_UNIT_ID=pu.PLANNING_UNIT_ID
    LEFT JOIN rm_program_planning_unit ppu ON ppu.PROGRAM_ID=VAR_PROGRAM_ID AND ppu.PLANNING_UNIT_ID=ct.PLANNING_UNIT_ID
    WHERE ppu.ACTIVE AND pu.ACTIVE AND ct.ACTIVE AND ct.CONSUMPTION_DATE BETWEEN @varStartDate and @varStopDate
    GROUP BY ct.PLANNING_UNIT_ID) c1 ON TRUE
    GROUP BY p2.PROGRAM_ID;
END$$

DELIMITER ;

USE `fasp`;
DROP procedure IF EXISTS `getDashboardActualConsumptionList`;

USE `fasp`;
DROP procedure IF EXISTS `fasp`.`getDashboardActualConsumptionList`;
;

DELIMITER $$
USE `fasp`$$
CREATE DEFINER=`faspUser`@`%` PROCEDURE `getDashboardActualConsumptionList`(VAR_PROGRAM_ID INT, VAR_CUR_DATE DATE)
BEGIN

    SET @stopDate = CONCAT(SUBSTRING(VAR_CUR_DATE,1,7),"-01");
    SET @startDate = DATE_SUB(@stopDate, INTERVAL 6 MONTH);
    SELECT p.CURRENT_VERSION_ID into @versionId FROM rm_program p WHERE p.PROGRAM_ID=VAR_PROGRAM_ID;
    
    SELECT pu.PLANNING_UNIT_ID, mn.`MONTH` `CONSUMPTION_DATE` , pr1.REGION_COUNT , c1.ACTUAL_COUNT
    FROM vw_program p 
    LEFT JOIN rm_program_planning_unit ppu ON ppu.PROGRAM_ID=VAR_PROGRAM_ID AND ppu.ACTIVE
    LEFT JOIN vw_planning_unit pu ON ppu.PLANNING_UNIT_ID=pu.PLANNING_UNIT_ID AND pu.ACTIVE
    LEFT JOIN (SELECT pr.PROGRAM_ID, COUNT(pr.REGION_ID) REGION_COUNT FROM rm_program_region pr WHERE pr.PROGRAM_ID=VAR_PROGRAM_ID GROUP BY pr.PROGRAM_ID) pr1 ON pr1.PROGRAM_ID=p.PROGRAM_ID
    LEFT JOIN mn ON mn.MONTH BETWEEN @startDate and @stopDate
    LEFT JOIN (
        SELECT 
            ct.PLANNING_UNIT_ID, ct.CONSUMPTION_DATE, SUM(IF(ct.CONSUMPTION_QTY IS NOT NULL, 1, 0)) `ACTUAL_COUNT` 
        FROM (SELECT c.PROGRAM_ID, ct.CONSUMPTION_ID, MAX(ct.VERSION_ID) MAX_VERSION_ID FROM rm_consumption c LEFT JOIN rm_consumption_trans ct ON c.CONSUMPTION_ID=ct.CONSUMPTION_ID WHERE (@versionId=-1 OR ct.VERSION_ID<=@versionId) AND c.PROGRAM_ID=VAR_PROGRAM_ID GROUP BY ct.CONSUMPTION_ID) tc
        LEFT JOIN rm_consumption cons ON tc.CONSUMPTION_ID=cons.CONSUMPTION_ID
        LEFT JOIN rm_consumption_trans ct ON tc.CONSUMPTION_ID=ct.CONSUMPTION_ID AND tc.MAX_VERSION_ID=ct.VERSION_ID
        WHERE ct.ACTIVE AND ct.ACTUAL_FLAG=1 AND ct.CONSUMPTION_DATE BETWEEN @startDate and @stopDate
        GROUP BY ct.PLANNING_UNIT_ID, ct.CONSUMPTION_DATE
    ) c1 ON pu.PLANNING_UNIT_ID=c1.PLANNING_UNIT_ID AND mn.MONTH=c1.CONSUMPTION_DATE
    WHERE p.PROGRAM_ID=VAR_PROGRAM_ID
    ORDER BY pu.PLANNING_UNIT_ID, mn.MONTH DESC;
END$$

DELIMITER ;
;

USE `fasp`;
DROP procedure IF EXISTS `getDashboardInventoryProblems`;

USE `fasp`;
DROP procedure IF EXISTS `fasp`.`getDashboardInventoryProblems`;
;

DELIMITER $$
USE `fasp`$$
CREATE DEFINER=`faspUser`@`%` PROCEDURE `getDashboardInventoryProblems`(VAR_PROGRAM_ID INT, VAR_CUR_DATE DATE)
BEGIN

    SET @stopDate = CONCAT(SUBSTRING(VAR_CUR_DATE,1,7),"-01");
    SET @startDate = DATE_SUB(@stopDate, INTERVAL 3 MONTH);
    SELECT p.CURRENT_VERSION_ID into @versionId FROM rm_program p WHERE p.PROGRAM_ID=VAR_PROGRAM_ID;
    
    SELECT COUNT(pu.PLANNING_UNIT_ID) `PU_COUNT`, SUM(IF(IFNULL(i1.ACTUAL_QTY_COUNT,0)>=pr1.REGION_COUNT,1,0)) `GOOD_COUNT`
    FROM vw_program p 
    LEFT JOIN rm_program_planning_unit ppu ON ppu.PROGRAM_ID=VAR_PROGRAM_ID AND ppu.ACTIVE
    LEFT JOIN vw_planning_unit pu ON ppu.PLANNING_UNIT_ID=pu.PLANNING_UNIT_ID AND pu.ACTIVE
    LEFT JOIN (SELECT pr.PROGRAM_ID, COUNT(pr.REGION_ID) REGION_COUNT FROM rm_program_region pr WHERE pr.PROGRAM_ID=VAR_PROGRAM_ID GROUP BY pr.PROGRAM_ID) pr1 ON pr1.PROGRAM_ID=p.PROGRAM_ID
    LEFT JOIN (
        SELECT 
            rcpu.PLANNING_UNIT_ID, SUM(IF(it.ACTUAL_QTY IS NOT NULL, 1, 0)) ACTUAL_QTY_COUNT
        FROM (SELECT i.INVENTORY_ID, MAX(it.VERSION_ID) MAX_VERSION_ID FROM rm_inventory i LEFT JOIN rm_inventory_trans it ON i.INVENTORY_ID=it.INVENTORY_ID WHERE i.PROGRAM_ID=VAR_PROGRAM_ID AND (it.VERSION_ID<=@versionId OR @versionId=-1) GROUP BY i.INVENTORY_ID) tc 
        LEFT JOIN rm_inventory i ON tc.INVENTORY_ID=i.INVENTORY_ID
        LEFT JOIN rm_inventory_trans it ON tc.INVENTORY_ID=it.INVENTORY_ID AND tc.MAX_VERSION_ID=it.VERSION_ID
        LEFT JOIN rm_realm_country_planning_unit rcpu ON rcpu.REALM_COUNTRY_PLANNING_UNIT_ID=it.REALM_COUNTRY_PLANNING_UNIT_ID
        WHERE it.ACTIVE AND it.INVENTORY_DATE BETWEEN @startDate AND @stopDate
        GROUP BY rcpu.PLANNING_UNIT_ID
    ) i1 ON pu.PLANNING_UNIT_ID=i1.PLANNING_UNIT_ID
    WHERE p.PROGRAM_ID=VAR_PROGRAM_ID;
END$$

DELIMITER ;
;

USE `fasp`;
DROP procedure IF EXISTS `getDashboardShipmentProblems`;

USE `fasp`;
DROP procedure IF EXISTS `fasp`.`getDashboardShipmentProblems`;
;

DELIMITER $$
USE `fasp`$$
CREATE DEFINER=`faspUser`@`%` PROCEDURE `getDashboardShipmentProblems`(VAR_PROGRAM_ID INT, VAR_CUR_DATE DATE)
BEGIN

    SELECT p.CURRENT_VERSION_ID into @versionId FROM rm_program p WHERE p.PROGRAM_ID=VAR_PROGRAM_ID;
    
    SELECT COUNT(s2.PLANNING_UNIT_ID) `PU_COUNT`, SUM(IF(s2.`RECEIVED_DATE_IN_PAST_COUNT`=0 AND s2.`SHOULD_HAVE_SUBMITTED_COUNT`=0,1,0)) `GOOD_COUNT` 
    FROM (
        SELECT
            st.PLANNING_UNIT_ID, 
            SUM(IF(st.SHIPMENT_STATUS_ID!=7 AND COALESCE(st.RECEIVED_DATE, st.EXPECTED_DELIVERY_DATE)<VAR_CUR_DATE, 1, 0)) `RECEIVED_DATE_IN_PAST_COUNT`, 
            SUM(IF(st.SHIPMENT_STATUS_ID in (1,2) AND VAR_CUR_DATE > DATE_SUB(COALESCE(st.RECEIVED_DATE, st.EXPECTED_DELIVERY_DATE),INTERVAL IF(
                st.LOCAL_PROCUREMENT=1,
                COALESCE(ppupa1.LOCAL_PROCUREMENT_LEAD_TIME, ppupa2.LOCAL_PROCUREMENT_LEAD_TIME, ppu.LOCAL_PROCUREMENT_LEAD_TIME),
                COALESCE(
                    (ppupa1.ARRIVED_TO_DELIVERED_LEAD_TIME+IF(st.SHIPMENT_MODE='Air', ppupa1.SHIPPED_TO_ARRIVED_BY_AIR_LEAD_TIME, IF(st.SHIPMENT_MODE='Sea', ppupa1.SHIPPED_TO_ARRIVED_BY_SEA_LEAD_TIME, IF(st.SHIPMENT_MODE='Road', ppupa1.SHIPPED_TO_ARRIVED_BY_ROAD_LEAD_TIME, NULL)))+COALESCE(ppupa1.APPROVED_TO_SHIPPED_LEAD_TIME,pa.APPROVED_TO_SHIPPED_LEAD_TIME)+COALESCE(ppupa1.SUBMITTED_TO_APPROVED_LEAD_TIME,pa.SUBMITTED_TO_APPROVED_LEAD_TIME)), 
                    (ppupa2.ARRIVED_TO_DELIVERED_LEAD_TIME+IF(st.SHIPMENT_MODE='Air', ppupa2.SHIPPED_TO_ARRIVED_BY_AIR_LEAD_TIME, IF(st.SHIPMENT_MODE='Sea', ppupa2.SHIPPED_TO_ARRIVED_BY_SEA_LEAD_TIME, IF(st.SHIPMENT_MODE='Road', ppupa2.SHIPPED_TO_ARRIVED_BY_ROAD_LEAD_TIME, NULL)))+COALESCE(ppupa2.APPROVED_TO_SHIPPED_LEAD_TIME,pa.APPROVED_TO_SHIPPED_LEAD_TIME)+COALESCE(ppupa2.SUBMITTED_TO_APPROVED_LEAD_TIME,pa.SUBMITTED_TO_APPROVED_LEAD_TIME)), 
                    (p.ARRIVED_TO_DELIVERED_LEAD_TIME+IF(st.SHIPMENT_MODE='Air', p.SHIPPED_TO_ARRIVED_BY_AIR_LEAD_TIME, IF(st.SHIPMENT_MODE='Sea', p.SHIPPED_TO_ARRIVED_BY_SEA_LEAD_TIME, IF(st.SHIPMENT_MODE='Road', p.SHIPPED_TO_ARRIVED_BY_ROAD_LEAD_TIME, NULL)))+COALESCE(pa.APPROVED_TO_SHIPPED_LEAD_TIME,p.APPROVED_TO_SHIPPED_LEAD_TIME)+COALESCE(pa.SUBMITTED_TO_APPROVED_LEAD_TIME,p.SUBMITTED_TO_APPROVED_LEAD_TIME))
                )
            ) MONTH), 1, 0)) `SHOULD_HAVE_SUBMITTED_COUNT`
        FROM (
            SELECT st.SHIPMENT_ID, MAX(st.VERSION_ID) MAX_VERSION_ID FROM rm_shipment s LEFT JOIN rm_shipment_trans st ON s.SHIPMENT_ID=st.SHIPMENT_ID WHERE (@versiONId=-1 OR st.VERSION_ID<=@versiONId) AND s.PROGRAM_ID=VAR_PROGRAM_ID GROUP BY st.SHIPMENT_ID
        ) ts 
        LEFT JOIN rm_shipment s ON ts.SHIPMENT_ID=s.SHIPMENT_ID
        LEFT JOIN rm_shipment_trans st ON ts.SHIPMENT_ID=st.SHIPMENT_ID AND ts.MAX_VERSION_ID=st.VERSION_ID
        LEFT JOIN rm_program p ON s.PROGRAM_ID=p.PROGRAM_ID
        LEFT JOIN rm_program_planning_unit ppu ON s.PROGRAM_ID=ppu.PROGRAM_ID AND st.PLANNING_UNIT_ID=ppu.PLANNING_UNIT_ID
        LEFT JOIN rm_planning_unit pu ON ppu.PLANNING_UNIT_ID=pu.PLANNING_UNIT_ID
        LEFT JOIN rm_program_planning_unit_procurement_agent ppupa1 ON ppu.PROGRAM_ID=ppupa1.PROGRAM_ID AND ppu.PLANNING_UNIT_ID=ppupa1.PLANNING_UNIT_ID AND st.PROCUREMENT_AGENT_ID=ppupa1.PROCUREMENT_AGENT_ID
        LEFT JOIN rm_program_planning_unit_procurement_agent ppupa2 ON ppu.PROGRAM_ID=ppupa2.PROGRAM_ID AND ppupa2.PLANNING_UNIT_ID=-1 AND st.PROCUREMENT_AGENT_ID=ppupa2.PROCUREMENT_AGENT_ID
        LEFT JOIN rm_procurement_agent pa ON st.PROCUREMENT_AGENT_ID=pa.PROCUREMENT_AGENT_ID
        WHERE st.ACTIVE AND st.ACCOUNT_FLAG AND st.SHIPMENT_STATUS_ID!=8 AND ppu.ACTIVE AND pu.ACTIVE
        GROUP BY pu.PLANNING_UNIT_ID
    ) s2;
END$$

DELIMITER ;
;

USE `fasp`;
DROP procedure IF EXISTS `getDashboardForecastErrorNew`;

USE `fasp`;
DROP procedure IF EXISTS `fasp`.`getDashboardForecastErrorNew`;
;

DELIMITER $$
USE `fasp`$$
CREATE DEFINER=`faspUser`@`%` PROCEDURE `getDashboardForecastErrorNew`(VAR_START_DATE DATE, VAR_STOP_DATE DATE, VAR_PROGRAM_ID INT)
BEGIN

    SELECT p.CURRENT_VERSION_ID INTO @varVersionId FROM vw_program p WHERE p.PROGRAM_ID=VAR_PROGRAM_ID;
    SELECT GROUP_CONCAT(pu.PLANNING_UNIT_ID) INTO @varPuList
    FROM vw_program p 
    LEFT JOIN rm_program_planning_unit ppu ON p.PROGRAM_ID=ppu.PROGRAM_ID
    LEFT JOIN rm_planning_unit pu ON ppu.PLANNING_UNIT_ID=pu.PLANNING_UNIT_ID
    WHERE p.PROGRAM_ID=VAR_PROGRAM_ID AND ppu.ACTIVE AND pu.ACTIVE;
    SELECT COUNT(pr.REGION_ID) into @varRegionCount FROM rm_program_region pr WHERE pr.PROGRAM_ID=VAR_PROGRAM_ID;

 
    SELECT 
        c4.PLANNING_UNIT_ID, c4.LABEL_ID, c4.LABEL_EN, c4.LABEL_FR, c4.LABEL_SP, c4.LABEL_PR, AVG(FORECAST_ERROR) AVG_FORECAST_ERROR 
    FROM (
        SELECT 
            mn.MONTH, pu.PLANNING_UNIT_ID, pu.LABEL_ID, pu.LABEL_EN, pu.LABEL_FR, pu.LABEL_SP, pu.LABEL_PR, c2.CONSUMPTION_DATE, c2.FORECAST_CONSUMPTION, c2.ACTUAL_CONSUMPTION, 
            IF(c2.FORECAST_CONSUMPTION IS NOT NULL AND c2.ACTUAL_CONSUMPTION IS NOT NULL, SUM(ABS(c3.`FORECAST_CONSUMPTION`-c3.`ACTUAL_CONSUMPTION`))/SUM(c3.`ACTUAL_CONSUMPTION`), null) `FORECAST_ERROR`
        FROM mn 
        LEFT JOIN vw_program p ON p.PROGRAM_ID=VAR_PROGRAM_ID
        LEFT JOIN rm_program_planning_unit ppu ON p.PROGRAM_ID=ppu.PROGRAM_ID
        LEFT JOIN vw_planning_unit pu ON ppu.PLANNING_UNIT_ID=pu.PLANNING_UNIT_ID
        LEFT JOIN (
            SELECT c1.PLANNING_UNIT_ID, c1.CONSUMPTION_DATE, COUNT(c1.REGION_ID) `REGION_COUNT`, SUM(c1.`FORECAST_CONSUMPTION`) `FORECAST_CONSUMPTION`, SUM(c1.`ACTUAL_CONSUMPTION`) `ACTUAL_CONSUMPTION` 
            FROM (
                SELECT ct.PLANNING_UNIT_ID, ct.REGION_ID, ct.CONSUMPTION_DATE, SUM(IF(ct.ACTUAL_FLAG, ct.CONSUMPTION_QTY, null)) `ACTUAL_CONSUMPTION`, SUM(IF(ct.ACTUAL_FLAG=0, ct.CONSUMPTION_QTY, null)) `FORECAST_CONSUMPTION`
                FROM (
                    SELECT ct.CONSUMPTION_ID, MAX(ct.VERSION_ID) MAX_VERSION_ID FROM rm_consumption c LEFT JOIN rm_consumption_trans ct ON c.CONSUMPTION_ID=ct.CONSUMPTION_ID WHERE ct.VERSION_ID<=@varVersionId AND c.PROGRAM_ID=VAR_PROGRAM_ID GROUP BY ct.CONSUMPTION_ID
                ) tc 
                LEFT JOIN rm_consumption cons ON tc.CONSUMPTION_ID=cons.`CONSUMPTION_ID`
                LEFT JOIN rm_consumption_trans ct ON cons.CONSUMPTION_ID=ct.CONSUMPTION_ID AND tc.MAX_VERSION_ID=ct.VERSION_ID
                WHERE ct.CONSUMPTION_DATE BETWEEN VAR_START_DATE AND VAR_STOP_DATE AND FIND_IN_SET(ct.PLANNING_UNIT_ID, @varPuList)
                GROUP BY ct.PLANNING_UNIT_ID, ct.REGION_ID, ct.CONSUMPTION_DATE
    --            ORDER BY ct.PLANNING_UNIT_ID, ct.REGION_ID, ct.CONSUMPTION_DATE
            ) c1 GROUP BY c1.PLANNING_UNIT_ID, c1.CONSUMPTION_DATE HAVING REGION_COUNT=@varRegionCount
        ) c2 ON pu.PLANNING_UNIT_ID=c2.PLANNING_UNIT_ID AND mn.MONTH=c2.CONSUMPTION_DATE
        LEFT JOIN (
            SELECT ct.PLANNING_UNIT_ID, ct.CONSUMPTION_DATE, SUM(IF(ct.ACTUAL_FLAG=0, ct.CONSUMPTION_QTY, null)) `FORECAST_CONSUMPTION`, SUM(IF(ct.ACTUAL_FLAG, ct.CONSUMPTION_QTY, null)) `ACTUAL_CONSUMPTION`
            FROM (
                SELECT ct.CONSUMPTION_ID, MAX(ct.VERSION_ID) MAX_VERSION_ID FROM rm_consumption c LEFT JOIN rm_consumption_trans ct ON c.CONSUMPTION_ID=ct.CONSUMPTION_ID WHERE ct.VERSION_ID<=@varVersionId AND c.PROGRAM_ID=VAR_PROGRAM_ID GROUP BY ct.CONSUMPTION_ID
            ) tc 
            LEFT JOIN rm_consumption cons ON tc.CONSUMPTION_ID=cons.`CONSUMPTION_ID`
            LEFT JOIN rm_consumption_trans ct ON cons.CONSUMPTION_ID=ct.CONSUMPTION_ID AND tc.MAX_VERSION_ID=ct.VERSION_ID
            WHERE ct.CONSUMPTION_DATE BETWEEN SUBDATE(VAR_START_DATE, INTERVAL 5 MONTH) AND VAR_STOP_DATE AND FIND_IN_SET(ct.PLANNING_UNIT_ID, @varPuList)
            GROUP BY ct.PLANNING_UNIT_ID, ct.CONSUMPTION_DATE
        ) c3 ON c3.CONSUMPTION_DATE BETWEEN SUBDATE(mn.`MONTH`, INTERVAL 5 MONTH) AND mn.`MONTH` AND c3.PLANNING_UNIT_ID=c2.PLANNING_UNIT_ID
        WHERE mn.MONTH BETWEEN VAR_START_DATE AND VAR_STOP_DATE AND p.PROGRAM_ID=VAR_PROGRAM_ID AND pu.ACTIVE AND c2.PLANNING_UNIT_ID IS NOT NULL
        GROUP BY pu.PLANNING_UNIT_ID, mn.`MONTH`
    --    ORDER BY pu.PLANNING_UNIT_ID, mn.`MONTH`
    ) c4 GROUP BY c4.PLANNING_UNIT_ID ORDER BY AVG_FORECAST_ERROR DESC;
END$$

DELIMITER ;
;

