ALTER TABLE `fasp`.`rm_realm` ADD COLUMN `NO_OF_MONTHS_IN_FUTURE_FOR_TOP_DASHBOARD` INT UNSIGNED NOT NULL DEFAULT 18 AFTER `NO_OF_MONTHS_IN_PAST_FOR_BOTTOM_DASHBOARD`;
ALTER TABLE `fasp`.`rm_realm` ADD COLUMN `NO_OF_MONTHS_IN_PAST_FOR_TOP_DASHBOARD` INT UNSIGNED NOT NULL DEFAULT 18 AFTER `NO_OF_MONTHS_IN_FUTURE_FOR_BOTTOM_DASHBOARD`;
ALTER TABLE `fasp`.`rm_realm` CHANGE COLUMN `NO_OF_MONTHS_IN_FUTURE_FOR_TOP_DASHBOARD` `NO_OF_MONTHS_IN_FUTURE_FOR_TOP_DASHBOARD` INT UNSIGNED NOT NULL DEFAULT '18' AFTER `NO_OF_MONTHS_IN_PAST_FOR_TOP_DASHBOARD`;
USE `fasp`;
CREATE 
     OR REPLACE ALGORITHM = UNDEFINED 
    DEFINER = `faspUser`@`%` 
    SQL SECURITY DEFINER
VIEW `vw_realm` AS
    SELECT 
        `r`.`REALM_ID` AS `REALM_ID`,
        `r`.`REALM_CODE` AS `REALM_CODE`,
        `r`.`LABEL_ID` AS `LABEL_ID`,
        `r`.`DEFAULT_REALM` AS `DEFAULT_REALM`,
        `r`.`MIN_MOS_MIN_GAURDRAIL` AS `MIN_MOS_MIN_GAURDRAIL`,
        `r`.`MIN_MOS_MAX_GAURDRAIL` AS `MIN_MOS_MAX_GAURDRAIL`,
        `r`.`MAX_MOS_MAX_GAURDRAIL` AS `MAX_MOS_MAX_GAURDRAIL`,
        `r`.`MIN_QPL_TOLERANCE` AS `MIN_QPL_TOLERANCE`,
        `r`.`MIN_QPL_TOLERANCE_CUT_OFF` AS `MIN_QPL_TOLERANCE_CUT_OFF`,
        `r`.`MAX_QPL_TOLERANCE` AS `MAX_QPL_TOLERANCE`,
        `r`.`ACTUAL_CONSUMPTION_MONTHS_IN_PAST` AS `ACTUAL_CONSUMPTION_MONTHS_IN_PAST`,
        `r`.`FORECAST_CONSUMPTION_MONTH_IN_PAST` AS `FORECAST_CONSUMPTION_MONTH_IN_PAST`,
        `r`.`INVENTORY_MONTHS_IN_PAST` AS `INVENTORY_MONTHS_IN_PAST`,
        `r`.`MIN_COUNT_FOR_MODE` AS `MIN_COUNT_FOR_MODE`,
        `r`.`MIN_PERC_FOR_MODE` AS `MIN_PERC_FOR_MODE`,
        `r`.`NO_OF_MONTHS_IN_PAST_FOR_BOTTOM_DASHBOARD` AS `NO_OF_MONTHS_IN_PAST_FOR_BOTTOM_DASHBOARD`,
        `r`.`NO_OF_MONTHS_IN_FUTURE_FOR_BOTTOM_DASHBOARD` AS `NO_OF_MONTHS_IN_FUTURE_FOR_BOTTOM_DASHBOARD`,
        `r`.`NO_OF_MONTHS_IN_PAST_FOR_TOP_DASHBOARD` AS `NO_OF_MONTHS_IN_PAST_FOR_TOP_DASHBOARD`,
        `r`.`NO_OF_MONTHS_IN_FUTURE_FOR_TOP_DASHBOARD` AS `NO_OF_MONTHS_IN_FUTURE_FOR_TOP_DASHBOARD`,
        `r`.`ACTIVE` AS `ACTIVE`,
        `r`.`CREATED_BY` AS `CREATED_BY`,
        `r`.`CREATED_DATE` AS `CREATED_DATE`,
        `r`.`LAST_MODIFIED_BY` AS `LAST_MODIFIED_BY`,
        `r`.`LAST_MODIFIED_DATE` AS `LAST_MODIFIED_DATE`,
        `rl`.`LABEL_EN` AS `LABEL_EN`,
        `rl`.`LABEL_FR` AS `LABEL_FR`,
        `rl`.`LABEL_SP` AS `LABEL_SP`,
        `rl`.`LABEL_PR` AS `LABEL_PR`
    FROM
        (`rm_realm` `r`
        LEFT JOIN `ap_label` `rl` ON ((`r`.`LABEL_ID` = `rl`.`LABEL_ID`)));


USE `fasp`;
DROP procedure IF EXISTS `getDashboardExpiriesList`;

USE `fasp`;
DROP procedure IF EXISTS `fasp`.`getDashboardExpiriesList`;
;

DELIMITER $$
USE `fasp`$$
CREATE DEFINER=`faspUser`@`%` PROCEDURE `getDashboardExpiriesList`(VAR_START_DATE DATE, VAR_STOP_DATE DATE, VAR_PROGRAM_ID INT, VAR_VERSION_ID INT)
BEGIN

    IF VAR_VERSION_ID = -1 THEN
        SELECT p.CURRENT_VERSION_ID INTO @versionId FROM rm_program p WHERE p.PROGRAM_ID=VAR_PROGRAM_ID;
    ELSE
        SET @versionId = VAR_VERSION_ID;
    END IF;

    SELECT p1.*, st.`RATE` 
    FROM (
        SELECT 
            p.PROGRAM_ID, pu.PLANNING_UNIT_ID, pu.LABEL_ID, pu.LABEL_EN, pu.LABEL_FR, pu.LABEL_SP, pu.LABEL_PR, 
            b.BATCH_ID, b.BATCH_NO, b.AUTO_GENERATED, spb.EXPIRY_DATE, SUM(spb.EXPIRED_STOCK) `EXPIRED_STOCK` 
        FROM vw_program p 
        LEFT JOIN rm_program_planning_unit ppu ON p.PROGRAM_ID=ppu.PROGRAM_ID AND ppu.ACTIVE 
        LEFT JOIN vw_planning_unit pu ON ppu.PLANNING_UNIT_ID=pu.PLANNING_UNIT_ID AND pu.ACTIVE 
        LEFT JOIN rm_supply_plan_batch_qty spb ON p.PROGRAM_ID=spb.PROGRAM_ID AND spb.VERSION_ID=@versionId AND spb.TRANS_DATE BETWEEN VAR_START_DATE and VAR_STOP_DATE AND pu.PLANNING_UNIT_ID=spb.PLANNING_UNIT_ID 
        LEFT JOIN rm_batch_info b ON spb.BATCH_ID=b.BATCH_ID 
        WHERE p.PROGRAM_ID=VAR_PROGRAM_ID AND spb.TRANS_DATE BETWEEN VAR_START_DATE and VAR_STOP_DATE AND spb.EXPIRED_STOCK>0 
        GROUP BY spb.PLANNING_UNIT_ID, spb.BATCH_ID
    ) p1 
    LEFT JOIN rm_shipment_trans_batch_info stbi ON p1.BATCH_ID=stbi.BATCH_ID 
    LEFT JOIN rm_shipment_trans st ON stbi.SHIPMENT_TRANS_ID=st.SHIPMENT_TRANS_ID AND st.VERSION_ID<=@versionId GROUP BY stbi.BATCH_ID ;
END$$

DELIMITER ;
;


USE `fasp`;
DROP procedure IF EXISTS `getDashboardStockOutCount`;

USE `fasp`;
DROP procedure IF EXISTS `fasp`.`getDashboardStockOutCount`;
;

DELIMITER $$
USE `fasp`$$
CREATE DEFINER=`faspUser`@`%` PROCEDURE `getDashboardStockOutCount`(VAR_START_DATE DATE, VAR_STOP_DATE DATE, VAR_PROGRAM_ID INT, VAR_VERSION_ID INT)
BEGIN
    IF VAR_VERSION_ID = -1 THEN
        SELECT p.CURRENT_VERSION_ID INTO @versionId FROM rm_program p WHERE p.PROGRAM_ID=VAR_PROGRAM_ID;
    ELSE
        SET @versionId = VAR_VERSION_ID;
    END IF;
    
    SELECT 
        pu.PLANNING_UNIT_ID, pu.LABEL_ID, pu.LABEL_EN, pu.LABEL_FR, pu.LABEL_SP, pu.LABEL_PR, 
        SUM(IF(ROUND(amc.MOS,1)=0,1,0)) `COUNT` 
    FROM rm_supply_plan_amc amc 
    LEFT JOIN rm_program_planning_unit ppu ON amc.PROGRAM_ID=ppu.PROGRAM_ID AND amc.PLANNING_UNIT_ID=ppu.PLANNING_UNIT_ID AND ppu.ACTIVE
    LEFT JOIN vw_planning_unit pu ON ppu.PLANNING_UNIT_ID=pu.PLANNING_UNIT_ID AND pu.ACTIVE
    WHERE amc.PROGRAM_ID=VAR_PROGRAM_ID AND amc.VERSION_ID=@versionId AND amc.TRANS_DATE BETWEEN VAR_START_DATE AND VAR_STOP_DATE AND ppu.ACTIVE AND pu.ACTIVE
    GROUP BY pu.PLANNING_UNIT_ID;
END$$

DELIMITER ;
;

ALTER TABLE `fasp`.`rm_realm` 
CHANGE COLUMN `NO_OF_MONTHS_IN_PAST_FOR_BOTTOM_DASHBOARD` `NO_OF_MONTHS_IN_PAST_FOR_BOTTOM_DASHBOARD` INT(10) UNSIGNED NOT NULL DEFAULT '6' ,
CHANGE COLUMN `NO_OF_MONTHS_IN_PAST_FOR_TOP_DASHBOARD` `NO_OF_MONTHS_IN_PAST_FOR_TOP_DASHBOARD` INT(10) UNSIGNED NOT NULL DEFAULT '0' ;

UPDATE rm_realm r SET r.LAST_MODIFIED_DATE=now();