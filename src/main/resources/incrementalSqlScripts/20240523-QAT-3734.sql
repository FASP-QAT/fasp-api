UPDATE rm_realm_country_planning_unit rcpu SET rcpu.CONVERSION_METHOD=1,rcpu.LAST_MODIFIED_DATE=now();

USE `fasp`;
DROP procedure IF EXISTS `getConsumptionData`;

USE `fasp`;
DROP procedure IF EXISTS `fasp`.`getConsumptionData`;
;

DELIMITER $$
USE `fasp`$$
CREATE DEFINER=`faspUser`@`%` PROCEDURE `getConsumptionData`(PROGRAM_ID INT(10), VERSION_ID INT (10), PLANNING_UNIT_ACTIVE TINYINT(1))
BEGIN
    SET @programId = PROGRAM_ID;
    SET @versionId = VERSION_ID;
    SET @planningUmitActive= PLANNING_UNIT_ACTIVE;
    IF @versionId = -1 THEN 
        SELECT MAX(pv.VERSION_ID) into @versionId FROM rm_program_version pv where pv.PROGRAM_ID=@programId;
    END IF;

    SELECT 
	ct.*, ctbi.CONSUMPTION_TRANS_BATCH_INFO_ID, bi.PLANNING_UNIT_ID `BATCH_PLANNING_UNIT_ID`, ctbi.BATCH_ID, bi.BATCH_NO, bi.AUTO_GENERATED, bi.EXPIRY_DATE, bi.CREATED_DATE `BATCH_CREATED_DATE`, ctbi.CONSUMPTION_QTY `BATCH_QTY`
    FROM (
	SELECT 
            cons.CONSUMPTION_ID, ct.CONSUMPTION_DATE, ct.CONSUMPTION_RCPU_QTY, ct.CONSUMPTION_QTY, ct.DAYS_OF_STOCK_OUT, ct.ACTUAL_FLAG, ct.VERSION_ID, ct.NOTES, ct.CONSUMPTION_TRANS_ID,
            p.PROGRAM_ID, p.LABEL_ID `PROGRAM_LABEL_ID`, p.LABEL_EN `PROGRAM_LABEL_EN`, p.LABEL_FR `PROGRAM_LABEL_FR`, p.LABEL_SP `PROGRAM_LABEL_SP`, p.LABEL_PR `PROGRAM_LABEL_PR`,
            r.REGION_ID, r.LABEL_ID `REGION_LABEL_ID`, r.LABEL_EN `REGION_LABEL_EN`, r.LABEL_FR `REGION_LABEL_FR`, r.LABEL_SP `REGION_LABEL_SP`, r.LABEL_PR `REGION_LABEL_PR`,
            rcpu.REALM_COUNTRY_PLANNING_UNIT_ID, rcpu.LABEL_ID `RCPU_LABEL_ID`, rcpu.LABEL_EN `RCPU_LABEL_EN`, rcpu.LABEL_FR `RCPU_LABEL_FR`, rcpu.LABEL_SP `RCPU_LABEL_SP`, rcpu.LABEL_PR `RCPU_LABEL_PR`, 
            IF (rcpu.CONVERSION_METHOD IS NULL OR rcpu.CONVERSION_METHOD=1, rcpu.CONVERSION_NUMBER, IF(rcpu.CONVERSION_METHOD=2, 1/rcpu.CONVERSION_NUMBER, 0)) `MULTIPLIER`, pu.MULTIPLIER `CONVERSION_FACTOR`,
            pu.PLANNING_UNIT_ID, pu.LABEL_ID `PLANNING_UNIT_LABEL_ID`, pu.LABEL_EN `PLANNING_UNIT_LABEL_EN`, pu.LABEL_FR `PLANNING_UNIT_LABEL_FR`, pu.LABEL_SP `PLANNING_UNIT_LABEL_SP`, pu.LABEL_PR `PLANNING_UNIT_LABEL_PR`,
            fu.FORECASTING_UNIT_ID, fu.LABEL_ID `FORECASTING_UNIT_LABEL_ID`, fu.LABEL_EN `FORECASTING_UNIT_LABEL_EN`, fu.LABEL_FR `FORECASTING_UNIT_LABEL_FR`, fu.LABEL_SP `FORECASTING_UNIT_LABEL_SP`, fu.LABEL_PR `FORECASTING_UNIT_LABEL_PR`,
            pc.PRODUCT_CATEGORY_ID, pc.LABEL_ID `PRODUCT_CATEGORY_LABEL_ID`, pc.LABEL_EN `PRODUCT_CATEGORY_LABEL_EN`, pc.LABEL_FR `PRODUCT_CATEGORY_LABEL_FR`, pc.LABEL_SP `PRODUCT_CATEGORY_LABEL_SP`, pc.LABEL_PR `PRODUCT_CATEGORY_LABEL_PR`,
            ds.DATA_SOURCE_ID, ds.LABEL_ID `DATA_SOURCE_LABEL_ID`, ds.LABEL_EN `DATA_SOURCE_LABEL_EN`, ds.LABEL_FR `DATA_SOURCE_LABEL_FR`, ds.LABEL_SP `DATA_SOURCE_LABEL_SP`, ds.LABEL_PR `DATA_SOURCE_LABEL_PR`,
            cb.USER_ID `CB_USER_ID`, cb.USERNAME `CB_USERNAME`, cons.CREATED_DATE, lmb.USER_ID `LMB_USER_ID`, lmb.USERNAME `LMB_USERNAME`, ct.LAST_MODIFIED_DATE, ct.ACTIVE
	FROM (SELECT ct.CONSUMPTION_ID, MAX(ct.VERSION_ID) MAX_VERSION_ID FROM rm_consumption c LEFT JOIN rm_consumption_trans ct ON c.CONSUMPTION_ID=ct.CONSUMPTION_ID WHERE (@versionId=-1 OR ct.VERSION_ID<=@versionId) AND c.PROGRAM_ID=@programId GROUP BY ct.CONSUMPTION_ID) tc 
	LEFT JOIN rm_consumption cons ON tc.CONSUMPTION_ID=cons.CONSUMPTION_ID
	LEFT JOIN rm_consumption_trans ct ON tc.CONSUMPTION_ID=ct.CONSUMPTION_ID AND tc.MAX_VERSION_ID=ct.VERSION_ID
	LEFT JOIN vw_program p ON cons.PROGRAM_ID=p.PROGRAM_ID
	LEFT JOIN vw_region r ON ct.REGION_ID=r.REGION_ID
        LEFT JOIN vw_realm_country_planning_unit rcpu ON ct.REALM_COUNTRY_PLANNING_UNIT_ID=rcpu.REALM_COUNTRY_PLANNING_UNIT_ID
	LEFT JOIN vw_planning_unit pu ON ct.PLANNING_UNIT_ID=pu.PLANNING_UNIT_ID
	LEFT JOIN vw_forecasting_unit fu ON pu.FORECASTING_UNIT_ID=fu.FORECASTING_UNIT_ID
	LEFT JOIN vw_product_category pc ON fu.PRODUCT_CATEGORY_ID=pc.PRODUCT_CATEGORY_ID
	LEFT JOIN vw_data_source ds ON ct.DATA_SOURCE_ID=ds.DATA_SOURCE_ID
	LEFT JOIN us_user cb ON cons.CREATED_BY=cb.USER_ID
	LEFT JOIN us_user lmb ON ct.LAST_MODIFIED_BY=lmb.USER_ID
    ) ct 
    LEFT JOIN rm_consumption_trans_batch_info ctbi ON ct.CONSUMPTION_TRANS_ID=ctbi.CONSUMPTION_TRANS_ID
    LEFT JOIN rm_batch_info bi ON ctbi.BATCH_ID=bi.BATCH_ID
    LEFT JOIN rm_program_planning_unit ppu ON ppu.PROGRAM_ID=@programId AND ppu.PLANNING_UNIT_ID=ct.PLANNING_UNIT_ID
    WHERE (@planningUmitActive = FALSE OR ppu.ACTIVE)
    ORDER BY ct.PLANNING_UNIT_ID, ct.REGION_ID, ct.CONSUMPTION_DATE, ct.ACTUAL_FLAG, bi.EXPIRY_DATE, bi.BATCH_ID;
END$$

DELIMITER ;
;


USE `fasp`;
DROP procedure IF EXISTS `getInventoryData`;

USE `fasp`;
DROP procedure IF EXISTS `fasp`.`getInventoryData`;
;

DELIMITER $$
USE `fasp`$$
CREATE DEFINER=`faspUser`@`%` PROCEDURE `getInventoryData`(PROGRAM_ID INT(10), VERSION_ID INT (10), PLANNING_UNIT_ACTIVE TINYINT(1))
BEGIN
    SET @programId = PROGRAM_ID;
    SET @versionId = VERSION_ID;
    SET @planningUnitActive = PLANNING_UNIT_ACTIVE;

    IF @versionId = -1 THEN
	SELECT MAX(pv.VERSION_ID) into @versionId FROM rm_program_version pv where pv.PROGRAM_ID=@programId;
    END IF;
    
    SET @oldRCPU = 0;
    SET @oldAdjustment = 0;
    SET @bal = 0;
    
    SELECT a.*, itbi.INVENTORY_TRANS_BATCH_INFO_ID, itbi.BATCH_ID, bi.PLANNING_UNIT_ID `BATCH_PLANNING_UNIT_ID`, bi.BATCH_NO, bi.AUTO_GENERATED, bi.EXPIRY_DATE, itbi.ACTUAL_QTY `BATCH_ACTUAL_QTY`, bi.CREATED_DATE `BATCH_CREATED_DATE`, itbi.ADJUSTMENT_QTY `BATCH_ADJUSTMENT_QTY` 
    FROM (
        SELECT 
            der.*, 
            @oldAdjustment:=IF(@oldRCPU!=der.REALM_COUNTRY_PLANNING_UNIT_ID, 0, @oldAdjustment) `oldAdjustment`,
            @bal:=IF(@oldRCPU!=der.REALM_COUNTRY_PLANNING_UNIT_ID, 0, @bal+@oldAdjustment) `EXPECTED_BAL`, 
            @oldRCPU := der.REALM_COUNTRY_PLANNING_UNIT_ID `oldRCPU`,
            @oldAdjustment:=der.ADJUSTMENT_QTY
        FROM (
            SELECT 
                it.INVENTORY_ID, it.INVENTORY_DATE, it.ACTUAL_QTY, it.ADJUSTMENT_QTY, IF (rcpu.CONVERSION_METHOD IS NULL OR rcpu.CONVERSION_METHOD=1, rcpu.CONVERSION_NUMBER, IF(rcpu.CONVERSION_METHOD=2, 1/rcpu.CONVERSION_NUMBER, 0)) `MULTIPLIER`, pu.MULTIPLIER `CONVERSION_FACTOR`, it.VERSION_ID, it.NOTES, it.INVENTORY_TRANS_ID,
                p.PROGRAM_ID, pl.LABEL_ID `PROGRAM_LABEL_ID`, pl.LABEL_EN `PROGRAM_LABEL_EN`, pl.LABEL_FR `PROGRAM_LABEL_FR`, pl.LABEL_SP `PROGRAM_LABEL_SP`, pl.LABEL_PR `PROGRAM_LABEL_PR`,
                r.REGION_ID, rl.LABEL_ID `REGION_LABEL_ID`, rl.LABEL_EN `REGION_LABEL_EN`, rl.LABEL_FR `REGION_LABEL_FR`, rl.LABEL_SP `REGION_LABEL_SP`, rl.LABEL_PR `REGION_LABEL_PR`,
                rcpu.REALM_COUNTRY_PLANNING_UNIT_ID, rcpul.LABEL_ID `REALM_COUNTRY_PLANNING_UNIT_LABEL_ID`, rcpul.LABEL_EN `REALM_COUNTRY_PLANNING_UNIT_LABEL_EN`, rcpul.LABEL_FR `REALM_COUNTRY_PLANNING_UNIT_LABEL_FR`, rcpul.LABEL_SP `REALM_COUNTRY_PLANNING_UNIT_LABEL_SP`, rcpul.LABEL_PR `REALM_COUNTRY_PLANNING_UNIT_LABEL_PR`,
                pu.PLANNING_UNIT_ID, pul.LABEL_ID `PLANNING_UNIT_LABEL_ID`, pul.LABEL_EN `PLANNING_UNIT_LABEL_EN`, pul.LABEL_FR `PLANNING_UNIT_LABEL_FR`, pul.LABEL_SP `PLANNING_UNIT_LABEL_SP`, pul.LABEL_PR `PLANNING_UNIT_LABEL_PR`,
                fu.FORECASTING_UNIT_ID, ful.LABEL_ID `FORECASTING_UNIT_LABEL_ID`, ful.LABEL_EN `FORECASTING_UNIT_LABEL_EN`, ful.LABEL_FR `FORECASTING_UNIT_LABEL_FR`, ful.LABEL_SP `FORECASTING_UNIT_LABEL_SP`, ful.LABEL_PR `FORECASTING_UNIT_LABEL_PR`,
                pc.PRODUCT_CATEGORY_ID, pcl.LABEL_ID `PRODUCT_CATEGORY_LABEL_ID`, pcl.LABEL_EN `PRODUCT_CATEGORY_LABEL_EN`, pcl.LABEL_FR `PRODUCT_CATEGORY_LABEL_FR`, pcl.LABEL_SP `PRODUCT_CATEGORY_LABEL_SP`, pcl.LABEL_PR `PRODUCT_CATEGORY_LABEL_PR`,
                ds.DATA_SOURCE_ID, dsl.LABEL_ID `DATA_SOURCE_LABEL_ID`, dsl.LABEL_EN `DATA_SOURCE_LABEL_EN`, dsl.LABEL_FR `DATA_SOURCE_LABEL_FR`, dsl.LABEL_SP `DATA_SOURCE_LABEL_SP`, dsl.LABEL_PR `DATA_SOURCE_LABEL_PR`,
                u.UNIT_ID, u.UNIT_CODE, ul.LABEL_ID `UNIT_LABEL_ID`, ul.LABEL_EN `UNIT_LABEL_EN`, ul.LABEL_FR `UNIT_LABEL_FR`, ul.LABEL_SP `UNIT_LABEL_SP`, ul.LABEL_PR `UNIT_LABEL_PR`,
                cb.USER_ID `CB_USER_ID`, cb.USERNAME `CB_USERNAME`, i.CREATED_DATE, lmb.USER_ID `LMB_USER_ID`, lmb.USERNAME `LMB_USERNAME`, it.LAST_MODIFIED_DATE, it.ACTIVE
            FROM (SELECT i.INVENTORY_ID, MAX(it.VERSION_ID) MAX_VERSION_ID FROM rm_inventory i LEFT JOIN rm_inventory_trans it ON i.INVENTORY_ID=it.INVENTORY_ID WHERE i.PROGRAM_ID=@programId AND (it.VERSION_ID<=@versionId OR @versionId=-1) GROUP BY i.INVENTORY_ID) tc 
            LEFT JOIN rm_inventory i ON tc.INVENTORY_ID=i.INVENTORY_ID
            LEFT JOIN rm_inventory_trans it ON tc.INVENTORY_ID=it.INVENTORY_ID AND tc.MAX_VERSION_ID=it.VERSION_ID
            LEFT JOIN rm_program p ON i.PROGRAM_ID=p.PROGRAM_ID
            LEFT JOIN ap_label pl ON p.LABEL_ID=pl.LABEL_ID
            LEFT JOIN rm_region r ON it.REGION_ID=r.REGION_ID
            LEFT JOIN ap_label rl ON r.LABEL_ID=rl.LABEL_ID
            LEFT JOIN rm_realm_country_planning_unit rcpu ON it.REALM_COUNTRY_PLANNING_UNIT_ID=rcpu.REALM_COUNTRY_PLANNING_UNIT_ID
            LEFT JOIN ap_label rcpul ON rcpu.LABEL_ID=rcpul.LABEL_ID
            LEFT JOIN rm_planning_unit pu ON rcpu.PLANNING_UNIT_ID=pu.PLANNING_UNIT_ID
            LEFT JOIN ap_label pul ON pu.LABEL_ID=pul.LABEL_ID
            LEFT JOIN rm_forecasting_unit fu ON pu.FORECASTING_UNIT_ID=fu.FORECASTING_UNIT_ID
            LEFT JOIN ap_label ful ON fu.LABEL_ID=ful.LABEL_ID
            LEFT JOIN rm_product_category pc ON fu.PRODUCT_CATEGORY_ID=pc.PRODUCT_CATEGORY_ID
            LEFT JOIN ap_label pcl ON pc.LABEL_ID=pcl.LABEL_ID
            LEFT JOIN rm_data_source ds ON it.DATA_SOURCE_ID=ds.DATA_SOURCE_ID
            LEFT JOIN ap_label dsl ON ds.LABEL_ID=dsl.LABEL_ID
            LEFT JOIN ap_unit u ON rcpu.UNIT_ID=u.UNIT_ID
            LEFT JOIN ap_label ul ON u.LABEL_ID=ul.LABEL_ID
            LEFT JOIN us_user cb ON i.CREATED_BY=cb.USER_ID
            LEFT JOIN us_user lmb ON it.LAST_MODIFIED_BY=lmb.USER_ID
        ) as der 
        ORDER BY der.PLANNING_UNIT_ID, der.REALM_COUNTRY_PLANNING_UNIT_ID, der.REGION_ID, der.INVENTORY_DATE
    ) a 
    LEFT JOIN rm_inventory_trans_batch_info itbi ON a.INVENTORY_TRANS_ID=itbi.INVENTORY_TRANS_ID
    LEFT JOIN rm_batch_info bi ON itbi.BATCH_ID=bi.BATCH_ID
    LEFT JOIN rm_program_planning_unit ppu ON a.PLANNING_UNIT_ID=ppu.PLANNING_UNIT_ID AND ppu.PROGRAM_ID=@programId
    WHERE (@planningUnitActive = FALSE OR ppu.ACTIVE)
    ORDER BY a.PLANNING_UNIT_ID, a.REALM_COUNTRY_PLANNING_UNIT_ID, a.REGION_ID, a.INVENTORY_DATE, bi.EXPIRY_DATE, bi.BATCH_ID;
END$$

DELIMITER ;
;


USE `fasp`;
DROP procedure IF EXISTS `getShipmentData`;

USE `fasp`;
DROP procedure IF EXISTS `fasp`.`getShipmentData`;
;

DELIMITER $$
USE `fasp`$$
CREATE DEFINER=`faspUser`@`%` PROCEDURE `getShipmentData`(PROGRAM_ID INT(10), VERSION_ID INT (10), SHIPMENT_ACTIVE TINYINT(1), PLANNING_UNIT_ACTIVE TINYINT(1))
BEGIN
    SET @programId = PROGRAM_ID;
    SET @versionId = VERSION_ID;
    SET @shipmentActive = SHIPMENT_ACTIVE;
    SET @planningUnitActive = PLANNING_UNIT_ACTIVE;
    SET @sql1 = "";	
    IF @versionId = -1 THEN
        SELECT MAX(pv.VERSION_ID) INTO @versionId FROM rm_program_version pv WHERE pv.PROGRAM_ID=@programId;
    END IF;
    
    SELECT 
        st.*, stbi.SHIPMENT_TRANS_BATCH_INFO_ID, stbi.BATCH_ID, bi.PLANNING_UNIT_ID `BATCH_PLANNING_UNIT_ID`, bi.BATCH_NO, bi.AUTO_GENERATED, bi.EXPIRY_DATE, bi.CREATED_DATE `BATCH_CREATED_DATE`, stbi.BATCH_SHIPMENT_QTY `BATCH_SHIPMENT_QTY` 
    FROM (
        SELECT
            s.SHIPMENT_ID, s.PARENT_SHIPMENT_ID, st.EXPECTED_DELIVERY_DATE, st.PLANNED_DATE, st.SUBMITTED_DATE, st.APPROVED_DATE, st.SHIPPED_DATE, st.ARRIVED_DATE, st.RECEIVED_DATE, st.SHIPMENT_QTY, st.SHIPMENT_RCPU_QTY, pu.MULTIPLIER `CONVERSION_FACTOR`, st.RATE, st.PRODUCT_COST, st.FREIGHT_COST, st.SHIPMENT_MODE, s.SUGGESTED_QTY, st.ACCOUNT_FLAG, st.ERP_FLAG, st.ORDER_NO, st.PRIME_LINE_NO, st.VERSION_ID, st.NOTES, st.SHIPMENT_TRANS_ID, st.PARENT_LINKED_SHIPMENT_ID,
            p.PROGRAM_ID, p.LABEL_ID `PROGRAM_LABEL_ID`, p.LABEL_EN `PROGRAM_LABEL_EN`, p.LABEL_FR `PROGRAM_LABEL_FR`, p.LABEL_SP `PROGRAM_LABEL_SP`, p.LABEL_PR `PROGRAM_LABEL_PR`,
            pa.PROCUREMENT_AGENT_ID, pa.PROCUREMENT_AGENT_CODE, pa.`COLOR_HTML_CODE`, pa.LABEL_ID `PROCUREMENT_AGENT_LABEL_ID`, pa.LABEL_EN `PROCUREMENT_AGENT_LABEL_EN`, pa.LABEL_FR `PROCUREMENT_AGENT_LABEL_FR`, pa.LABEL_SP `PROCUREMENT_AGENT_LABEL_SP`, pa.LABEL_PR `PROCUREMENT_AGENT_LABEL_PR`,
            pu.PLANNING_UNIT_ID, pu.LABEL_ID `PLANNING_UNIT_LABEL_ID`, pu.LABEL_EN `PLANNING_UNIT_LABEL_EN`, pu.LABEL_FR `PLANNING_UNIT_LABEL_FR`, pu.LABEL_SP `PLANNING_UNIT_LABEL_SP`, pu.LABEL_PR `PLANNING_UNIT_LABEL_PR`,
            fu.FORECASTING_UNIT_ID, fu.LABEL_ID `FORECASTING_UNIT_LABEL_ID`, fu.LABEL_EN `FORECASTING_UNIT_LABEL_EN`, fu.LABEL_FR `FORECASTING_UNIT_LABEL_FR`, fu.LABEL_SP `FORECASTING_UNIT_LABEL_SP`, fu.LABEL_PR `FORECASTING_UNIT_LABEL_PR`,
            pc.PRODUCT_CATEGORY_ID, pc.LABEL_ID `PRODUCT_CATEGORY_LABEL_ID`, pc.LABEL_EN `PRODUCT_CATEGORY_LABEL_EN`, pc.LABEL_FR `PRODUCT_CATEGORY_LABEL_FR`, pc.LABEL_SP `PRODUCT_CATEGORY_LABEL_SP`, pc.LABEL_PR `PRODUCT_CATEGORY_LABEL_PR`,
            pru.PROCUREMENT_UNIT_ID, pru.LABEL_ID `PROCUREMENT_UNIT_LABEL_ID`, pru.LABEL_EN `PROCUREMENT_UNIT_LABEL_EN`, pru.LABEL_FR `PROCUREMENT_UNIT_LABEL_FR`, pru.LABEL_SP `PROCUREMENT_UNIT_LABEL_SP`, pru.LABEL_PR `PROCUREMENT_UNIT_LABEL_PR`,
            rcpu.REALM_COUNTRY_PLANNING_UNIT_ID `RCPU_ID`, rcpu.LABEL_ID `RCPU_LABEL_ID`, rcpu.LABEL_EN `RCPU_LABEL_EN`, rcpu.LABEL_FR `RCPU_LABEL_FR`, rcpu.LABEL_SP `RCPU_LABEL_SP`, rcpu.LABEL_PR `RCPU_LABEL_PR`, IF (rcpu.CONVERSION_METHOD IS NULL OR rcpu.CONVERSION_METHOD=1, rcpu.CONVERSION_NUMBER, IF(rcpu.CONVERSION_METHOD=2, 1/rcpu.CONVERSION_NUMBER, 0)) `RCPU_MULTIPLIER`,
            su.SUPPLIER_ID, su.LABEL_ID `SUPPLIER_LABEL_ID`, su.LABEL_EN `SUPPLIER_LABEL_EN`, su.LABEL_FR `SUPPLIER_LABEL_FR`, su.LABEL_SP `SUPPLIER_LABEL_SP`, su.LABEL_PR `SUPPLIER_LABEL_PR`,
            shs.SHIPMENT_STATUS_ID, shs.LABEL_ID `SHIPMENT_STATUS_LABEL_ID`, shs.LABEL_EN `SHIPMENT_STATUS_LABEL_EN`, shs.LABEL_FR `SHIPMENT_STATUS_LABEL_FR`, shs.LABEL_SP `SHIPMENT_STATUS_LABEL_SP`, shs.LABEL_PR `SHIPMENT_STATUS_LABEL_PR`,
            ds.DATA_SOURCE_ID, ds.LABEL_ID `DATA_SOURCE_LABEL_ID`, ds.LABEL_EN `DATA_SOURCE_LABEL_EN`, ds.LABEL_FR `DATA_SOURCE_LABEL_FR`, ds.LABEL_SP `DATA_SOURCE_LABEL_SP`, ds.LABEL_PR `DATA_SOURCE_LABEL_PR`,
            sc.CURRENCY_ID `SHIPMENT_CURRENCY_ID`, sc.`CURRENCY_CODE` `SHIPMENT_CURRENCY_CODE`, s.CONVERSION_RATE_TO_USD `SHIPMENT_CONVERSION_RATE_TO_USD`, 
            sc.LABEL_ID `SHIPMENT_CURRENCY_LABEL_ID`, sc.LABEL_EN `SHIPMENT_CURRENCY_LABEL_EN`, sc.LABEL_FR `SHIPMENT_CURRENCY_LABEL_FR`, sc.LABEL_SP `SHIPMENT_CURRENCY_LABEL_SP`, sc.LABEL_PR `SHIPMENT_CURRENCY_LABEL_PR`,
            st.EMERGENCY_ORDER, st.LOCAL_PROCUREMENT, 
            cb.USER_ID `CB_USER_ID`, cb.USERNAME `CB_USERNAME`, s.CREATED_DATE, lmb.USER_ID `LMB_USER_ID`, lmb.USERNAME `LMB_USERNAME`, st.LAST_MODIFIED_DATE, st.ACTIVE,
            bc.CURRENCY_ID `BUDGET_CURRENCY_ID`, bc.CURRENCY_CODE `BUDGET_CURRENCY_CODE`, b.CONVERSION_RATE_TO_USD `BUDGET_CURRENCY_CONVERSION_RATE_TO_USD`, bc.LABEL_ID `BUDGET_CURRENCY_LABEL_ID`, bc.LABEL_EN `BUDGET_CURRENCY_LABEL_EN`, bc.LABEL_FR `BUDGET_CURRENCY_LABEL_FR`, bc.LABEL_SP `BUDGET_CURRENCY_LABEL_SP`, bc.LABEL_PR `BUDGET_CURRENCY_LABEL_PR`, 
            b.BUDGET_ID, b.BUDGET_CODE, b.LABEL_ID `BUDGET_LABEL_ID`, b.LABEL_EN `BUDGET_LABEL_EN`, b.LABEL_FR `BUDGET_LABEL_FR`, b.LABEL_SP `BUDGET_LABEL_SP`, b.LABEL_PR `BUDGET_LABEL_PR`,
            fs.FUNDING_SOURCE_ID, fs.FUNDING_SOURCE_CODE, fs.LABEL_ID `FUNDING_SOURCE_LABEL_ID`, fs.LABEL_EN `FUNDING_SOURCE_LABEL_EN`, fs.LABEL_FR `FUNDING_SOURCE_LABEL_FR`, fs.LABEL_SP `FUNDING_SOURCE_LABEL_SP`, fs.LABEL_PR `FUNDING_SOURCE_LABEL_PR`
        FROM (
            SELECT st.SHIPMENT_ID, MAX(st.VERSION_ID) MAX_VERSION_ID FROM rm_shipment s LEFT JOIN rm_shipment_trans st ON s.SHIPMENT_ID=st.SHIPMENT_ID WHERE (@versiONId=-1 OR st.VERSION_ID<=@versiONId) AND s.PROGRAM_ID=@programId GROUP BY st.SHIPMENT_ID
        ) ts 
        LEFT JOIN rm_shipment s ON ts.SHIPMENT_ID=s.SHIPMENT_ID
        LEFT JOIN rm_shipment_trans st ON ts.SHIPMENT_ID=st.SHIPMENT_ID AND ts.MAX_VERSION_ID=st.VERSION_ID
        LEFT JOIN vw_program p ON s.PROGRAM_ID=p.PROGRAM_ID
        LEFT JOIN vw_procurement_agent pa ON st.PROCUREMENT_AGENT_ID=pa.PROCUREMENT_AGENT_ID
        LEFT JOIN vw_planning_unit pu ON st.PLANNING_UNIT_ID=pu.PLANNING_UNIT_ID
        LEFT JOIN vw_realm_country_planning_unit rcpu ON st.REALM_COUNTRY_PLANNING_UNIT_ID=rcpu.REALM_COUNTRY_PLANNING_UNIT_ID
        LEFT JOIN vw_forecasting_unit fu ON pu.FORECASTING_UNIT_ID=fu.FORECASTING_UNIT_ID
        LEFT JOIN vw_product_category pc ON fu.PRODUCT_CATEGORY_ID=pc.PRODUCT_CATEGORY_ID
        LEFT JOIN vw_procurement_unit pru ON st.PROCUREMENT_UNIT_ID=pru.PROCUREMENT_UNIT_ID
        LEFT JOIN vw_supplier su ON st.SUPPLIER_ID=su.SUPPLIER_ID
        LEFT JOIN vw_shipment_status shs ON st.SHIPMENT_STATUS_ID=shs.SHIPMENT_STATUS_ID
        LEFT JOIN vw_data_source ds ON st.DATA_SOURCE_ID=ds.DATA_SOURCE_ID
        LEFT JOIN us_user cb ON s.CREATED_BY=cb.USER_ID
        LEFT JOIN us_user lmb ON st.LAST_MODIFIED_BY=lmb.USER_ID
        LEFT JOIN vw_currency sc ON s.CURRENCY_ID=sc.CURRENCY_ID
        LEFT JOIN vw_budget b ON st.BUDGET_ID=b.BUDGET_ID
        LEFT JOIN vw_currency bc ON b.CURRENCY_ID=bc.CURRENCY_ID
        LEFT JOIN vw_funding_source fs ON st.FUNDING_SOURCE_ID=fs.FUNDING_SOURCE_ID 
        WHERE (@shipmentActive = FALSE OR st.ACTIVE)
    ) st  
    LEFT JOIN rm_shipment_trans_batch_info stbi ON st.SHIPMENT_TRANS_ID = stbi.SHIPMENT_TRANS_ID
    LEFT JOIN rm_program_planning_unit ppu ON st.PLANNING_UNIT_ID=ppu.PLANNING_UNIT_ID AND ppu.PROGRAM_ID=@programId
    LEFT JOIN rm_batch_info bi ON stbi.BATCH_ID=bi.BATCH_ID
    WHERE (@planningUnitActive = FALSE OR ppu.ACTIVE)
    ORDER BY st.PLANNING_UNIT_ID, COALESCE(st.RECEIVED_DATE, st.EXPECTED_DELIVERY_DATE), bi.EXPIRY_DATE, bi.BATCH_ID; 
END$$

DELIMITER ;
;

USE `fasp`;
DROP procedure IF EXISTS `buildNewSupplyPlanBatch`;

USE `fasp`;
DROP procedure IF EXISTS `fasp`.`buildNewSupplyPlanBatch`;
;

DELIMITER $$
USE `fasp`$$
CREATE DEFINER=`faspUser`@`%` PROCEDURE `buildNewSupplyPlanBatch`(VAR_PROGRAM_ID INT(10), VAR_VERSION_ID INT(10))
BEGIN
    SET @programId = VAR_PROGRAM_ID;
    SET @versionId = VAR_VERSION_ID;
    
        SELECT 
        o.PROGRAM_ID, @versionId, o.PLANNING_UNIT_ID, DATE(CONCAT(o.TRANS_DATE,"-01")) `TRANS_DATE`, o.BATCH_ID, o.EXPIRY_DATE, o.SHELF_LIFE,
        SUM(o.FORECASTED_CONSUMPTION) `FORECASTED_CONSUMPTION`, SUM(o.ACTUAL_CONSUMPTION) `ACTUAL_CONSUMPTION`, 
        SUM(o.SHIPMENT) `SHIPMENT`, SUM(o.SHIPMENT_WPS) `SHIPMENT_WPS`, SUM(o.ADJUSTMENT) `ADJUSTMENT`, SUM(o.STOCK) `STOCK` 
        FROM (
            SELECT 
            tc.PROGRAM_ID, tc.CONSUMPTION_ID `TRANS_ID`, tc.PLANNING_UNIT_ID, LEFT(tc.CONSUMPTION_DATE, 7) `TRANS_DATE`, tc.BATCH_ID, tc.EXPIRY_DATE `EXPIRY_DATE`, tc.SHELF_LIFE,
            SUM(FORECASTED_CONSUMPTION) `FORECASTED_CONSUMPTION`, SUM(ACTUAL_CONSUMPTION) `ACTUAL_CONSUMPTION`, 
            null `SHIPMENT`, null `SHIPMENT_WPS`,null `ADJUSTMENT`, null  `STOCK` 
            FROM (
                SELECT 
                    c.PROGRAM_ID, c.CONSUMPTION_ID, ct.REGION_ID, ct.PLANNING_UNIT_ID, ct.CONSUMPTION_DATE, 
                    ctbi.BATCH_ID `BATCH_ID`, bi.EXPIRY_DATE, IFNULL(ppu.SHELF_LIFE,24) `SHELF_LIFE`,
                    SUM(IF(ct.ACTUAL_FLAG=1, COALESCE(ROUND(ctbi.CONSUMPTION_QTY * IF(rcpu.CONVERSION_METHOD IS NULL OR rcpu.CONVERSION_METHOD=1, rcpu.CONVERSION_NUMBER, IF(rcpu.CONVERSION_METHOD=2,1/rcpu.CONVERSION_NUMBER,0))), ct.CONSUMPTION_QTY), null)) `ACTUAL_CONSUMPTION`, 
                    SUM(IF(ct.ACTUAL_FLAG=0, COALESCE(ROUND(ctbi.CONSUMPTION_QTY * IF(rcpu.CONVERSION_METHOD IS NULL OR rcpu.CONVERSION_METHOD=1, rcpu.CONVERSION_NUMBER, IF(rcpu.CONVERSION_METHOD=2,1/rcpu.CONVERSION_NUMBER,0))), ct.CONSUMPTION_QTY), null)) `FORECASTED_CONSUMPTION`
                FROM (
                    SELECT c.CONSUMPTION_ID, MAX(ct.VERSION_ID) MAX_VERSION_ID FROM rm_consumption c LEFT JOIN rm_consumption_trans ct ON c.CONSUMPTION_ID=ct.CONSUMPTION_ID WHERE c.PROGRAM_ID=@programId AND ct.VERSION_ID<=@versionId AND ct.CONSUMPTION_TRANS_ID IS NOT NULL GROUP BY c.CONSUMPTION_ID
                ) tc
                LEFT JOIN rm_consumption c ON c.CONSUMPTION_ID=tc.CONSUMPTION_ID
                LEFT JOIN rm_consumption_trans ct ON c.CONSUMPTION_ID=ct.CONSUMPTION_ID AND tc.MAX_VERSION_ID=ct.VERSION_ID
                LEFT JOIN rm_consumption_trans_batch_info ctbi ON ct.CONSUMPTION_TRANS_ID=ctbi.CONSUMPTION_TRANS_ID
                LEFT JOIN rm_batch_info bi ON ctbi.BATCH_ID=bi.BATCH_ID
                LEFT JOIN rm_realm_country_planning_unit rcpu ON ct.REALM_COUNTRY_PLANNING_UNIT_ID=rcpu.REALM_COUNTRY_PLANNING_UNIT_ID
                LEFT JOIN rm_program_planning_unit ppu ON c.PROGRAM_ID=ppu.PROGRAM_ID AND ct.PLANNING_UNIT_ID=ppu.PLANNING_UNIT_ID
                WHERE ct.ACTIVE AND ctbi.BATCH_ID IS NOT NULL AND ppu.PLANNING_UNIT_ID IS NOT NULL 
                GROUP BY c.PROGRAM_ID, ct.REGION_ID, ct.PLANNING_UNIT_ID, ct.CONSUMPTION_DATE, ctbi.BATCH_ID
            ) tc 
            GROUP BY tc.PROGRAM_ID, tc.PLANNING_UNIT_ID, tc.CONSUMPTION_DATE, tc.BATCH_ID

            UNION

            SELECT 
                s.PROGRAM_ID, s.SHIPMENT_ID `TRANS_ID`, st.PLANNING_UNIT_ID, LEFT(COALESCE(st.RECEIVED_DATE, st.EXPECTED_DELIVERY_DATE),7) `TRANS_DATE`, stbi.BATCH_ID, bi.EXPIRY_DATE, IFNULL(ppu.SHELF_LIFE,24) `SHELF_LIFE`,
                null `FORECASTED_CONSUMPTION`, null `ACTUAL_CONSUMPTION`, 
                SUM(IF(st.SHIPMENT_STATUS_ID IN (1,3,4,5,6,7,9), COALESCE(ROUND(stbi.BATCH_SHIPMENT_QTY * IF(rcpu.CONVERSION_METHOD IS NULL OR rcpu.CONVERSION_METHOD=1, rcpu.CONVERSION_NUMBER, IF(rcpu.CONVERSION_METHOD=2,1/rcpu.CONVERSION_NUMBER,0))) ,st.SHIPMENT_QTY),0)) `SHIPMENT`, 
                SUM(IF(st.SHIPMENT_STATUS_ID IN (3,4,5,6,7,9), COALESCE(ROUND(stbi.BATCH_SHIPMENT_QTY * IF(rcpu.CONVERSION_METHOD IS NULL OR rcpu.CONVERSION_METHOD=1, rcpu.CONVERSION_NUMBER, IF(rcpu.CONVERSION_METHOD=2,1/rcpu.CONVERSION_NUMBER,0))) ,st.SHIPMENT_QTY), 0)) `SHIPMENT_WPS`, 
                null  `ADJUSTMENT_MULTIPLIED_QTY`, null  `STOCK_MULTIPLIED_QTY`
            FROM (
                SELECT s.PROGRAM_ID, s.SHIPMENT_ID, MAX(st.VERSION_ID) MAX_VERSION_ID FROM rm_shipment s LEFT JOIN rm_shipment_trans st ON s.SHIPMENT_ID=st.SHIPMENT_ID WHERE s.PROGRAM_ID=@programId AND st.VERSION_ID<=@versionId AND st.SHIPMENT_TRANS_ID IS NOT NULL GROUP BY s.SHIPMENT_ID
            ) ts
            LEFT JOIN rm_shipment s ON s.SHIPMENT_ID=ts.SHIPMENT_ID
            LEFT JOIN rm_shipment_trans st ON s.SHIPMENT_ID=st.SHIPMENT_ID AND ts.MAX_VERSION_ID=st.VERSION_ID
            LEFT JOIN rm_shipment_trans_batch_info stbi ON st.SHIPMENT_TRANS_ID=stbi.SHIPMENT_TRANS_ID
            LEFT JOIN rm_batch_info bi ON stbi.BATCH_ID=bi.BATCH_ID
            LEFT JOIN rm_realm_country_planning_unit rcpu ON st.REALM_COUNTRY_PLANNING_UNIT_ID=rcpu.REALM_COUNTRY_PLANNING_UNIT_ID
            LEFT JOIN rm_program_planning_unit ppu ON s.PROGRAM_ID=ppu.PROGRAM_ID AND st.PLANNING_UNIT_ID=ppu.PLANNING_UNIT_ID
            WHERE st.ACTIVE AND st.ACCOUNT_FLAG AND st.SHIPMENT_STATUS_ID!=8 AND stbi.BATCH_ID IS NOT NULL  AND ppu.PLANNING_UNIT_ID IS NOT NULL 
            GROUP BY s.PROGRAM_ID, st.PLANNING_UNIT_ID, COALESCE(st.RECEIVED_DATE, st.EXPECTED_DELIVERY_DATE), stbi.BATCH_ID

            UNION

            SELECT 
                i.PROGRAM_ID, i.INVENTORY_ID `TRANS_ID`, rcpu.PLANNING_UNIT_ID, LEFT(it.INVENTORY_DATE,7) `TRANS_DATE`, itbi.BATCH_ID, bi.EXPIRY_DATE, IFNULL(ppu.SHELF_LIFE,24) `SHELF_LIFE`,
                null `FORECASTED_CONSUMPTION`, null `ACTUAL_CONSUMPTION`, 
                null `SHIPMENT`, null `SHIPMENT_WPS`, SUM(COALESCE(itbi.ADJUSTMENT_QTY, it.ADJUSTMENT_QTY)*IF(rcpu.CONVERSION_METHOD IS NULL OR rcpu.CONVERSION_METHOD=1, rcpu.CONVERSION_NUMBER, IF(rcpu.CONVERSION_METHOD=2,1/rcpu.CONVERSION_NUMBER,0))) `ADJUSTMENT`,  SUM(COALESCE(itbi.ACTUAL_QTY, it.ACTUAL_QTY)*IF(rcpu.CONVERSION_METHOD IS NULL OR rcpu.CONVERSION_METHOD=1, rcpu.CONVERSION_NUMBER, IF(rcpu.CONVERSION_METHOD=2,1/rcpu.CONVERSION_NUMBER,0))) `STOCK`
            FROM (
                SELECT i.PROGRAM_ID, i.INVENTORY_ID, MAX(it.VERSION_ID) MAX_VERSION_ID FROM rm_inventory i LEFT JOIN rm_inventory_trans it ON i.INVENTORY_ID=it.INVENTORY_ID WHERE i.PROGRAM_ID=@programId AND it.VERSION_ID<=@versionId AND it.INVENTORY_TRANS_ID IS NOT NULL GROUP BY i.INVENTORY_ID
            ) ti
            LEFT JOIN rm_inventory i ON i.INVENTORY_ID=ti.INVENTORY_ID
            LEFT JOIN rm_inventory_trans it ON i.INVENTORY_ID=it.INVENTORY_ID AND ti.MAX_VERSION_ID=it.VERSION_ID
            LEFT JOIN rm_inventory_trans_batch_info itbi ON it.INVENTORY_TRANS_ID=itbi.INVENTORY_TRANS_ID
            LEFT JOIN rm_batch_info bi ON itbi.BATCH_ID=bi.BATCH_ID
            LEFT JOIN rm_realm_country_planning_unit rcpu ON it.REALM_COUNTRY_PLANNING_UNIT_ID=rcpu.REALM_COUNTRY_PLANNING_UNIT_ID
            LEFT JOIN rm_program_planning_unit ppu ON i.PROGRAM_ID=ppu.PROGRAM_ID AND rcpu.PLANNING_UNIT_ID=ppu.PLANNING_UNIT_ID
            WHERE it.ACTIVE AND itbi.BATCH_ID IS NOT NULL AND ppu.PLANNING_UNIT_ID IS NOT NULL 
            GROUP BY i.PROGRAM_ID, rcpu.PLANNING_UNIT_ID, it.INVENTORY_DATE, itbi.BATCH_ID
        ) AS o GROUP BY o.PROGRAM_ID, o.PLANNING_UNIT_ID, o.TRANS_DATE, o.BATCH_ID ORDER BY o.PROGRAM_ID, o.PLANNING_UNIT_ID, o.TRANS_DATE, IFNULL(o.EXPIRY_DATE,'2999-12-31');

END$$

DELIMITER ;
;

USE `fasp`;
DROP procedure IF EXISTS `buildNewSupplyPlanRegion`;

USE `fasp`;
DROP procedure IF EXISTS `fasp`.`buildNewSupplyPlanRegion`;
;

DELIMITER $$
USE `fasp`$$
CREATE DEFINER=`faspUser`@`%` PROCEDURE `buildNewSupplyPlanRegion`(VAR_PROGRAM_ID INT(10), VAR_VERSION_ID INT(10))
BEGIN
    SET @programId = VAR_PROGRAM_ID;
    SET @versionId = VAR_VERSION_ID;
    
    SELECT COUNT(*) INTO @currentCount FROM rm_supply_plan_amc spa WHERE spa.PROGRAM_ID=@programId AND spa.VERSION_ID=@versionId;
    -- Get the Region count for this Program
    SELECT count(*) INTO @regionCount FROM rm_program_region pr WHERE pr.PROGRAM_ID=@programId;
        
    DELETE tn.* FROM tmp_nsp tn WHERE tn.PROGRAM_ID=@programId AND tn.VERSION_ID=@versionId;
        
    -- DELETE nsps.* FROM rm_nsp_summary nsps WHERE nsps.PROGRAM_ID=@programId AND nsps.VERSION_ID=@versionId;
    -- DELETE nspr.* FROM rm_nsp_region nspr WHERE nspr.PROGRAM_ID=@programId AND nspr.VERSION_ID=@versionId;
    
    -- Populate the nsp_region table with all the raw data that we have for Consumption, Inventory and Shipment per Region
    INSERT INTO tmp_nsp (
        PROGRAM_ID, VERSION_ID, PLANNING_UNIT_ID, TRANS_DATE, REGION_ID, 
        FORECASTED_CONSUMPTION, ACTUAL_CONSUMPTION, ADJUSTED_CONSUMPTION, ADJUSTMENT, STOCK, REGION_COUNT, 
        MANUAL_PLANNED_SHIPMENT, MANUAL_SUBMITTED_SHIPMENT, MANUAL_APPROVED_SHIPMENT, MANUAL_SHIPPED_SHIPMENT, MANUAL_RECEIVED_SHIPMENT, MANUAL_ONHOLD_SHIPMENT, 
        ERP_PLANNED_SHIPMENT, ERP_SUBMITTED_SHIPMENT, ERP_APPROVED_SHIPMENT, ERP_SHIPPED_SHIPMENT, ERP_RECEIVED_SHIPMENT, ERP_ONHOLD_SHIPMENT 
    )
    SELECT 
        @programId `PROGRAM_ID`, @versionId, m.`PLANNING_UNIT_ID`, m.`TRANS_DATE`, o.`REGION_ID`, 
        SUM(o.`FORECASTED_CONSUMPTION`), SUM(o.`ACTUAL_CONSUMPTION`), SUM(o.`ADJUSTED_CONSUMPTION`), SUM(o.`ADJUSTMENT`), SUM(o.`STOCK`), @regionCount, 
        SUM(o.`MANUAL_PLANNED_SHIPMENT`), SUM(o.`MANUAL_SUBMITTED_SHIPMENT`), SUM(o.`MANUAL_APPROVED_SHIPMENT`), SUM(o.`MANUAL_SHIPPED_SHIPMENT`), SUM(o.`MANUAL_RECEIVED_SHIPMENT`), SUM(o.`MANUAL_ONHOLD_SHIPMENT`), 
        SUM(o.`ERP_PLANNED_SHIPMENT`), SUM(o.`ERP_SUBMITTED_SHIPMENT`), SUM(o.`ERP_APPROVED_SHIPMENT`), SUM(o.`ERP_SHIPPED_SHIPMENT`), SUM(o.`ERP_RECEIVED_SHIPMENT`), SUM(o.`ERP_ONHOLD_SHIPMENT`)
    FROM 
        (
        SELECT a3.PLANNING_UNIT_ID, mn.MONTH `TRANS_DATE` 
        FROM 
            (
            SELECT a2.PLANNING_UNIT_ID, MIN(a2.TRANS_DATE) `MIN_TRANS_DATE`, MAX(a2.TRANS_DATE) `MAX_TRANS_DATE` 
            FROM 
                (
                SELECT tc.`PLANNING_UNIT_ID`, `TRANS_DATE`
                FROM 
                    (
                    SELECT 
                        ct.PLANNING_UNIT_ID, LEFT(ct.`CONSUMPTION_DATE`,7) `TRANS_DATE`
                    FROM 
                        (
                        SELECT c.`CONSUMPTION_ID`, MAX(ct.`VERSION_ID`) `MAX_VERSION_ID` FROM rm_consumption c LEFT JOIN rm_consumption_trans ct ON c.`CONSUMPTION_ID`=ct.`CONSUMPTION_ID` WHERE c.`PROGRAM_ID`=@programId AND ct.`VERSION_ID`<=@versionId AND ct.`CONSUMPTION_TRANS_ID` IS NOT NULL GROUP BY c.`CONSUMPTION_ID`
                    ) tc
                    LEFT JOIN rm_consumption c ON c.`CONSUMPTION_ID`=tc.`CONSUMPTION_ID`
                    LEFT JOIN rm_consumption_trans ct ON c.`CONSUMPTION_ID`=ct.`CONSUMPTION_ID` AND tc.`MAX_VERSION_ID`=ct.`VERSION_ID`
                    WHERE ct.`ACTIVE`
                    GROUP BY c.`PROGRAM_ID`, ct.`PLANNING_UNIT_ID`, ct.`CONSUMPTION_DATE`, ct.`REGION_ID`
                ) tc 
                GROUP BY tc.`PLANNING_UNIT_ID`, tc.`TRANS_DATE`

                UNION

                SELECT 
                    st.PLANNING_UNIT_ID, LEFT(COALESCE(st.`RECEIVED_DATE`, st.`EXPECTED_DELIVERY_DATE`),7) `TRANS_DATE`
                    FROM 
                        (
                        SELECT s.PROGRAM_ID, s.SHIPMENT_ID, MAX(st.VERSION_ID) MAX_VERSION_ID FROM rm_shipment s LEFT JOIN rm_shipment_trans st ON s.SHIPMENT_ID=st.SHIPMENT_ID WHERE s.PROGRAM_ID=@programId AND st.VERSION_ID<=@versionId AND st.SHIPMENT_TRANS_ID IS NOT NULL GROUP BY s.SHIPMENT_ID
                    ) ts
                    LEFT JOIN rm_shipment s ON s.SHIPMENT_ID=ts.SHIPMENT_ID
                    LEFT JOIN rm_shipment_trans st ON s.SHIPMENT_ID=st.SHIPMENT_ID AND ts.MAX_VERSION_ID=st.VERSION_ID
                    WHERE st.ACTIVE AND st.ACCOUNT_FLAG AND st.SHIPMENT_STATUS_ID!=8 
                    GROUP BY st.PLANNING_UNIT_ID, COALESCE(st.RECEIVED_DATE, st.EXPECTED_DELIVERY_DATE)

                UNION

                SELECT 
                    rcpu.PLANNING_UNIT_ID, LEFT(it.INVENTORY_DATE,7) `TRANS_DATE`
                FROM 
                    (
                    SELECT i.PROGRAM_ID, i.INVENTORY_ID, MAX(it.VERSION_ID) MAX_VERSION_ID FROM rm_inventory i LEFT JOIN rm_inventory_trans it ON i.INVENTORY_ID=it.INVENTORY_ID WHERE i.PROGRAM_ID=@programId AND it.VERSION_ID<=@versionId AND it.INVENTORY_TRANS_ID IS NOT NULL GROUP BY i.INVENTORY_ID
                ) ti
                LEFT JOIN rm_inventory i ON i.INVENTORY_ID=ti.INVENTORY_ID
                LEFT JOIN rm_inventory_trans it ON i.INVENTORY_ID=it.INVENTORY_ID AND ti.MAX_VERSION_ID=it.VERSION_ID
                LEFT JOIN rm_realm_country_planning_unit rcpu ON it.REALM_COUNTRY_PLANNING_UNIT_ID=rcpu.REALM_COUNTRY_PLANNING_UNIT_ID
                WHERE it.ACTIVE
                GROUP BY rcpu.PLANNING_UNIT_ID, it.INVENTORY_DATE
            ) as a2 GROUP BY a2.PLANNING_UNIT_ID
        ) as a3 
        LEFT JOIN rm_program_planning_unit ppu ON ppu.PROGRAM_ID=@programId AND ppu.PLANNING_UNIT_ID=a3.PLANNING_UNIT_ID
        LEFT JOIN mn ON LEFT(mn.MONTH,7) BETWEEN LEFT(DATE_SUB(CONCAT(a3.MIN_TRANS_DATE,'-01'), INTERVAL ppu.MONTHS_IN_FUTURE_FOR_AMC+1 MONTH),7) AND LEFT(IF(DATE_ADD(CONCAT(a3.MAX_TRANS_DATE,'-01'), INTERVAL ppu.MONTHS_IN_PAST_FOR_AMC MONTH)<(DATE_ADD(DATE(now()),INTERVAL 60 MONTH)),(DATE_ADD(DATE(now()),INTERVAL 60 MONTH)),IF(DATE_ADD(DATE(now()),INTERVAL 120 MONTH) < DATE_ADD(CONCAT(a3.MAX_TRANS_DATE,'-01'), INTERVAL ppu.MONTHS_IN_PAST_FOR_AMC MONTH),(DATE_ADD(DATE(now()),INTERVAL 120 MONTH)),DATE_ADD(CONCAT(a3.MAX_TRANS_DATE,'-01'), INTERVAL ppu.MONTHS_IN_PAST_FOR_AMC MONTH))),7)
        WHERE ppu.PLANNING_UNIT_ID IS NOT NULL
    ) AS m 
    LEFT JOIN 
        (
        SELECT 
            tc.`PROGRAM_ID`, tc.`PLANNING_UNIT_ID`, LEFT(tc.`CONSUMPTION_DATE`, 7) `TRANS_DATE`, tc.`REGION_ID`, 
            SUM(tc.`FORECASTED_CONSUMPTION`) `FORECASTED_CONSUMPTION`, SUM(tc.`ACTUAL_CONSUMPTION`) `ACTUAL_CONSUMPTION`, SUM(tc.`ADJUSTED_CONSUMPTION`) `ADJUSTED_CONSUMPTION`, null `ADJUSTMENT`, null `STOCK`, 
            null `MANUAL_PLANNED_SHIPMENT`, null `MANUAL_SUBMITTED_SHIPMENT`, null `MANUAL_APPROVED_SHIPMENT`, null `MANUAL_SHIPPED_SHIPMENT`, null `MANUAL_RECEIVED_SHIPMENT`, null `MANUAL_ONHOLD_SHIPMENT`, 
            null `ERP_PLANNED_SHIPMENT`, null `ERP_SUBMITTED_SHIPMENT`, null `ERP_APPROVED_SHIPMENT`, null `ERP_SHIPPED_SHIPMENT`, null `ERP_RECEIVED_SHIPMENT`, null `ERP_ONHOLD_SHIPMENT`
        FROM 
            (
            SELECT 
                c.`PROGRAM_ID`, ct.`PLANNING_UNIT_ID`, ct.`CONSUMPTION_DATE`, ct.`REGION_ID`, 
                ct.`ACTIVE`, 
                SUM(IF(ct.`ACTUAL_FLAG`=0, ct.`CONSUMPTION_QTY`, null)) `FORECASTED_CONSUMPTION`,
                SUM(IF(ct.`ACTUAL_FLAG`=1, ct.`CONSUMPTION_QTY`, null)) `ACTUAL_CONSUMPTION`,
                SUM(ROUND(IF(DAY(LAST_DAY(ct.`CONSUMPTION_DATE`)) - IFNULL(ct.DAYS_OF_STOCK_OUT, 0) <= 0, IF(ct.`ACTUAL_FLAG` = 1, ct.`CONSUMPTION_QTY`, NULL), IF(ct.`ACTUAL_FLAG` = 1, ct.`CONSUMPTION_QTY` * DAY(LAST_DAY(ct.`CONSUMPTION_DATE`)) / (DAY(LAST_DAY(ct.`CONSUMPTION_DATE`)) - IFNULL(ct.DAYS_OF_STOCK_OUT, 0)), NULL)))) `ADJUSTED_CONSUMPTION`
                
            FROM 
                (
                SELECT c.`CONSUMPTION_ID`, MAX(ct.`VERSION_ID`) `MAX_VERSION_ID` FROM rm_consumption c LEFT JOIN rm_consumption_trans ct ON c.`CONSUMPTION_ID`=ct.`CONSUMPTION_ID` WHERE c.`PROGRAM_ID`=@programId AND ct.`VERSION_ID`<=@versionId AND ct.`CONSUMPTION_TRANS_ID` IS NOT NULL GROUP BY c.`CONSUMPTION_ID`
            ) tc
            LEFT JOIN rm_consumption c ON c.`CONSUMPTION_ID`=tc.`CONSUMPTION_ID`
            LEFT JOIN rm_consumption_trans ct ON c.`CONSUMPTION_ID`=ct.`CONSUMPTION_ID` AND tc.`MAX_VERSION_ID`=ct.`VERSION_ID`
            WHERE ct.`ACTIVE`
            GROUP BY c.`PROGRAM_ID`, ct.`PLANNING_UNIT_ID`, ct.`CONSUMPTION_DATE`, ct.`REGION_ID`
        ) tc 
        GROUP BY tc.`PROGRAM_ID`, tc.`PLANNING_UNIT_ID`, tc.`CONSUMPTION_DATE`, tc.`REGION_ID`

        UNION

        SELECT 
            s.`PROGRAM_ID`, st.`PLANNING_UNIT_ID`, LEFT(COALESCE(st.`RECEIVED_DATE`, st.`EXPECTED_DELIVERY_DATE`),7) `TRANS_DATE`, null `REGION_ID`,
            null `FORECASTED_CONSUMPTION`, null `ACTUAL_CONSUMPTION`, null `ADJUSTED_CONSUMPTION`, null `ADJUSTMENT`, null `STOCK`,
            SUM(IF((st.ERP_FLAG IS NULL OR st.ERP_FLAG=0) AND st.`SHIPMENT_STATUS_ID`=1, st.`SHIPMENT_QTY`, null )) `MANUAL_PLANNED_SHIPMENT`, 
            SUM(IF((st.ERP_FLAG IS NULL OR st.ERP_FLAG=0) AND st.`SHIPMENT_STATUS_ID`=3, st.`SHIPMENT_QTY`, null )) `MANUAL_SUBMITTED_SHIPMENT`, 
            SUM(IF((st.ERP_FLAG IS NULL OR st.ERP_FLAG=0) AND st.`SHIPMENT_STATUS_ID`=4, st.`SHIPMENT_QTY`, null )) `MANUAL_APPROVED_SHIPMENT`, 
            SUM(IF((st.ERP_FLAG IS NULL OR st.ERP_FLAG=0) AND st.`SHIPMENT_STATUS_ID` IN (5,6), st.`SHIPMENT_QTY`, null )) `MANUAL_SHIPPED_SHIPMENT`, 
            SUM(IF((st.ERP_FLAG IS NULL OR st.ERP_FLAG=0) AND st.`SHIPMENT_STATUS_ID`=7, st.`SHIPMENT_QTY`, null )) `MANUAL_RECEIVED_SHIPMENT`, 
            SUM(IF((st.ERP_FLAG IS NULL OR st.ERP_FLAG=0) AND st.`SHIPMENT_STATUS_ID`=9, st.`SHIPMENT_QTY`, null )) `MANUAL_ONHOLD_SHIPMENT`, 
            SUM(IF(st.`ERP_FLAG`=1 AND st.`SHIPMENT_STATUS_ID`=1, st.`SHIPMENT_QTY`, null )) `ERP_PLANNED_SHIPMENT`, 
            SUM(IF(st.`ERP_FLAG`=1 AND st.`SHIPMENT_STATUS_ID`=3, st.`SHIPMENT_QTY`, null )) `ERP_SUBMITTED_SHIPMENT`, 
            SUM(IF(st.`ERP_FLAG`=1 AND st.`SHIPMENT_STATUS_ID`=4, st.`SHIPMENT_QTY`, null )) `ERP_APPROVED_SHIPMENT`, 
            SUM(IF(st.`ERP_FLAG`=1 AND st.`SHIPMENT_STATUS_ID` IN (5,6), st.`SHIPMENT_QTY`, null )) `ERP_SHIPPED_SHIPMENT`, 
            SUM(IF(st.`ERP_FLAG`=1 AND st.`SHIPMENT_STATUS_ID` = 7, st.`SHIPMENT_QTY`, null )) `ERP_RECEIVED_SHIPMENT`, 
            SUM(IF(st.`ERP_FLAG`=1 AND st.`SHIPMENT_STATUS_ID`=9, st.`SHIPMENT_QTY`, null )) `ERP_ONHOLD_SHIPMENT`
        FROM 
            (
            SELECT s.PROGRAM_ID, s.SHIPMENT_ID, MAX(st.VERSION_ID) MAX_VERSION_ID FROM rm_shipment s LEFT JOIN rm_shipment_trans st ON s.SHIPMENT_ID=st.SHIPMENT_ID WHERE s.PROGRAM_ID=@programId AND st.VERSION_ID<=@versionId AND st.SHIPMENT_TRANS_ID IS NOT NULL GROUP BY s.SHIPMENT_ID
        ) ts
        LEFT JOIN rm_shipment s ON s.SHIPMENT_ID=ts.SHIPMENT_ID
        LEFT JOIN rm_shipment_trans st ON s.SHIPMENT_ID=st.SHIPMENT_ID AND ts.MAX_VERSION_ID=st.VERSION_ID
        WHERE st.ACTIVE AND st.ACCOUNT_FLAG AND st.SHIPMENT_STATUS_ID!=8 
        GROUP BY s.PROGRAM_ID, st.PLANNING_UNIT_ID, LEFT(COALESCE(st.RECEIVED_DATE, st.EXPECTED_DELIVERY_DATE),7)

        UNION

        SELECT 
            i.PROGRAM_ID, rcpu.PLANNING_UNIT_ID, LEFT(it.INVENTORY_DATE,7) `TRANS_DATE`, it.REGION_ID,
            null `FORECASTED_CONSUMPTION`, null `ACTUAL_CONSUMPTION`, null `ADJUSTED_CONSUMPTION`, SUM(it.ADJUSTMENT_QTY*IF(rcpu.CONVERSION_METHOD IS NULL OR rcpu.CONVERSION_METHOD=1, rcpu.CONVERSION_NUMBER, IF(rcpu.CONVERSION_METHOD=2,1/rcpu.CONVERSION_NUMBER,0))) `ADJUSTMENT`,  SUM(it.ACTUAL_QTY*IF(rcpu.CONVERSION_METHOD IS NULL OR rcpu.CONVERSION_METHOD=1, rcpu.CONVERSION_NUMBER, IF(rcpu.CONVERSION_METHOD=2,1/rcpu.CONVERSION_NUMBER,0))) `STOCK`,
            null `MANUAL_PLANNED_SHIPMENT`, null `MANUAL_SUBMITTED_SHIPMENT`, null `MANUAL_APPROVED_SHIPMENT`, null `MANUAL_SHIPPED_SHIPMENT`, null `MANUAL_RECEIVED_SHIPMENT`, null `MANUAL_ONHOLD_SHIPMENT`, 
            null `ERP_PLANNED_SHIPMENT`, null `ERP_SUBMITTED_SHIPMENT`, null `ERP_APPROVED_SHIPMENT`, null `ERP_SHIPPED_SHIPMENT`, null `ERP_RECEIVED_SHIPMENT`, null `ERP_ONHOLD_SHIPMENT`
        FROM 
            (
            SELECT i.PROGRAM_ID, i.INVENTORY_ID, MAX(it.VERSION_ID) MAX_VERSION_ID FROM rm_inventory i LEFT JOIN rm_inventory_trans it ON i.INVENTORY_ID=it.INVENTORY_ID WHERE i.PROGRAM_ID=@programId AND it.VERSION_ID<=@versionId AND it.INVENTORY_TRANS_ID IS NOT NULL GROUP BY i.INVENTORY_ID
        ) ti
        LEFT JOIN rm_inventory i ON i.INVENTORY_ID=ti.INVENTORY_ID
        LEFT JOIN rm_inventory_trans it ON i.INVENTORY_ID=it.INVENTORY_ID AND ti.MAX_VERSION_ID=it.VERSION_ID
        LEFT JOIN rm_realm_country_planning_unit rcpu ON it.REALM_COUNTRY_PLANNING_UNIT_ID=rcpu.REALM_COUNTRY_PLANNING_UNIT_ID
        WHERE it.ACTIVE
        GROUP BY i.PROGRAM_ID, rcpu.PLANNING_UNIT_ID, it.INVENTORY_DATE, it.REGION_ID
    ) AS o ON m.PLANNING_UNIT_ID=o.PLANNING_UNIT_ID AND LEFT(m.TRANS_DATE,7)=o.TRANS_DATE GROUP BY m.PLANNING_UNIT_ID, LEFT(m.TRANS_DATE,7), o.REGION_ID;
           
    -- Update the UseActualConsumption field = 1 
    -- IF All Regions have reported Consumption or if Sum(ActualConsumption)>Sum(ForecastedConsumption)
    -- ELSE UseActualConsumption field = 0
    UPDATE tmp_nsp tn LEFT JOIN (SELECT tn.PLANNING_UNIT_ID, tn.TRANS_DATE, SUM(IF(tn.ACTUAL_CONSUMPTION IS NOT NULL, 1,0)) `COUNT_OF_ACTUAL_CONSUMPTION`, SUM(tn.ACTUAL_CONSUMPTION) `TOTAL_ACTUAL_CONSUMPTION`, SUM(tn.FORECASTED_CONSUMPTION) `TOTAL_FORECASTED_CONSUMPTION` FROM tmp_nsp tn WHERE tn.PROGRAM_ID=@programId AND tn.VERSION_ID=@versionId AND tn.REGION_ID IS NOT NULL GROUP BY tn.PLANNING_UNIT_ID, tn.TRANS_DATE) rcount ON tn.PLANNING_UNIT_ID=rcount.PLANNING_UNIT_ID AND tn.TRANS_DATE=rcount.TRANS_DATE SET tn.USE_ACTUAL_CONSUMPTION=IF(rcount.COUNT_OF_ACTUAL_CONSUMPTION=@regionCount, 1, IF(rcount.TOTAL_ACTUAL_CONSUMPTION>rcount.TOTAL_FORECASTED_CONSUMPTION, 1, 0)) WHERE tn.PROGRAM_ID=@programId AND tn.VERSION_ID=@versionId AND tn.REGION_ID IS NOT NULL;
        
    -- Update the RegionStockCount field based on the number of Regions that have reported Stock
    UPDATE tmp_nsp tn LEFT JOIN (SELECT tn.PLANNING_UNIT_ID, tn.TRANS_DATE, COUNT(tn.STOCK) CNT FROM tmp_nsp tn WHERE tn.PROGRAM_ID=@programId AND tn.VERSION_ID=@versionId AND tn.REGION_ID IS NOT NULL GROUP BY tn.PLANNING_UNIT_ID, tn.TRANS_DATE, tn.REGION_ID) rcount ON tn.PLANNING_UNIT_ID=rcount.PLANNING_UNIT_ID AND tn.TRANS_DATE=rcount.TRANS_DATE SET tn.REGION_STOCK_COUNT = rcount.CNT WHERE tn.PROGRAM_ID=@programId AND tn.VERSION_ID=@versionId AND tn.REGION_ID IS NOT NULL;
        
    -- To get the range for AMC calculations
    -- SELECT MIN(sp.TRANS_DATE), ADDDATE(MAX(sp.TRANS_DATE), INTERVAL ppu.MONTHS_IN_PAST_FOR_AMC MONTH) INTO @startMonth, @stopMonth  FROM rm_supply_plan sp LEFT JOIN rm_program_planning_unit ppu ON sp.PROGRAM_ID=ppu.PROGRAM_ID AND sp.PLANNING_UNIT_ID=ppu.PLANNING_UNIT_ID WHERE sp.PROGRAM_ID=@programId and sp.VERSION_ID=@versionId;
    
    SELECT 
        tn.PLANNING_UNIT_ID, tn.TRANS_DATE, IFNULL(ppu.SHELF_LIFE, 24) SHELF_LIFE, tn.REGION_ID, tn.FORECASTED_CONSUMPTION, tn.ACTUAL_CONSUMPTION, tn.ADJUSTED_CONSUMPTION,
        tn.USE_ACTUAL_CONSUMPTION, tn.ADJUSTMENT, tn.STOCK, tn.REGION_STOCK_COUNT, tn.REGION_COUNT,
        tn.MANUAL_PLANNED_SHIPMENT, tn.MANUAL_SUBMITTED_SHIPMENT, tn.MANUAL_APPROVED_SHIPMENT, tn.MANUAL_SHIPPED_SHIPMENT, tn.MANUAL_RECEIVED_SHIPMENT, tn.MANUAL_ONHOLD_SHIPMENT, 
        tn.ERP_PLANNED_SHIPMENT, tn.ERP_SUBMITTED_SHIPMENT, tn.ERP_APPROVED_SHIPMENT, tn.ERP_SHIPPED_SHIPMENT, tn.ERP_RECEIVED_SHIPMENT, tn.ERP_ONHOLD_SHIPMENT
    FROM tmp_nsp tn LEFT JOIN rm_program_planning_unit ppu ON tn.PROGRAM_ID=ppu.PROGRAM_ID AND tn.PLANNING_UNIT_ID=ppu.PLANNING_UNIT_ID WHERE tn.PROGRAM_ID=@programId AND tn.VERSION_ID=@versionId 
    order by tn.PLANNING_UNIT_ID,tn.TRANS_DATE,tn.REGION_ID
    ;

END$$

DELIMITER ;
;

USE `fasp`;
DROP procedure IF EXISTS `buildSimpleSupplyPlan`;

USE `fasp`;
DROP procedure IF EXISTS `fasp`.`buildSimpleSupplyPlan`;
;

DELIMITER $$
USE `fasp`$$
CREATE DEFINER=`faspUser`@`%` PROCEDURE `buildSimpleSupplyPlan`(PROGRAM_ID INT(10), VERSION_ID INT(10))
BEGIN
    SET @programId = PROGRAM_ID;
    SET @versionId = VERSION_ID;
    SET @cb = 0;
   
    DELETE spbi.* FROM rm_supply_plan_batch_info spbi WHERE spbi.PROGRAM_ID=@programId AND spbi.VERSION_ID=@versionId;
    DELETE sp.* FROM rm_supply_plan sp WHERE sp.PROGRAM_ID=@programId AND sp.VERSION_ID=@versionId;
   
    INSERT INTO rm_supply_plan (
        SUPPLY_PLAN_ID, VERSION_ID, PROGRAM_ID, PLANNING_UNIT_ID, TRANS_DATE, 
        BATCH_ID, FORECASTED_CONSUMPTION_QTY, ACTUAL_CONSUMPTION_QTY, 
        MANUAL_PLANNED_SHIPMENT_QTY, MANUAL_SUBMITTED_SHIPMENT_QTY, MANUAL_APPROVED_SHIPMENT_QTY, MANUAL_SHIPPED_SHIPMENT_QTY, MANUAL_RECEIVED_SHIPMENT_QTY, MANUAL_ONHOLD_SHIPMENT_QTY,
        ERP_PLANNED_SHIPMENT_QTY, ERP_SUBMITTED_SHIPMENT_QTY, ERP_APPROVED_SHIPMENT_QTY, ERP_SHIPPED_SHIPMENT_QTY, ERP_RECEIVED_SHIPMENT_QTY, ERP_ONHOLD_SHIPMENT_QTY,
        SHIPMENT_QTY, ADJUSTMENT_MULTIPLIED_QTY, STOCK_MULTIPLIED_QTY
    )
    SELECT 
        null, @versionId, oc.PROGRAM_ID, oc.PLANNING_UNIT_ID, oc.TRANS_DATE, 
        oc.BATCH_ID, oc.FORECASTED_CONSUMPTION, oc.ACTUAL_CONSUMPTION, 
        oc.MANUAL_PLANNED_SHIPMENT_QTY, oc.MANUAL_SUBMITTED_SHIPMENT_QTY, oc.MANUAL_APPROVED_SHIPMENT_QTY, oc.MANUAL_SHIPPED_SHIPMENT_QTY, oc.MANUAL_RECEIVED_SHIPMENT_QTY, oc.MANUAL_ONHOLD_SHIPMENT_QTY,
        oc.ERP_PLANNED_SHIPMENT_QTY, oc.ERP_SUBMITTED_SHIPMENT_QTY, oc.ERP_APPROVED_SHIPMENT_QTY, oc.ERP_SHIPPED_SHIPMENT_QTY, oc.ERP_RECEIVED_SHIPMENT_QTY, oc.ERP_ONHOLD_SHIPMENT_QTY,
        oc.SHIPMENT_QTY, oc.ADJUSTMENT_MULTIPLIED_QTY, oc.STOCK_MULTIPLIED_QTY
    FROM (
        SELECT 
            o.PROGRAM_ID, o.PLANNING_UNIT_ID, DATE(CONCAT(o.TRANS_DATE,"-01")) `TRANS_DATE`, o.BATCH_ID, SUM(IFNULL(o.FORECASTED_CONSUMPTION,0)) `FORECASTED_CONSUMPTION`, SUM(IFNULL(o.ACTUAL_CONSUMPTION,0)) `ACTUAL_CONSUMPTION`, 
            SUM(IFNULL(o.MANUAL_PLANNED_SHIPMENT_QTY,0)) `MANUAL_PLANNED_SHIPMENT_QTY`, SUM(IFNULL(o.MANUAL_SUBMITTED_SHIPMENT_QTY,0)) `MANUAL_SUBMITTED_SHIPMENT_QTY`, SUM(IFNULL(o.MANUAL_APPROVED_SHIPMENT_QTY,0)) `MANUAL_APPROVED_SHIPMENT_QTY`, SUM(IFNULL(o.MANUAL_SHIPPED_SHIPMENT_QTY,0)) `MANUAL_SHIPPED_SHIPMENT_QTY`, SUM(IFNULL(o.MANUAL_RECEIVED_SHIPMENT_QTY,0)) `MANUAL_RECEIVED_SHIPMENT_QTY`, SUM(IFNULL(o.MANUAL_ONHOLD_SHIPMENT_QTY,0)) `MANUAL_ONHOLD_SHIPMENT_QTY`, 
            SUM(IFNULL(o.ERP_PLANNED_SHIPMENT_QTY,0)) `ERP_PLANNED_SHIPMENT_QTY`, SUM(IFNULL(o.ERP_SUBMITTED_SHIPMENT_QTY,0)) `ERP_SUBMITTED_SHIPMENT_QTY`, SUM(IFNULL(o.ERP_APPROVED_SHIPMENT_QTY,0)) `ERP_APPROVED_SHIPMENT_QTY`, SUM(IFNULL(o.ERP_SHIPPED_SHIPMENT_QTY,0)) `ERP_SHIPPED_SHIPMENT_QTY`, SUM(IFNULL(o.ERP_RECEIVED_SHIPMENT_QTY,0)) `ERP_RECEIVED_SHIPMENT_QTY`, SUM(IFNULL(o.ERP_ONHOLD_SHIPMENT_QTY,0)) `ERP_ONHOLD_SHIPMENT_QTY`, 
            SUM(IFNULL(o.SHIPMENT_QTY,0)) `SHIPMENT_QTY`, SUM(IFNULL(o.ADJUSTMENT_MULTIPLIED_QTY,0)) `ADJUSTMENT_MULTIPLIED_QTY`, SUM(IFNULL(o.STOCK_MULTIPLIED_QTY,0)) `STOCK_MULTIPLIED_QTY` 
        FROM (
            SELECT 
                '2' `TRANS_TYPE`, c1.PROGRAM_ID, c1.CONSUMPTION_ID `TRANS_ID`, c1.PLANNING_UNIT_ID, LEFT(c1.CONSUMPTION_DATE, 7) `TRANS_DATE`, 
                c1.BATCH_ID, c1.EXPIRY_DATE, SUM(FORECASTED_CONSUMPTION) `FORECASTED_CONSUMPTION`, SUM(ACTUAL_CONSUMPTION) `ACTUAL_CONSUMPTION`, 
                null `MANUAL_PLANNED_SHIPMENT_QTY`, null `MANUAL_SUBMITTED_SHIPMENT_QTY`, null `MANUAL_APPROVED_SHIPMENT_QTY`, null `MANUAL_SHIPPED_SHIPMENT_QTY`, null `MANUAL_RECEIVED_SHIPMENT_QTY`, null `MANUAL_ONHOLD_SHIPMENT_QTY`, 
                null `ERP_PLANNED_SHIPMENT_QTY`, null `ERP_SUBMITTED_SHIPMENT_QTY`, null `ERP_APPROVED_SHIPMENT_QTY`, null `ERP_SHIPPED_SHIPMENT_QTY`, null `ERP_RECEIVED_SHIPMENT_QTY`, null `ERP_ONHOLD_SHIPMENT_QTY`, 
                null `SHIPMENT_QTY`, null `ADJUSTMENT_MULTIPLIED_QTY`, null  `STOCK_MULTIPLIED_QTY` 
            FROM (
                SELECT 
                    c.PROGRAM_ID, c.CONSUMPTION_ID, ct.REGION_ID, ct.PLANNING_UNIT_ID, ct.CONSUMPTION_DATE, 
                    ifnull(ctbi.BATCH_ID,0) `BATCH_ID`, ifnull(bi.EXPIRY_DATE,@defaultExpDate) `EXPIRY_DATE`, ct.ACTIVE, SUM(IF(ct.ACTUAL_FLAG=1, COALESCE(ctbi.CONSUMPTION_QTY, ct.CONSUMPTION_QTY),null)) `ACTUAL_CONSUMPTION`, 
                    SUM(IF(ct.ACTUAL_FLAG=0, COALESCE(ctbi.CONSUMPTION_QTY, ct.CONSUMPTION_QTY),null)) `FORECASTED_CONSUMPTION`
                FROM (
                    SELECT c.CONSUMPTION_ID, MAX(ct.VERSION_ID) MAX_VERSION_ID 
                    FROM rm_consumption c
                    LEFT JOIN rm_consumption_trans ct ON c.CONSUMPTION_ID=ct.CONSUMPTION_ID
                    WHERE c.PROGRAM_ID=@programId AND ct.VERSION_ID<=@versionId AND ct.CONSUMPTION_TRANS_ID IS NOT NULL
                    GROUP BY c.CONSUMPTION_ID
                ) tc
                LEFT JOIN rm_consumption c ON c.CONSUMPTION_ID=tc.CONSUMPTION_ID
                LEFT JOIN rm_consumption_trans ct ON c.CONSUMPTION_ID=ct.CONSUMPTION_ID AND tc.MAX_VERSION_ID=ct.VERSION_ID
                LEFT JOIN rm_consumption_trans_batch_info ctbi ON ct.CONSUMPTION_TRANS_ID=ctbi.CONSUMPTION_TRANS_ID
                LEFT JOIN rm_batch_info bi ON ctbi.BATCH_ID=bi.BATCH_ID
                WHERE ct.ACTIVE
                GROUP BY c.PROGRAM_ID, ct.REGION_ID, ct.PLANNING_UNIT_ID, ct.CONSUMPTION_DATE, ifnull(ctbi.BATCH_ID,0)
            ) c1 
            GROUP BY c1.PROGRAM_ID, c1.PLANNING_UNIT_ID, c1.CONSUMPTION_DATE, c1.BATCH_ID

            UNION

            SELECT 
                '1' `TRANS_TYPE`, s.PROGRAM_ID, s.SHIPMENT_ID `TRANS_ID`, st.PLANNING_UNIT_ID, LEFT(COALESCE(st.RECEIVED_DATE, st.EXPECTED_DELIVERY_DATE),7) `TRANS_DATE`, 
                ifnull(stbi.BATCH_ID,0) `BATCH_ID`, ifnull(bi.EXPIRY_DATE, @defaultExpDate) `EXPIRY_DATE`, null `FORECASTED_CONSUMPTION`, null `ACTUAL_CONSUMPTION`, 
                SUM(IF((st.ERP_FLAG IS NULL OR st.ERP_FLAG=0) AND st.SHIPMENT_STATUS_ID = 1, COALESCE(stbi.BATCH_SHIPMENT_QTY ,st.SHIPMENT_QTY),0)) `MANUAL_PLANNED_SHIPMENT_QTY`, 
                SUM(IF((st.ERP_FLAG IS NULL OR st.ERP_FLAG=0) AND st.SHIPMENT_STATUS_ID = 3, COALESCE(stbi.BATCH_SHIPMENT_QTY ,st.SHIPMENT_QTY),0)) `MANUAL_SUBMITTED_SHIPMENT_QTY`, 
                SUM(IF((st.ERP_FLAG IS NULL OR st.ERP_FLAG=0) AND st.SHIPMENT_STATUS_ID = 4, COALESCE(stbi.BATCH_SHIPMENT_QTY ,st.SHIPMENT_QTY),0)) `MANUAL_APPROVED_SHIPMENT_QTY`, 
                SUM(IF((st.ERP_FLAG IS NULL OR st.ERP_FLAG=0) AND st.SHIPMENT_STATUS_ID IN (5,6), COALESCE(stbi.BATCH_SHIPMENT_QTY ,st.SHIPMENT_QTY),0)) `MANUAL_SHIPPED_SHIPMENT_QTY`, 
                SUM(IF((st.ERP_FLAG IS NULL OR st.ERP_FLAG=0) AND st.SHIPMENT_STATUS_ID = 7, COALESCE(stbi.BATCH_SHIPMENT_QTY ,st.SHIPMENT_QTY),0)) `MANUAL_RECEIVED_SHIPMENT_QTY`, 
                SUM(IF((st.ERP_FLAG IS NULL OR st.ERP_FLAG=0) AND st.SHIPMENT_STATUS_ID = 9, COALESCE(stbi.BATCH_SHIPMENT_QTY ,st.SHIPMENT_QTY),0)) `MANUAL_ONHOLD_SHIPMENT_QTY`, 
                SUM(IF(st.ERP_FLAG = 1 AND st.SHIPMENT_STATUS_ID = 1, COALESCE(stbi.BATCH_SHIPMENT_QTY ,st.SHIPMENT_QTY),0)) `ERP_PLANNED_SHIPMENT_QTY`, 
                SUM(IF(st.ERP_FLAG = 1 AND st.SHIPMENT_STATUS_ID = 3, COALESCE(stbi.BATCH_SHIPMENT_QTY ,st.SHIPMENT_QTY),0)) `ERP_SUBMITTED_SHIPMENT_QTY`, 
                SUM(IF(st.ERP_FLAG = 1 AND st.SHIPMENT_STATUS_ID = 4, COALESCE(stbi.BATCH_SHIPMENT_QTY ,st.SHIPMENT_QTY),0)) `ERP_APPROVED_SHIPMENT_QTY`, 
                SUM(IF(st.ERP_FLAG = 1 AND st.SHIPMENT_STATUS_ID IN (5,6), COALESCE(stbi.BATCH_SHIPMENT_QTY ,st.SHIPMENT_QTY),0)) `ERP_SHIPPED_SHIPMENT_QTY`, 
                SUM(IF(st.ERP_FLAG = 1 AND st.SHIPMENT_STATUS_ID = 7, COALESCE(stbi.BATCH_SHIPMENT_QTY ,st.SHIPMENT_QTY),0)) `ERP_RECEIVED_SHIPMENT_QTY`, 
                SUM(IF(st.ERP_FLAG = 1 AND st.SHIPMENT_STATUS_ID = 9, COALESCE(stbi.BATCH_SHIPMENT_QTY ,st.SHIPMENT_QTY),0)) `ERP_ONHOLD_SHIPMENT_QTY`, 
                SUM(COALESCE(stbi.BATCH_SHIPMENT_QTY ,st.SHIPMENT_QTY)) `SHIPMENT_QTY`, null  `ADJUSTMENT_MULTIPLIED_QTY`, null  `STOCK_MULTIPLIED_QTY`
            FROM (
                SELECT s.PROGRAM_ID, s.SHIPMENT_ID, MAX(st.VERSION_ID) MAX_VERSION_ID
                FROM rm_shipment s
                LEFT JOIN rm_shipment_trans st ON s.SHIPMENT_ID=st.SHIPMENT_ID
                WHERE s.PROGRAM_ID=@programId AND st.VERSION_ID<=@versionId AND st.SHIPMENT_TRANS_ID IS NOT NULL 
                GROUP BY s.SHIPMENT_ID
            ) ts
            LEFT JOIN rm_shipment s ON s.SHIPMENT_ID=ts.SHIPMENT_ID
            LEFT JOIN rm_shipment_trans st ON s.SHIPMENT_ID=st.SHIPMENT_ID AND ts.MAX_VERSION_ID=st.VERSION_ID
            LEFT JOIN rm_shipment_trans_batch_info stbi ON st.SHIPMENT_TRANS_ID=stbi.SHIPMENT_TRANS_ID
            LEFT JOIN rm_batch_info bi ON stbi.BATCH_ID=bi.BATCH_ID
            WHERE st.ACTIVE AND st.ACCOUNT_FLAG AND st.SHIPMENT_STATUS_ID!=8 
            GROUP BY s.PROGRAM_ID, st.PLANNING_UNIT_ID, COALESCE(st.RECEIVED_DATE, st.EXPECTED_DELIVERY_DATE), ifnull(stbi.BATCH_ID,0)

            UNION

            SELECT 
                '3' `TRANS_TYPE`, i.PROGRAM_ID, i.INVENTORY_ID `TRANS_ID`, rcpu.PLANNING_UNIT_ID, LEFT(it.INVENTORY_DATE,7) `TRANS_DATE`, 
                ifnull(itbi.BATCH_ID,0) `BATCH_ID`, IFNULL(bi.EXPIRY_DATE, @defaultExpDate) `EXPIRY_DATE`, null `FORECASTED_CONSUMPTION`, null `ACTUAL_CONSUMPTION`, 
                null `MANUAL_PLANNED_SHIPMENT_QTY`, null `MANUAL_SUBMITTED_SHIPMENT_QTY`, null `MANUAL_APPROVED_SHIPMENT_QTY`, null `MANUAL_SHIPPED_SHIPMENT_QTY`, null `MANUAL_RECEIVED_SHIPMENT_QTY`, null `MANUAL_ONHOLD_SHIPMENT_QTY`, 
                null `ERP_PLANNED_SHIPMENT_QTY`, null `ERP_SUBMITTED_SHIPMENT_QTY`, null `ERP_APPROVED_SHIPMENT_QTY`, null `ERP_SHIPPED_SHIPMENT_QTY`, null `ERP_RECEIVED_SHIPMENT_QTY`, null `ERP_ONHOLD_SHIPMENT_QTY`, 
                null `SHIPMENT_QTY`, SUM(COALESCE(itbi.ADJUSTMENT_QTY, it.ADJUSTMENT_QTY)*IF(rcpu.CONVERSION_METHOD IS NULL OR rcpu.CONVERSION_METHOD=1, rcpu.CONVERSION_NUMBER, IF(rcpu.CONVERSION_METHOD=2,1/rcpu.CONVERSION_NUMBER,0))) `ADJUSTMENT_MULTIPLIED_QTY`,  SUM(COALESCE(itbi.ACTUAL_QTY, it.ACTUAL_QTY)*IF(rcpu.CONVERSION_METHOD IS NULL OR rcpu.CONVERSION_METHOD=1, rcpu.CONVERSION_NUMBER, IF(rcpu.CONVERSION_METHOD=2,1/rcpu.CONVERSION_NUMBER,0))) `STOCK_MULTIPLIED_QTY`
            FROM (
                SELECT i.PROGRAM_ID, i.INVENTORY_ID, MAX(it.VERSION_ID) MAX_VERSION_ID
                FROM rm_inventory i
                LEFT JOIN rm_inventory_trans it ON i.INVENTORY_ID=it.INVENTORY_ID
                WHERE i.PROGRAM_ID=@programId AND it.VERSION_ID<=@versionId AND it.INVENTORY_TRANS_ID IS NOT NULL 
                GROUP BY i.INVENTORY_ID
            ) ti
            LEFT JOIN rm_inventory i ON i.INVENTORY_ID=ti.INVENTORY_ID
            LEFT JOIN rm_inventory_trans it ON i.INVENTORY_ID=it.INVENTORY_ID AND ti.MAX_VERSION_ID=it.VERSION_ID
            LEFT JOIN rm_inventory_trans_batch_info itbi ON it.INVENTORY_TRANS_ID=itbi.INVENTORY_TRANS_ID
            LEFT JOIN rm_batch_info bi ON itbi.BATCH_ID=bi.BATCH_ID
            LEFT JOIN rm_realm_country_planning_unit rcpu ON it.REALM_COUNTRY_PLANNING_UNIT_ID=rcpu.REALM_COUNTRY_PLANNING_UNIT_ID
            WHERE it.ACTIVE
            GROUP BY i.PROGRAM_ID, rcpu.PLANNING_UNIT_ID, it.INVENTORY_DATE, ifnull(itbi.BATCH_ID,0)
        ) AS o GROUP BY o.PROGRAM_ID, o.PLANNING_UNIT_ID, o.TRANS_DATE, o.BATCH_ID
    ) oc;
       
    -- Get the Region count for this Program
    SELECT count(*) into @regionCount FROM rm_program_region pr WHERE pr.PROGRAM_ID=@programId;
    
    -- Update if the Consumption that is to be used for the month is Actual or Forecasted
    UPDATE rm_supply_plan sp LEFT JOIN (SELECT PLANNING_UNIT_ID, CONSUMPTION_DATE, IF(@regionCount<=SUM(IF(ACTUAL_CONSUMPTION IS NOT NULL, 1,0)), 1 , IF(IFNULL(SUM(ACTUAL_CONSUMPTION),0)>IFNULL(SUM(FORECASTED_CONSUMPTION),0), 1, 0)) `ACTUAL` FROM (SELECT ct.PLANNING_UNIT_ID, ct.CONSUMPTION_DATE, ct.REGION_ID, SUM(IF(ct.ACTUAL_FLAG, ct.CONSUMPTION_QTY, null)) ACTUAL_CONSUMPTION, SUM(IF(ct.ACTUAL_FLAG=0, ct.CONSUMPTION_QTY, null)) FORECASTED_CONSUMPTION FROM (SELECT c.CONSUMPTION_ID, MAX(ct.VERSION_ID) MAX_VERSION_ID  FROM rm_consumption c LEFT JOIN rm_consumption_trans ct ON c.CONSUMPTION_ID=ct.CONSUMPTION_ID WHERE c.PROGRAM_ID=@programId AND ct.VERSION_ID<=@versionId AND ct.CONSUMPTION_TRANS_ID IS NOT NULL GROUP BY c.CONSUMPTION_ID) tc LEFT JOIN rm_consumption c ON c.CONSUMPTION_ID=tc.CONSUMPTION_ID LEFT JOIN rm_consumption_trans ct ON c.CONSUMPTION_ID=ct.CONSUMPTION_ID AND tc.MAX_VERSION_ID=ct.VERSION_ID WHERE ct.ACTIVE GROUP BY ct.PLANNING_UNIT_ID, ct.CONSUMPTION_DATE, ct.REGION_ID) c2 GROUP BY c2.PLANNING_UNIT_ID, CONSUMPTION_DATE) spa ON sp.PLANNING_UNIT_ID=spa.PLANNING_UNIT_ID AND sp.TRANS_DATE=spa.CONSUMPTION_DATE SET sp.ACTUAL=spa.ACTUAL;
     
    SELECT MIN(sp.TRANS_DATE), ADDDATE(MAX(sp.TRANS_DATE), INTERVAL ppu.MONTHS_IN_PAST_FOR_AMC MONTH) INTO @startMonth, @stopMonth  FROM rm_supply_plan sp LEFT JOIN rm_program_planning_unit ppu ON sp.PROGRAM_ID=ppu.PROGRAM_ID AND sp.PLANNING_UNIT_ID=ppu.PLANNING_UNIT_ID WHERE sp.PROGRAM_ID=@programId and sp.VERSION_ID=@versionId;

    INSERT INTO rm_supply_plan_batch_info (
        PROGRAM_ID, VERSION_ID, PLANNING_UNIT_ID, BATCH_ID, TRANS_DATE, EXPIRY_DATE, 
        MANUAL_PLANNED_SHIPMENT_QTY, MANUAL_SUBMITTED_SHIPMENT_QTY, MANUAL_APPROVED_SHIPMENT_QTY, MANUAL_SHIPPED_SHIPMENT_QTY, MANUAL_RECEIVED_SHIPMENT_QTY, MANUAL_ONHOLD_SHIPMENT_QTY, 
        ERP_PLANNED_SHIPMENT_QTY, ERP_SUBMITTED_SHIPMENT_QTY, ERP_APPROVED_SHIPMENT_QTY, ERP_SHIPPED_SHIPMENT_QTY, ERP_RECEIVED_SHIPMENT_QTY, ERP_ONHOLD_SHIPMENT_QTY, 
        SHIPMENT_QTY, ACTUAL, ACTUAL_CONSUMPTION_QTY, FORECASTED_CONSUMPTION_QTY, ADJUSTMENT_MULTIPLIED_QTY, STOCK_MULTIPLIED_QTY)
    SELECT
        @programId `PROGRAM_ID`, @versionId `VERSION_ID`, m3.PLANNING_UNIT_Id,  m3.BATCH_ID, m3.MONTH `TRANS_DATE`, IFNULL(bi.EXPIRY_DATE, '2099-12-31') `EXPIRY_DATE`, 
        IFNULL(sp.MANUAL_PLANNED_SHIPMENT_QTY,0) `MANUAL_PLANNED_SHIPMENT_QTY`, IFNULL(sp.MANUAL_SUBMITTED_SHIPMENT_QTY,0) `MANUAL_SUBMITTED_SHIPMENT_QTY`, IFNULL(sp.MANUAL_APPROVED_SHIPMENT_QTY,0) `MANUAL_APPROVED_SHIPMENT_QTY`,IFNULL(sp.MANUAL_SHIPPED_SHIPMENT_QTY,0) `MANUAL_SHIPPED_SHIPMENT_QTY`, IFNULL(sp.MANUAL_RECEIVED_SHIPMENT_QTY,0) `MANUAL_RECEIVED_SHIPMENT_QTY`, IFNULL(sp.MANUAL_ONHOLD_SHIPMENT_QTY,0) `MANUAL_ONHOLD_SHIPMENT_QTY`, 
        IFNULL(sp.ERP_PLANNED_SHIPMENT_QTY,0) `ERP_PLANNED_SHIPMENT_QTY`, IFNULL(sp.ERP_SUBMITTED_SHIPMENT_QTY,0) `ERP_SUBMITTED_SHIPMENT_QTY`, IFNULL(sp.ERP_APPROVED_SHIPMENT_QTY,0) `ERP_APPROVED_SHIPMENT_QTY`,IFNULL(sp.ERP_SHIPPED_SHIPMENT_QTY,0) `ERP_SHIPPED_SHIPMENT_QTY`, IFNULL(sp.ERP_RECEIVED_SHIPMENT_QTY,0) `ERP_RECEIVED_SHIPMENT_QTY`, IFNULL(sp.ERP_ONHOLD_SHIPMENT_QTY,0) `ERP_ONHOLD_SHIPMENT_QTY`, 
        IFNULL(sp.SHIPMENT_QTY,0) `SHIPMENT_QTY`, sp.ACTUAL, IFNULL(sp.ACTUAL_CONSUMPTION_QTY, 0) `ACTUAL_CONSUMPTION_QTY`, IFNULL(sp.FORECASTED_CONSUMPTION_QTY,0) `FORECASTED_CONSUMPTION_QTY`, IFNULL(sp.ADJUSTMENT_MULTIPLIED_QTY,0) `ADJUSTMENT_MULTIPLIED_QTY`, IFNULL(sp.STOCK_MULTIPLIED_QTY,0) `STOCK_MULTIPLIED_QTY`
    FROM (
        SELECT
            m.PLANNING_UNIT_ID, m.BATCH_ID, mn.MONTH
        FROM (
            SELECT
                sp.PLANNING_UNIT_ID, sp.BATCH_ID
            FROM rm_supply_plan sp
            WHERE sp.PROGRAM_ID=@programId and sp.VERSION_ID=@versionId
            GROUP BY sp.PLANNING_UNIT_ID, sp.BATCH_ID
        ) m JOIN mn ON mn.MONTH BETWEEN @startMonth AND @stopMonth
    ) m3
    LEFT JOIN rm_supply_plan sp ON m3.PLANNING_UNIT_ID=sp.PLANNING_UNIT_ID AND m3.BATCH_ID=sp.BATCH_ID AND m3.MONTH=sp.TRANS_DATE
    LEFT JOIN rm_batch_info bi ON m3.BATCH_ID=bi.BATCH_ID
    ORDER BY m3.PLANNING_UNIT_ID, `TRANS_DATE`, IF(m3.BATCH_ID=0,9999999999,m3.BATCH_ID), `SHIPMENT_QTY`;

--    UPDATE rm_supply_plan_batch_info spbi LEFT JOIN rm_supply_plan sp ON spbi.PLANNING_UNIT_ID=sp.PLANNING_UNIT_ID AND spbi.TRANS_DATE=sp.TRANS_DATE SET spbi.ACTUAL=sp.ACTUAL WHERE sp.ACTUAL IS NOT NULL;       

    SELECT
        spbi.`SUPPLY_PLAN_BATCH_INFO_ID`, spbi.`PROGRAM_ID`, spbi.`VERSION_ID`, spbi.`PLANNING_UNIT_ID`, spbi.`BATCH_ID`, spbi.`TRANS_DATE`, spbi.`EXPIRY_DATE`, 
        spbi.`MANUAL_PLANNED_SHIPMENT_QTY`, spbi.`MANUAL_SUBMITTED_SHIPMENT_QTY`, spbi.`MANUAL_APPROVED_SHIPMENT_QTY`, spbi.`MANUAL_SHIPPED_SHIPMENT_QTY`, spbi.`MANUAL_RECEIVED_SHIPMENT_QTY`, spbi.`MANUAL_ONHOLD_SHIPMENT_QTY`, 
        spbi.`ERP_PLANNED_SHIPMENT_QTY`, spbi.`ERP_SUBMITTED_SHIPMENT_QTY`, spbi.`ERP_APPROVED_SHIPMENT_QTY`, spbi.`ERP_SHIPPED_SHIPMENT_QTY`, spbi.`ERP_RECEIVED_SHIPMENT_QTY`, spbi.`ERP_ONHOLD_SHIPMENT_QTY`, 
        spbi.`SHIPMENT_QTY`, IF (spbi.`ACTUAL`=1, spbi.`ACTUAL_CONSUMPTION_QTY`, spbi.`FORECASTED_CONSUMPTION_QTY`) `CONSUMPTION`, spbi.`ADJUSTMENT_MULTIPLIED_QTY`, spbi.`STOCK_MULTIPLIED_QTY`
    FROM rm_supply_plan_batch_info spbi
    WHERE spbi.PROGRAM_ID=@programId AND spbi.VERSION_ID=@versionId
    ORDER BY spbi.PLANNING_UNIT_ID, spbi.TRANS_DATE, spbi.EXPIRY_DATE, IF(spbi.BATCH_ID=0, 9999999999,spbi.BATCH_ID);
    
END$$

DELIMITER ;
;

USE `fasp`;
DROP procedure IF EXISTS `buildSupplyPlan`;

USE `fasp`;
DROP procedure IF EXISTS `fasp`.`buildSupplyPlan`;
;

DELIMITER $$
USE `fasp`$$
CREATE DEFINER=`faspUser`@`%` PROCEDURE `buildSupplyPlan`(PROGRAM_ID INT(10), VERSION_ID INT(10))
BEGIN
	SET @programId = PROGRAM_Id;
    SET @versionId = VERSION_ID;
    SET @cb = 0;
    
    DELETE spbi.* FROM rm_supply_plan_batch_info spbi WHERE spbi.PROGRAM_ID=@programId AND spbi.VERSION_ID=@versionId;
    DELETE sp.* FROM rm_supply_plan sp WHERE sp.PROGRAM_ID=@programId AND sp.VERSION_ID=@versionId;
    
	INSERT INTO rm_supply_plan (SUPPLY_PLAN_ID, VERSION_ID, PROGRAM_ID, PLANNING_UNIT_ID, TRANS_DATE, BATCH_ID, FORECASTED_CONSUMPTION_QTY, ACTUAL_CONSUMPTION_QTY, SHIPMENT_QTY, ADJUSTMENT_MULTIPLIED_QTY, ACTUAL_MULTIPLIED_QTY, OPENING_BALANCE, CLOSING_BALANCE)
	SELECT null, 1, oc.PROGRAM_ID, oc.PLANNING_UNIT_ID, oc.TRANS_DATE, oc.BATCH_ID, oc.FORECASTED_CONSUMPTION, oc.ACTUAL_CONSUMPTION, oc.SHIPMENT_QTY, oc.ADJUSTMENT_MULTIPLIED_QTY, oc.ACTUAL_MULTIPLIED_QTY, @cb, @cb:=@cb-oc.FORECASTED_CONSUMPTION-oc.ACTUAL_CONSUMPTION+oc.SHIPMENT_QTY+oc.ADJUSTMENT_MULTIPLIED_QTY FROM (
	SELECT o.PROGRAM_ID, o.PLANNING_UNIT_ID, DATE(CONCAT(o.TRANS_DATE,"-01")) `TRANS_DATE`, o.BATCH_ID, SUM(IFNULL(o.FORECASTED_CONSUMPTION,0)) `FORECASTED_CONSUMPTION`, SUM(IFNULL(o.ACTUAL_CONSUMPTION,0)) `ACTUAL_CONSUMPTION`, SUM(IFNULL(o.SHIPMENT_QTY,0)) `SHIPMENT_QTY`, SUM(IFNULL(o.ADJUSTMENT_MULTIPLIED_QTY,0)) `ADJUSTMENT_MULTIPLIED_QTY`, SUM(IFNULL(o.ACTUAL_MULTIPLIED_QTY,0)) `ACTUAL_MULTIPLIED_QTY` FROM (
		-- Consumption
		SELECT '2' `TRANS_TYPE`, c1.PROGRAM_ID, c1.CONSUMPTION_ID `TRANS_ID`, c1.PLANNING_UNIT_ID, LEFT(c1.CONSUMPTION_DATE, 7) `TRANS_DATE`, c1.BATCH_ID, c1.EXPIRY_DATE, SUM(FORECASTED_CONSUMPTION) `FORECASTED_CONSUMPTION`, SUM(ACTUAL_CONSUMPTION) `ACTUAL_CONSUMPTION`, null `SHIPMENT_QTY`, null  `ADJUSTMENT_MULTIPLIED_QTY`, null  `ACTUAL_MULTIPLIED_QTY` FROM (
		SELECT c.PROGRAM_ID, c.CONSUMPTION_ID, ct.REGION_ID, ct.PLANNING_UNIT_ID, ct.CONSUMPTION_DATE, ca.ACTUAL, ifnull(ctbi.BATCH_ID,0) `BATCH_ID`, ifnull(bi.EXPIRY_DATE,@defaultExpDate) `EXPIRY_DATE`, ct.ACTIVE, SUM(IF(ct.ACTUAL_FLAG=1, COALESCE(ctbi.CONSUMPTION_QTY, ct.CONSUMPTION_QTY),null)) `ACTUAL_CONSUMPTION`, SUM(IF(ct.ACTUAL_FLAG=0, COALESCE(ctbi.CONSUMPTION_QTY, ct.CONSUMPTION_QTY),null)) `FORECASTED_CONSUMPTION`
			FROM (
				SELECT c.CONSUMPTION_ID, MAX(ct.VERSION_ID) MAX_VERSION_ID 
				FROM rm_consumption c 
				LEFT JOIN rm_consumption_trans ct ON c.CONSUMPTION_ID=ct.CONSUMPTION_ID 
				WHERE c.PROGRAM_ID=@programId AND ct.VERSION_ID<=@versionId AND ct.CONSUMPTION_TRANS_ID IS NOT NULL AND ct.ACTIVE GROUP BY c.CONSUMPTION_ID
			) tc 
		LEFT JOIN rm_consumption c ON c.CONSUMPTION_ID=tc.CONSUMPTION_ID
		LEFT JOIN rm_consumption_trans ct ON c.CONSUMPTION_ID=ct.CONSUMPTION_ID AND tc.MAX_VERSION_ID=ct.VERSION_ID
		LEFT JOIN (SELECT ct.PLANNING_UNIT_ID, ct.CONSUMPTION_DATE, bit_OR(ct.ACTUAL_FLAG=1 AND ct.CONSUMPTION_QTY>0) ACTUAL FROM (SELECT c.CONSUMPTION_ID, MAX(ct.VERSION_ID) MAX_VERSION_ID  FROM rm_consumption c LEFT JOIN rm_consumption_trans ct ON c.CONSUMPTION_ID=ct.CONSUMPTION_ID WHERE c.PROGRAM_ID=@programId AND ct.VERSION_ID<=@versionId AND ct.CONSUMPTION_TRANS_ID IS NOT NULL AND ct.ACTIVE GROUP BY c.CONSUMPTION_ID) tc LEFT JOIN rm_consumption c ON c.CONSUMPTION_ID=tc.CONSUMPTION_ID LEFT JOIN rm_consumption_trans ct ON c.CONSUMPTION_ID=ct.CONSUMPTION_ID AND tc.MAX_VERSION_ID=ct.VERSION_ID GROUP BY ct.PLANNING_UNIT_ID, ct.CONSUMPTION_DATE) ca ON ct.PLANNING_UNIT_ID=ca.PLANNING_UNIT_ID AND ct.CONSUMPTION_DATE=ca.CONSUMPTION_DATE and ct.ACTUAL_FLAG=ca.ACTUAL
		LEFT JOIN rm_consumption_trans_batch_info ctbi ON ct.CONSUMPTION_TRANS_ID=ctbi.CONSUMPTION_TRANS_ID
		LEFT JOIN rm_batch_info bi ON ctbi.BATCH_ID=bi.BATCH_ID
		GROUP BY c.PROGRAM_ID, ct.REGION_ID, ct.PLANNING_UNIT_ID, ct.CONSUMPTION_DATE, ifnull(ctbi.BATCH_ID,0)) c1 WHERE c1.ACTUAL IS NOT NULL GROUP BY c1.PROGRAM_ID, c1.PLANNING_UNIT_ID, c1.CONSUMPTION_DATE, c1.BATCH_ID

		UNION 
		-- Shipment
		SELECT '1' `TRANS_TYPE`, s.PROGRAM_ID, s.SHIPMENT_ID `TRANS_ID`, st.PLANNING_UNIT_ID, LEFT(COALESCE(st.DELIVERED_DATE, st.EXPECTED_DELIVERY_DATE),7) `TRANS_DATE`, ifnull(stbi.BATCH_ID,0) `BATCH_ID`, ifnull(bi.EXPIRY_DATE, @defaultExpDate) `EXPIRY_DATE`, null `FORECASTED_CONSUMPTION`, null `ACTUAL_CONSUMPTION`, SUM(COALESCE(stbi.BATCH_SHIPMENT_QTY ,st.SHIPMENT_QTY)) `SHIPMENT_QTY`, null  `ADJUSTMENT_MULTIPLIED_QTY`, null  `ACTUAL_MULTIPLIED_QTY`
			FROM (
				SELECT s.PROGRAM_ID, s.SHIPMENT_ID, MAX(st.VERSION_ID) MAX_VERSION_ID 
				FROM rm_shipment s 
				LEFT JOIN rm_shipment_trans st ON s.SHIPMENT_ID=st.SHIPMENT_ID 
				WHERE s.PROGRAM_ID=@programId AND st.VERSION_ID<=@versionId AND st.SHIPMENT_TRANS_ID IS NOT NULL AND st.ACTIVE AND s.ACCOUNT_FLAG GROUP BY s.SHIPMENT_ID
			) ts
		LEFT JOIN rm_shipment s ON s.SHIPMENT_ID=ts.SHIPMENT_ID
		LEFT JOIN rm_shipment_trans st ON s.SHIPMENT_ID=st.SHIPMENT_ID AND ts.MAX_VERSION_ID=st.VERSION_ID
		LEFT JOIN rm_shipment_trans_batch_info stbi ON st.SHIPMENT_TRANS_ID=stbi.SHIPMENT_TRANS_ID
		LEFT JOIN rm_batch_info bi ON stbi.BATCH_ID=bi.BATCH_ID
		GROUP BY s.PROGRAM_ID, st.PLANNING_UNIT_ID, COALESCE(st.DELIVERED_DATE, st.EXPECTED_DELIVERY_DATE), ifnull(stbi.BATCH_ID,0)

		UNION 
		-- Inventory
		SELECT '3' `TRANS_TYPE`, i.PROGRAM_ID, i.INVENTORY_ID `TRANS_ID`, rcpu.PLANNING_UNIT_ID, LEFT(it.INVENTORY_DATE,7) `TRANS_DATE`, ifnull(itbi.BATCH_ID,0) `BATCH_ID`, IFNULL(bi.EXPIRY_DATE, @defaultExpDate) `EXPIRY_DATE`, null `FORECASTED_CONSUMPTION`, null `ACTUAL_CONSUMPTION`, null `SHIPMENT_QTY`, SUM(COALESCE(itbi.ADJUSTMENT_QTY, it.ADJUSTMENT_QTY)*IF(rcpu.CONVERSION_METHOD IS NULL OR rcpu.CONVERSION_METHOD=1, rcpu.CONVERSION_NUMBER, IF(rcpu.CONVERSION_METHOD=2,1/rcpu.CONVERSION_NUMBER,0))) `ADJUSTMENT_MULTIPLIED_QTY`, SUM(COALESCE(itbi.ACTUAL_QTY, it.ACTUAL_QTY)*IF(rcpu.CONVERSION_METHOD IS NULL OR rcpu.CONVERSION_METHOD=1, rcpu.CONVERSION_NUMBER, IF(rcpu.CONVERSION_METHOD=2,1/rcpu.CONVERSION_NUMBER,0))) `ACTUAL_MULTIPLIED_QTY` 
		FROM (
				SELECT i.PROGRAM_ID, i.INVENTORY_ID, MAX(it.VERSION_ID) MAX_VERSION_ID 
				FROM rm_inventory i 
				LEFT JOIN rm_inventory_trans it ON i.INVENTORY_ID=it.INVENTORY_ID 
				WHERE i.PROGRAM_ID=@programId AND it.VERSION_ID<=@versionId AND it.INVENTORY_TRANS_ID IS NOT NULL AND it.ACTIVE GROUP BY i.INVENTORY_ID
			) ti 
		LEFT JOIN rm_inventory i ON i.INVENTORY_ID=ti.INVENTORY_ID
		LEFT JOIN rm_inventory_trans it ON i.INVENTORY_ID=it.INVENTORY_ID AND ti.MAX_VERSION_ID=it.VERSION_ID
		LEFT JOIN rm_inventory_trans_batch_info itbi ON it.INVENTORY_TRANS_ID=itbi.INVENTORY_TRANS_ID
		LEFT JOIN rm_batch_info bi ON itbi.BATCH_ID=bi.BATCH_ID
		LEFT JOIN rm_realm_country_planning_unit rcpu ON it.REALM_COUNTRY_PLANNING_UNIT_ID=rcpu.REALM_COUNTRY_PLANNING_UNIT_ID
		GROUP BY i.PROGRAM_ID, rcpu.PLANNING_UNIT_ID, it.INVENTORY_DATE, ifnull(itbi.BATCH_ID,0)
	) AS o GROUP BY o.PROGRAM_ID, o.PLANNING_UNIT_ID, o.TRANS_DATE, o.BATCH_ID 
	) oc;
    
    -- SET the Min and Max Date Range
    SELECT MIN(sp.TRANS_DATE), MAX(sp.TRANS_DATE) into @startMonth, @stopMonth FROM rm_supply_plan sp WHERE sp.PROGRAM_ID=@programId and sp.VERSION_ID=@versionId;
    
    -- Populate the supplyPlan table with a record for every batch for every month
    SET @cb = 0;
	SET @oldBatchId = -1;
-- 	INSERT INTO rm_supply_plan_batch_info (PROGRAM_ID, VERSION_ID, BATCH_ID, TRANS_DATE, EXPIRY_DATE, SHIPMENT_QTY, ACTUAL_CONSUMPTION_QTY, FORECASTED_CONSUMPTION_QTY, ADJUSTMENT_MULTIPLIED_QTY, OPENING_BALANCE, CLOSING_BALANCE, EXPIRED_STOCK, EXPIRED_CONSUMPTION, FINAL_OPENING_BALANCE, FINAL_CLOSING_BALANCE)
-- 		SELECT spc2.PROGRAM_ID, spc2.VERSION_ID, spc2.BATCH_ID, spc2.TRANS_DATE, spc2.EXPIRY_DATE, spc2.SHIPMENT_QTY, spc2.ACTUAL_CONSUMPTION_QTY, spc2.FORECASTED_CONSUMPTION_QTY, spc2.ADJUSTMENT_MULTIPLIED_QTY, spc2.OB, spc2.CB, spc2.EXPIRED_STOCK, spc2.EXPIRED_CONSUMPTION, spc2.OB, spc2.CB
-- 		FROM (SELECT spc.*, IF(@oldBatchId!=spc.BATCH_ID, @cb:=0, @cb:=@cb) `OB`, IF(spc.TRANS_DATE>=spc.EXPIRY_DATE, @cb, 0) `EXPIRED_STOCK`,IF(spc.TRANS_DATE>=spc.EXPIRY_DATE,spc.ACTUAL_CONSUMPTION_QTY,0) `EXPIRED_CONSUMPTION`, @cb:=@cb+spc.SHIPMENT_QTY-IF(spc.TRANS_DATE>=spc.EXPIRY_DATE,0,spc.ACTUAL_CONSUMPTION_QTY)+spc.ADJUSTMENT_MULTIPLIED_QTY-IF(spc.TRANS_DATE>=spc.EXPIRY_DATE, @cb, 0) `CB`, @oldBatchId := spc.BATCH_ID FROM (SELECT sp.PROGRAM_ID, sp.VERSION_ID, sp.BATCH_ID, sp.TRANS_DATE, IFNULL(bi.EXPIRY_DATE, '2099-12-31') EXPIRY_DATE, sp.SHIPMENT_QTY, sp.ACTUAL_CONSUMPTION_QTY, sp.ADJUSTMENT_MULTIPLIED_QTY, sp.FORECASTED_CONSUMPTION_QTY FROM rm_supply_plan sp LEFT JOIN rm_batch_info bi ON sp.BATCH_ID=bi.BATCH_ID ORDER BY sp.BATCH_ID, sp.TRANS_DATE, sp.SHIPMENT_QTY) spc) spc2;
	INSERT INTO rm_supply_plan_batch_info (PROGRAM_ID, VERSION_ID, BATCH_ID, TRANS_DATE, EXPIRY_DATE, SHIPMENT_QTY, ACTUAL_CONSUMPTION_QTY, FORECASTED_CONSUMPTION_QTY, ADJUSTMENT_MULTIPLIED_QTY, OPENING_BALANCE, CLOSING_BALANCE, EXPIRED_STOCK, EXPIRED_CONSUMPTION, FINAL_OPENING_BALANCE, FINAL_CLOSING_BALANCE)
	SELECT spc2.PROGRAM_ID, spc2.VERSION_ID, spc2.BATCH_ID, spc2.TRANS_DATE, spc2.EXPIRY_DATE, spc2.SHIPMENT_QTY, spc2.ACTUAL_CONSUMPTION_QTY, spc2.FORECASTED_CONSUMPTION_QTY, spc2.ADJUSTMENT_MULTIPLIED_QTY, spc2.OB, spc2.CB, spc2.EXPIRED_STOCK, spc2.EXPIRED_CONSUMPTION, spc2.OB, spc2.CB
 		FROM 
			(
			SELECT 
				spc.*, 
				IF(@oldBatchId!=spc.BATCH_ID, @cb:=0, @cb:=@cb) `OB`, IF(spc.TRANS_DATE>=spc.EXPIRY_DATE, @cb, 0) `EXPIRED_STOCK`,
				IF(spc.TRANS_DATE>=spc.EXPIRY_DATE,spc.ACTUAL_CONSUMPTION_QTY,0) `EXPIRED_CONSUMPTION`, @cb:=@cb+spc.SHIPMENT_QTY-IF(spc.TRANS_DATE>=spc.EXPIRY_DATE,0,spc.ACTUAL_CONSUMPTION_QTY)+spc.ADJUSTMENT_MULTIPLIED_QTY-IF(spc.TRANS_DATE>=spc.EXPIRY_DATE, @cb, 0) `CB`, 
				@oldBatchId := spc.BATCH_ID 
			FROM 
				(
				SELECT 
					@programId `PROGRAM_ID`, @versionId `VERSION_ID`, m3.BATCH_ID, m3.MONTH `TRANS_DATE`, IFNULL(bi.EXPIRY_DATE, '2099-12-31') EXPIRY_DATE, IFNULL(sp.SHIPMENT_QTY,0) `SHIPMENT_QTY`, 
					IFNULL(sp.ACTUAL_CONSUMPTION_QTY, 0) `ACTUAL_CONSUMPTION_QTY`, IFNULL(sp.ADJUSTMENT_MULTIPLIED_QTY,0) `ADJUSTMENT_MULTIPLIED_QTY`, IFNULL(sp.FORECASTED_CONSUMPTION_QTY,0) `FORECASTED_CONSUMPTION_QTY` 
				FROM 
					(
					SELECT 
						m.BATCH_ID, 
                        mn.MONTH 
					FROM 
						(
                        SELECT 
							sp.BATCH_ID 
						FROM rm_supply_plan sp 
                        WHERE sp.PROGRAM_ID=@programId and sp.VERSION_ID=@versionId 
                        GROUP BY sp.BATCH_ID
					) m JOIN mn ON mn.MONTH BETWEEN @startMonth AND @stopMonth
				) m3 
				LEFT JOIN rm_supply_plan sp ON m3.BATCH_ID=sp.BATCH_ID AND m3.MONTH=sp.TRANS_DATE
				LEFT JOIN rm_batch_info bi ON m3.BATCH_ID=bi.BATCH_ID 
				ORDER BY IF(m3.BATCH_ID=0,9999999999,m3.BATCH_ID), `TRANS_DATE`, `SHIPMENT_QTY`
			) spc
		) spc2;
	CALL buildStockBalances(@programId, @versionId);
END$$

DELIMITER ;
;


USE `fasp`;
DROP procedure IF EXISTS `getInventoryInfoForSSVReport`;

USE `fasp`;
DROP procedure IF EXISTS `fasp`.`getInventoryInfoForSSVReport`;
;

DELIMITER $$
USE `fasp`$$
CREATE DEFINER=`faspUser`@`%` PROCEDURE `getInventoryInfoForSSVReport`(VAR_START_DATE DATE, VAR_STOP_DATE DATE, VAR_PROGRAM_ID INT(10), VAR_VERSION_ID INT, VAR_PLANNING_UNIT_ID INT(10))
BEGIN
    -- %%%%%%%%%%%%%%%%%%%%%
    -- Report no 16b
    -- %%%%%%%%%%%%%%%%%%%%%
    
    SET @startDate = VAR_START_DATE; 
    SET @stopDate = VAR_STOP_DATE;
    SET @programId = VAR_PROGRAM_ID;
    SET @versionId = VAR_VERSION_ID;
    SET @planningUnitId = VAR_PLANNING_UNIT_ID;

    IF @versionId = -1 THEN
	SELECT MAX(pv.VERSION_ID) into @versionId FROM rm_program_version pv where pv.PROGRAM_ID=@programId;
    END IF;
    
    SELECT 
	it.INVENTORY_ID, it.INVENTORY_DATE, it.ACTUAL_QTY*IF(rcpu.CONVERSION_METHOD IS NULL OR rcpu.CONVERSION_METHOD=1, rcpu.CONVERSION_NUMBER, IF(rcpu.CONVERSION_METHOD=2,1/rcpu.CONVERSION_NUMBER,0)) `ACTUAL_QTY`, it.ADJUSTMENT_QTY*IF(rcpu.CONVERSION_METHOD IS NULL OR rcpu.CONVERSION_METHOD=1, rcpu.CONVERSION_NUMBER, IF(rcpu.CONVERSION_METHOD=2,1/rcpu.CONVERSION_NUMBER,0)) `ADJUSTMENT_QTY`, it.NOTES,
	r.REGION_ID, r.LABEL_ID `REGION_LABEL_ID`, r.LABEL_EN `REGION_LABEL_EN`, r.LABEL_FR `REGION_LABEL_FR`, r.LABEL_SP `REGION_LABEL_SP`, r.LABEL_PR `REGION_LABEL_PR`,
	ds.DATA_SOURCE_ID, ds.LABEL_ID `DATA_SOURCE_LABEL_ID`, ds.LABEL_EN `DATA_SOURCE_LABEL_EN`, ds.LABEL_FR `DATA_SOURCE_LABEL_FR`, ds.LABEL_SP `DATA_SOURCE_LABEL_SP`, ds.LABEL_PR `DATA_SOURCE_LABEL_PR`
    FROM (SELECT i.INVENTORY_ID, MAX(it.VERSION_ID) MAX_VERSION_ID FROM rm_inventory i LEFT JOIN rm_inventory_trans it ON i.INVENTORY_ID=it.INVENTORY_ID WHERE i.PROGRAM_ID=@programId AND (it.VERSION_ID<=@versionId OR @versionId=-1) GROUP BY i.INVENTORY_ID) tc 
    LEFT JOIN rm_inventory i ON tc.INVENTORY_ID=i.INVENTORY_ID
    LEFT JOIN rm_inventory_trans it ON tc.INVENTORY_ID=it.INVENTORY_ID AND tc.MAX_VERSION_ID=it.VERSION_ID
    LEFT JOIN rm_realm_country_planning_unit rcpu ON it.REALM_COUNTRY_PLANNING_UNIT_ID=rcpu.REALM_COUNTRY_PLANNING_UNIT_ID
    LEFT JOIN vw_region r ON it.REGION_ID=r.REGION_ID
    LEFT JOIN vw_data_source ds ON it.DATA_SOURCE_ID=ds.DATA_SOURCE_ID
    WHERE it.INVENTORY_DATE BETWEEN @startDate AND @stopDate AND it.ACTIVE AND rcpu.PLANNING_UNIT_ID=@planningUnitId
    ORDER BY it.INVENTORY_DATE,it.REGION_ID,i.INVENTORY_ID;
END$$

DELIMITER ;
;

USE `fasp`;
DROP procedure IF EXISTS `stockAdjustmentReport`;

USE `fasp`;
DROP procedure IF EXISTS `fasp`.`stockAdjustmentReport`;
;

DELIMITER $$
USE `fasp`$$
CREATE DEFINER=`faspUser`@`%` PROCEDURE `stockAdjustmentReport`(VAR_PROGRAM_ID INT(10), VAR_VERSION_ID INT(10), VAR_START_DATE DATE, VAR_STOP_DATE DATE, VAR_PLANNING_UNIT_IDS TEXT)
BEGIN

 -- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 -- Report no 12
 -- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 
-- VAR_PROGRAM_ID must be a valid Program cannot be All i.e. -1
-- VAR_VERSION_ID must be a valid Version for the PROGRAM_ID or can be -1 in which case it will default to the latest Version of the Program, 
-- VAR_START_DATE AND VAR_STOP_DATE are the Date range between which the Stock Adjustment will be run. Only the month and year are considered while running the report
-- VAR_PLANNING_UNIT_IDS are the Quoted, Comma separated list of the Planning Unit Ids that you want to run the report for. If you want to run it for all Planning Units in the Program leave it empty
 
SET @programId = VAR_PROGRAM_ID;
SET @versionId = VAR_VERSION_ID;
IF @versionID = -1 THEN
	SELECT MAX(pv.VERSION_ID) INTO @versionId FROM rm_program_version pv WHERE pv.PROGRAM_ID=@programId;
END IF;
SET @startDt = LEFT(VAR_START_DATE,7);
SET @stopDt = LEFT(VAR_STOP_DATE,7);

SET @sqlString = "";

SET @sqlString = CONCAT(@sqlString, "SELECT ");
SET @sqlString = CONCAT(@sqlString, "	p.PROGRAM_ID, p.LABEL_ID `PROGRAM_LABEL_ID`, p.LABEL_EN `PROGRAM_LABEL_EN`, p.LABEL_FR `PROGRAM_LABEL_FR`, p.LABEL_SP `PROGRAM_LABEL_SP`, p.LABEL_PR `PROGRAM_LABEL_PR`,");
SET @sqlString = CONCAT(@sqlString, "   pu.PLANNING_UNIT_ID, pu.LABEL_ID `PLANNING_UNIT_LABEL_ID`, pu.LABEL_EN `PLANNING_UNIT_LABEL_EN`, pu.LABEL_FR `PLANNING_UNIT_LABEL_FR`, pu.LABEL_SP `PLANNING_UNIT_LABEL_SP`, pu.LABEL_PR `PLANNING_UNIT_LABEL_PR`,");
SET @sqlString = CONCAT(@sqlString, "   ds.DATA_SOURCE_ID, ds.LABEL_ID `DATA_SOURCE_LABEL_ID`, ds.LABEL_EN `DATA_SOURCE_LABEL_EN`, ds.LABEL_FR `DATA_SOURCE_LABEL_FR`, ds.LABEL_SP `DATA_SOURCE_LABEL_SP`, ds.LABEL_PR `DATA_SOURCE_LABEL_PR`, ");
SET @sqlString = CONCAT(@sqlString, "	it.INVENTORY_DATE, it.ADJUSTMENT_QTY*IF(rcpu.CONVERSION_METHOD IS NULL OR rcpu.CONVERSION_METHOD=1, rcpu.CONVERSION_NUMBER, IF(rcpu.CONVERSION_METHOD=2,1/rcpu.CONVERSION_NUMBER,0)) `STOCK_ADJUSTMENT_QTY`, lmb.USER_ID `LAST_MODIFIED_BY_USER_ID`, lmb.USERNAME `LAST_MODIFIED_BY_USERNAME`, it.LAST_MODIFIED_DATE, it.NOTES");
SET @sqlString = CONCAT(@sqlString, " FROM ");
SET @sqlString = CONCAT(@sqlString, "	( ");
SET @sqlString = CONCAT(@sqlString, "    SELECT ");
SET @sqlString = CONCAT(@sqlString, "		i.PROGRAM_ID, i.INVENTORY_ID, MAX(it.VERSION_ID) MAX_VERSION_ID ");
SET @sqlString = CONCAT(@sqlString, "	FROM rm_inventory i ");
SET @sqlString = CONCAT(@sqlString, "	LEFT JOIN rm_inventory_trans it ON i.INVENTORY_ID=it.INVENTORY_ID ");
SET @sqlString = CONCAT(@sqlString, "	WHERE i.PROGRAM_ID=@programId AND it.VERSION_ID<=@versionId AND it.INVENTORY_TRANS_ID IS NOT NULL ");
SET @sqlString = CONCAT(@sqlString, "	GROUP BY i.INVENTORY_ID ");
SET @sqlString = CONCAT(@sqlString, ") ti ");
SET @sqlString = CONCAT(@sqlString, "LEFT JOIN rm_inventory_trans it ON ti.INVENTORY_ID=it.INVENTORY_ID AND ti.MAX_VERSION_ID=it.VERSION_ID ");
SET @sqlString = CONCAT(@sqlString, "LEFT JOIN rm_inventory i ON ti.INVENTORY_ID=i.INVENTORY_ID ");
SET @sqlString = CONCAT(@sqlString, "LEFT JOIN vw_program p ON i.PROGRAM_ID=p.PROGRAM_ID ");
SET @sqlString = CONCAT(@sqlString, "LEFT JOIN rm_realm_country_planning_unit rcpu ON it.REALM_COUNTRY_PLANNING_UNIT_ID=rcpu.REALM_COUNTRY_PLANNING_UNIT_ID ");
SET @sqlString = CONCAT(@sqlString, "LEFT JOIN vw_planning_unit pu ON rcpu.PLANNING_UNIT_ID=pu.PLANNING_UNIT_ID ");
SET @sqlString = CONCAT(@sqlString, "LEFT JOIN rm_program_planning_unit ppu ON ppu.PLANNING_UNIT_ID=pu.PLANNING_UNIT_ID AND ppu.PROGRAM_ID=p.PROGRAM_ID ");
SET @sqlString = CONCAT(@sqlString, "LEFT JOIN vw_data_source ds ON it.DATA_SOURCE_ID=ds.DATA_SOURCE_ID ");
SET @sqlString = CONCAT(@sqlString, "LEFT JOIN us_user lmb ON it.LAST_MODIFIED_BY=lmb.USER_ID ");
SET @sqlString = CONCAT(@sqlString, "WHERE it.ADJUSTMENT_QTY IS NOT NULL AND LEFT(it.INVENTORY_DATE,7) BETWEEN @startDt AND @stopDt AND it.ACTIVE AND ppu.ACTIVE AND pu.ACTIVE ");
IF LENGTH(VAR_PLANNING_UNIT_IDS) >0 THEN
 	SET @sqlString = CONCAT(@sqlString, " AND pu.PLANNING_UNIT_ID IN (",VAR_PLANNING_UNIT_IDS,") ");
END IF;

PREPARE s2 FROM @sqlString;
EXECUTE s2;
END$$

DELIMITER ;
;

USE `fasp`;
DROP procedure IF EXISTS `getNotLinkedQatShipments`;

USE `fasp`;
DROP procedure IF EXISTS `fasp`.`getNotLinkedQatShipments`;
;

DELIMITER $$
USE `fasp`$$
CREATE DEFINER=`faspUser`@`%` PROCEDURE `getNotLinkedQatShipments`(VAR_PROGRAM_ID INT(10), VAR_VERSION_ID INT (10), VAR_PROCUREMENT_AGENT_ID INT (10),VAR_PLANNING_UNIT_IDS TEXT)
BEGIN
    SET @programId = VAR_PROGRAM_ID;
    SET @versionId = VAR_VERSION_ID;
    SET @procurementAgentId = VAR_PROCUREMENT_AGENT_ID;
    SET @shipmentActive = 1;
    SET @planningUnitActive = 1;
    SET @planningUnitIds = VAR_PLANNING_UNIT_IDS;
    SET @sql1 = "";	
    IF @versionId = -1 THEN
        SELECT MAX(pv.VERSION_ID) INTO @versionId FROM rm_program_version pv WHERE pv.PROGRAM_ID=@programId;
    END IF;
      
    SELECT 
        st.*, stbi.SHIPMENT_TRANS_BATCH_INFO_ID, stbi.BATCH_ID, bi.PLANNING_UNIT_ID `BATCH_PLANNING_UNIT_ID`, bi.BATCH_NO, bi.AUTO_GENERATED, bi.EXPIRY_DATE, bi.CREATED_DATE `BATCH_CREATED_DATE`, stbi.BATCH_SHIPMENT_QTY `BATCH_SHIPMENT_QTY` 
    FROM (
        SELECT
            s.SHIPMENT_ID, s.PARENT_SHIPMENT_ID,null as PARENT_LINKED_SHIPMENT_ID, st.EXPECTED_DELIVERY_DATE, st.PLANNED_DATE, st.SUBMITTED_DATE, st.APPROVED_DATE, st.SHIPPED_DATE, st.ARRIVED_DATE, st.RECEIVED_DATE, st.SHIPMENT_QTY, st.SHIPMENT_RCPU_QTY, pu.MULTIPLIER `CONVERSION_FACTOR`, st.RATE, st.PRODUCT_COST, st.FREIGHT_COST, st.SHIPMENT_MODE, s.SUGGESTED_QTY, st.ACCOUNT_FLAG, st.ERP_FLAG, st.ORDER_NO, st.PRIME_LINE_NO, st.VERSION_ID, st.NOTES, st.SHIPMENT_TRANS_ID, 
            p.PROGRAM_ID, p.LABEL_ID `PROGRAM_LABEL_ID`, p.LABEL_EN `PROGRAM_LABEL_EN`, p.LABEL_FR `PROGRAM_LABEL_FR`, p.LABEL_SP `PROGRAM_LABEL_SP`, p.LABEL_PR `PROGRAM_LABEL_PR`,
            pa.PROCUREMENT_AGENT_ID, pa.PROCUREMENT_AGENT_CODE, pa.`COLOR_HTML_CODE`, pa.LABEL_ID `PROCUREMENT_AGENT_LABEL_ID`, pa.LABEL_EN `PROCUREMENT_AGENT_LABEL_EN`, pa.LABEL_FR `PROCUREMENT_AGENT_LABEL_FR`, pa.LABEL_SP `PROCUREMENT_AGENT_LABEL_SP`, pa.LABEL_PR `PROCUREMENT_AGENT_LABEL_PR`,
            pu.PLANNING_UNIT_ID, pu.LABEL_ID `PLANNING_UNIT_LABEL_ID`, pu.LABEL_EN `PLANNING_UNIT_LABEL_EN`, pu.LABEL_FR `PLANNING_UNIT_LABEL_FR`, pu.LABEL_SP `PLANNING_UNIT_LABEL_SP`, pu.LABEL_PR `PLANNING_UNIT_LABEL_PR`,
            rcpu.REALM_COUNTRY_PLANNING_UNIT_ID as RCPU_ID, rcpu.LABEL_ID `RCPU_LABEL_ID`, rcpu.LABEL_EN `RCPU_LABEL_EN`, rcpu.LABEL_FR `RCPU_LABEL_FR`, rcpu.LABEL_SP `RCPU_LABEL_SP`, rcpu.LABEL_PR `RCPU_LABEL_PR`, IF(rcpu.CONVERSION_METHOD IS NULL OR rcpu.CONVERSION_METHOD=1, rcpu.CONVERSION_NUMBER, IF(rcpu.CONVERSION_METHOD=2,1/rcpu.CONVERSION_NUMBER,0)) `RCPU_MULTIPLIER`,
            fu.FORECASTING_UNIT_ID, fu.LABEL_ID `FORECASTING_UNIT_LABEL_ID`, fu.LABEL_EN `FORECASTING_UNIT_LABEL_EN`, fu.LABEL_FR `FORECASTING_UNIT_LABEL_FR`, fu.LABEL_SP `FORECASTING_UNIT_LABEL_SP`, fu.LABEL_PR `FORECASTING_UNIT_LABEL_PR`,
            pc.PRODUCT_CATEGORY_ID, pc.LABEL_ID `PRODUCT_CATEGORY_LABEL_ID`, pc.LABEL_EN `PRODUCT_CATEGORY_LABEL_EN`, pc.LABEL_FR `PRODUCT_CATEGORY_LABEL_FR`, pc.LABEL_SP `PRODUCT_CATEGORY_LABEL_SP`, pc.LABEL_PR `PRODUCT_CATEGORY_LABEL_PR`,
            pru.PROCUREMENT_UNIT_ID, pru.LABEL_ID `PROCUREMENT_UNIT_LABEL_ID`, pru.LABEL_EN `PROCUREMENT_UNIT_LABEL_EN`, pru.LABEL_FR `PROCUREMENT_UNIT_LABEL_FR`, pru.LABEL_SP `PROCUREMENT_UNIT_LABEL_SP`, pru.LABEL_PR `PROCUREMENT_UNIT_LABEL_PR`,
            su.SUPPLIER_ID, su.LABEL_ID `SUPPLIER_LABEL_ID`, su.LABEL_EN `SUPPLIER_LABEL_EN`, su.LABEL_FR `SUPPLIER_LABEL_FR`, su.LABEL_SP `SUPPLIER_LABEL_SP`, su.LABEL_PR `SUPPLIER_LABEL_PR`,
            shs.SHIPMENT_STATUS_ID, shs.LABEL_ID `SHIPMENT_STATUS_LABEL_ID`, shs.LABEL_EN `SHIPMENT_STATUS_LABEL_EN`, shs.LABEL_FR `SHIPMENT_STATUS_LABEL_FR`, shs.LABEL_SP `SHIPMENT_STATUS_LABEL_SP`, shs.LABEL_PR `SHIPMENT_STATUS_LABEL_PR`,
            ds.DATA_SOURCE_ID, ds.LABEL_ID `DATA_SOURCE_LABEL_ID`, ds.LABEL_EN `DATA_SOURCE_LABEL_EN`, ds.LABEL_FR `DATA_SOURCE_LABEL_FR`, ds.LABEL_SP `DATA_SOURCE_LABEL_SP`, ds.LABEL_PR `DATA_SOURCE_LABEL_PR`,
            sc.CURRENCY_ID `SHIPMENT_CURRENCY_ID`, sc.`CURRENCY_CODE` `SHIPMENT_CURRENCY_CODE`, s.CONVERSION_RATE_TO_USD `SHIPMENT_CONVERSION_RATE_TO_USD`, 
            sc.LABEL_ID `SHIPMENT_CURRENCY_LABEL_ID`, sc.LABEL_EN `SHIPMENT_CURRENCY_LABEL_EN`, sc.LABEL_FR `SHIPMENT_CURRENCY_LABEL_FR`, sc.LABEL_SP `SHIPMENT_CURRENCY_LABEL_SP`, sc.LABEL_PR `SHIPMENT_CURRENCY_LABEL_PR`,
            st.EMERGENCY_ORDER, st.LOCAL_PROCUREMENT, 
            cb.USER_ID `CB_USER_ID`, cb.USERNAME `CB_USERNAME`, s.CREATED_DATE, lmb.USER_ID `LMB_USER_ID`, lmb.USERNAME `LMB_USERNAME`, st.LAST_MODIFIED_DATE, st.ACTIVE,
            bc.CURRENCY_ID `BUDGET_CURRENCY_ID`, bc.CURRENCY_CODE `BUDGET_CURRENCY_CODE`, b.CONVERSION_RATE_TO_USD `BUDGET_CURRENCY_CONVERSION_RATE_TO_USD`, bc.LABEL_ID `BUDGET_CURRENCY_LABEL_ID`, bc.LABEL_EN `BUDGET_CURRENCY_LABEL_EN`, bc.LABEL_FR `BUDGET_CURRENCY_LABEL_FR`, bc.LABEL_SP `BUDGET_CURRENCY_LABEL_SP`, bc.LABEL_PR `BUDGET_CURRENCY_LABEL_PR`, 
            b.BUDGET_ID, b.BUDGET_CODE, b.LABEL_ID `BUDGET_LABEL_ID`, b.LABEL_EN `BUDGET_LABEL_EN`, b.LABEL_FR `BUDGET_LABEL_FR`, b.LABEL_SP `BUDGET_LABEL_SP`, b.LABEL_PR `BUDGET_LABEL_PR`,
            fs.FUNDING_SOURCE_ID, fs.FUNDING_SOURCE_CODE, fs.LABEL_ID `FUNDING_SOURCE_LABEL_ID`, fs.LABEL_EN `FUNDING_SOURCE_LABEL_EN`, fs.LABEL_FR `FUNDING_SOURCE_LABEL_FR`, fs.LABEL_SP `FUNDING_SOURCE_LABEL_SP`, fs.LABEL_PR `FUNDING_SOURCE_LABEL_PR`
        FROM (
            SELECT st.SHIPMENT_ID, MAX(st.VERSION_ID) MAX_VERSION_ID FROM rm_shipment s LEFT JOIN rm_shipment_trans st ON s.SHIPMENT_ID=st.SHIPMENT_ID WHERE (@versiONId=-1 OR st.VERSION_ID<=@versiONId) AND s.PROGRAM_ID=@programId GROUP BY st.SHIPMENT_ID
        ) ts 
        LEFT JOIN rm_shipment s ON ts.SHIPMENT_ID=s.SHIPMENT_ID
        LEFT JOIN rm_shipment_trans st ON ts.SHIPMENT_ID=st.SHIPMENT_ID AND ts.MAX_VERSION_ID=st.VERSION_ID
        LEFT JOIN vw_program p ON s.PROGRAM_ID=p.PROGRAM_ID
        LEFT JOIN vw_procurement_agent pa ON st.PROCUREMENT_AGENT_ID=pa.PROCUREMENT_AGENT_ID
        LEFT JOIN vw_planning_unit pu ON st.PLANNING_UNIT_ID=pu.PLANNING_UNIT_ID
        LEFT JOIN vw_realm_country_planning_unit rcpu ON st.REALM_COUNTRY_PLANNING_UNIT_ID=rcpu.REALM_COUNTRY_PLANNING_UNIT_ID
        LEFT JOIN vw_forecasting_unit fu ON pu.FORECASTING_UNIT_ID=fu.FORECASTING_UNIT_ID
        LEFT JOIN vw_product_category pc ON fu.PRODUCT_CATEGORY_ID=pc.PRODUCT_CATEGORY_ID
        LEFT JOIN vw_procurement_unit pru ON st.PROCUREMENT_UNIT_ID=pru.PROCUREMENT_UNIT_ID
        LEFT JOIN vw_supplier su ON st.SUPPLIER_ID=su.SUPPLIER_ID
        LEFT JOIN vw_shipment_status shs ON st.SHIPMENT_STATUS_ID=shs.SHIPMENT_STATUS_ID
        LEFT JOIN vw_data_source ds ON st.DATA_SOURCE_ID=ds.DATA_SOURCE_ID
        LEFT JOIN us_user cb ON s.CREATED_BY=cb.USER_ID
        LEFT JOIN us_user lmb ON st.LAST_MODIFIED_BY=lmb.USER_ID
        LEFT JOIN vw_currency sc ON s.CURRENCY_ID=sc.CURRENCY_ID
        LEFT JOIN vw_budget b ON st.BUDGET_ID=b.BUDGET_ID
        LEFT JOIN vw_currency bc ON b.CURRENCY_ID=bc.CURRENCY_ID
        LEFT JOIN vw_funding_source fs ON st.FUNDING_SOURCE_ID=fs.FUNDING_SOURCE_ID 
        WHERE 
			(@shipmentActive = FALSE OR st.ACTIVE) 
            AND (FIND_IN_SET(st.PLANNING_UNIT_ID, @planningUnitIds) OR @planningUnitIds='') 
            AND st.ERP_FLAG=0 
            AND st.ACCOUNT_FLAG 
            AND st.SHIPMENT_STATUS_ID IN (3,4,5,6,9,7)
            AND st.PROCUREMENT_AGENT_ID=@procurementAgentId
            AND IF(COALESCE(st.RECEIVED_DATE,st.EXPECTED_DELIVERY_DATE) < CURDATE() - INTERVAL 6 MONTH, st.SHIPMENT_STATUS_ID!=7 , st.SHIPMENT_STATUS_ID IN (3,4,5,6,9,7))
    ) st  
    LEFT JOIN rm_shipment_trans_batch_info stbi ON st.SHIPMENT_TRANS_ID = stbi.SHIPMENT_TRANS_ID
    LEFT JOIN rm_program_planning_unit ppu ON st.PLANNING_UNIT_ID=ppu.PLANNING_UNIT_ID AND ppu.PROGRAM_ID=@programId
    LEFT JOIN rm_batch_info bi ON stbi.BATCH_ID=bi.BATCH_ID
    WHERE (@planningUnitActive = FALSE OR ppu.ACTIVE) 
    ORDER BY st.PLANNING_UNIT_ID, COALESCE(st.RECEIVED_DATE, st.EXPECTED_DELIVERY_DATE), bi.EXPIRY_DATE, bi.BATCH_ID; 
END$$

DELIMITER ;
;

