CREATE DEFINER=`faspUser`@`localhost` PROCEDURE `getDashboardForecastError`(VAR_START_DATE DATE, VAR_STOP_DATE DATE, VAR_PROGRAM_ID INT)
BEGIN

    SET @daysOfStockOut=1;
    SELECT p.CURRENT_VERSION_ID INTO @varVersionId FROM vw_program p WHERE p.PROGRAM_ID = VAR_PROGRAM_ID;

    SELECT 
        pu.PLANNING_UNIT_ID, pu.LABEL_ID, pu.LABEL_EN, pu.LABEL_FR, pu.LABEL_SP, pu.LABEL_PR, 
        COUNT(c2.ADJUSTED_ACTUAL_CONSUMPTION) `NO_OF_MONTHS`, 
        AVG(ABS(c2.ADJUSTED_ACTUAL_CONSUMPTION-c2.FORECAST_CONSUMPTION)/c2.FORECAST_CONSUMPTION) `ERROR_PERC` 
    FROM (
        SELECT 
            p1.*, mn.MONTH, COUNT(c1.REGION_ID) `REGIONS_REPORTED_DATA`, 
            SUM(c1.`ADJUSTED_ACTUAL_CONSUMPTION`) `ADJUSTED_ACTUAL_CONSUMPTION`, SUM(c1.`FORECAST_CONSUMPTION`) `FORECAST_CONSUMPTION`
        FROM (
            SELECT pu.PLANNING_UNIT_ID, COUNT(pr.REGION_ID) COUNT_OF_REGION
            FROM vw_program p
            LEFT JOIN rm_program_planning_unit ppu ON p.PROGRAM_ID=ppu.PROGRAM_ID AND ppu.ACTIVE
            LEFT JOIN vw_planning_unit pu ON ppu.PLANNING_UNIT_ID=pu.PLANNING_UNIT_ID AND pu.ACTIVE 
            LEFT JOIN rm_program_region pr ON p.PROGRAM_ID=pr.PROGRAM_ID
            WHERE p.PROGRAM_ID=VAR_PROGRAM_ID AND pu.PLANNING_UNIT_ID IS NOT NULL
            GROUP BY pu.PLANNING_UNIT_ID
        ) p1 
        LEFT JOIN mn ON mn.MONTH BETWEEN VAR_START_DATE and VAR_STOP_DATE
        LEFT JOIN (
            SELECT 
                ct.CONSUMPTION_DATE, ct.PLANNING_UNIT_ID, ct.`REGION_ID`, SUM(IF(ct.`ACTUAL_FLAG`=1, ct.`DAYS_OF_STOCK_OUT`, null)) `DAYS_OF_STOCK_OUT`,
                SUM(IF(ct.`ACTUAL_FLAG`=1, IF(ct.`CONSUMPTION_QTY` is null, null, IF(@daysOfStockOut=1, DAY(LAST_DAY(ct.`CONSUMPTION_DATE`))/(DAY(LAST_DAY(ct.`CONSUMPTION_DATE`))-ct.`DAYS_OF_STOCK_OUT`)*ct.`CONSUMPTION_QTY`, ct.`CONSUMPTION_QTY`)), null)) `ADJUSTED_ACTUAL_CONSUMPTION`,
                SUM(IF(ct.`ACTUAL_FLAG`=0, ct.`CONSUMPTION_QTY`, null)) `FORECAST_CONSUMPTION`
            FROM (
                SELECT ct.CONSUMPTION_ID, MAX(ct.VERSION_ID) MAX_VERSION_ID FROM rm_consumption c LEFT JOIN rm_consumption_trans ct ON c.CONSUMPTION_ID=ct.CONSUMPTION_ID WHERE (@varVersionId=-1 OR ct.VERSION_ID<=@varVersionId) AND c.PROGRAM_ID=VAR_PROGRAM_ID GROUP BY ct.CONSUMPTION_ID
            ) tc
            LEFT JOIN rm_consumption cons ON tc.CONSUMPTION_ID=cons.`CONSUMPTION_ID`
            LEFT JOIN rm_consumption_trans ct ON cons.CONSUMPTION_ID=ct.CONSUMPTION_ID AND tc.MAX_VERSION_ID=ct.VERSION_ID
            LEFT JOIN rm_planning_unit pu ON ct.`PLANNING_UNIT_ID`=pu.`PLANNING_UNIT_ID`
            LEFT JOIN rm_program_planning_unit ppu ON ct.PLANNING_UNIT_ID=ppu.PLANNING_UNIT_ID AND ppu.PROGRAM_ID=VAR_PROGRAM_ID
            WHERE
                ct.CONSUMPTION_DATE BETWEEN VAR_START_DATE AND VAR_STOP_DATE AND ct.ACTIVE AND ppu.ACTIVE AND pu.ACTIVE
            GROUP BY ct.CONSUMPTION_DATE, ct.PLANNING_UNIT_ID, ct.`REGION_ID` 
            HAVING `ADJUSTED_ACTUAL_CONSUMPTION` IS NOT NULL AND `FORECAST_CONSUMPTION` IS NOT NULL AND `FORECAST_CONSUMPTION` != 0
        ) c1 ON mn.MONTH=c1.CONSUMPTION_DATE AND p1.PLANNING_UNIT_ID=c1.PLANNING_UNIT_ID
    GROUP BY p1.PLANNING_UNIT_ID, mn.MONTH
    ) c2
    LEFT JOIN vw_planning_unit pu ON c2.PLANNING_UNIT_ID=pu.PLANNING_UNIT_ID
    WHERE c2.ADJUSTED_ACTUAL_CONSUMPTION IS NOT NULL AND c2.FORECAST_CONSUMPTION IS NOT NULL AND c2.COUNT_OF_REGION=c2.REGIONS_REPORTED_DATA
    GROUP BY c2.PLANNING_UNIT_ID;
END