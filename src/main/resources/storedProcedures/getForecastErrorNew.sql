CREATE DEFINER=`faspUser`@`%` PROCEDURE `getForecastErrorNew`(VAR_PROGRAM_ID INT(10), VAR_START_DATE DATE, VAR_STOP_DATE DATE)
BEGIN 
    SET @programId = VAR_PROGRAM_ID; 
    SET @startDate = VAR_START_DATE;
    SET @stopDate = VAR_STOP_DATE;
    
    
    SELECT 
        mn.MONTH, pr.REGION_ID,
        r.REGION_ID, r.LABEL_ID, r.LABEL_EN, r.LABEL_FR, r.LABEL_SP, r.LABEL_PR,
        SUM(IF(mn.`MONTH`=c1.`CONSUMPTION_DATE`, c1.`ADJUSTED_ACTUAL_CONSUMPTION`, null)) `ADJUSTED_ACTUAL_CONSUMPTION`, 
        SUM(IF(mn.`MONTH`=c1.`CONSUMPTION_DATE`, c1.`FORECAST_CONSUMPTION`, null)) `FORECAST_CONSUMPTION`, 
        SUM(c1.`ADJUSTED_ACTUAL_CONSUMPTION`) `TOTAL_ADJUSTED_ACTUAL_CONSUMPTION`, 
        SUM(c1.`FORECAST_CONSUMPTION`) `TOTAL_FORECAST_CONSUMPTION`, 
        SUM(ABS(c1.`ADJUSTED_ACTUAL_CONSUMPTION`-c1.`FORECAST_CONSUMPTION`)) `TOTAL_ABS_DIFF_CONSUMPTION`,
        SUM(IF(mn.`MONTH`=c1.`CONSUMPTION_DATE`, c1.`DAYS_OF_STOCK_OUT`,null)) `DAYS_OF_STOCK_OUT`,
        n.`ADJUSTED_ACTUAL_CONSUMPTION` `NTL_ADJUSTED_ACTUAL_CONSUMPTION`,
        n.`FORECAST_CONSUMPTION` `NTL_FORECAST_CONSUMPTION`,
        n.`TOTAL_ADJUSTED_ACTUAL_CONSUMPTION` `NTL_TOTAL_ADJUSTED_ACTUAL_CONSUMPTION`,
        n.`TOTAL_FORECAST_CONSUMPTION` `NTL_TOTAL_FORECAST_CONSUMPTION`,
        n.`TOTAL_ABS_DIFF_CONSUMPTION` `NTL_TOTAL_ABS_DIFF_CONSUMPTION`
    FROM mn 
    LEFT JOIN vw_program p ON p.PROGRAM_ID=@programId
    LEFT JOIN rm_program_region pr ON pr.PROGRAM_ID=p.PROGRAM_ID AND (FIND_IN_SET(pr.REGION_ID, @regionIds) OR @regionIds='')
    LEFT JOIN vw_region r ON pr.REGION_ID=r.REGION_ID
    LEFT JOIN rm_realm_country rc ON p.REALM_COUNTRY_ID=rc.REALM_COUNTRY_ID
    LEFT JOIN 
        (
        SELECT 
            ct.CONSUMPTION_DATE, ct.`REGION_ID`, pu.MULTIPLIER, eum.CONVERT_TO_EU, SUM(IF(ct.`ACTUAL_FLAG`=1, ct.`DAYS_OF_STOCK_OUT`, null)) `DAYS_OF_STOCK_OUT`,
            SUM(IF(ct.`ACTUAL_FLAG`=1, IF(ct.`CONSUMPTION_QTY` is null, null, IF(@daysOfStockOut=1, DAY(LAST_DAY(ct.`CONSUMPTION_DATE`))/(DAY(LAST_DAY(ct.`CONSUMPTION_DATE`))-ct.`DAYS_OF_STOCK_OUT`)*ct.`CONSUMPTION_QTY`*IF(@equivalencyUnitId!=0, pu.MULTIPLIER/eum.CONVERT_TO_EU, IF(@viewBy=1, 1, pu.MULTIPLIER)), ct.`CONSUMPTION_QTY`*IF(@equivalencyUnitId!=0, pu.MULTIPLIER/eum.CONVERT_TO_EU, IF(@viewBy=1, 1, pu.MULTIPLIER)))), null)) `ADJUSTED_ACTUAL_CONSUMPTION`,
            SUM(IF(ct.`ACTUAL_FLAG`=0, ct.`CONSUMPTION_QTY`*IF(@equivalencyUnitId!=0, pu.MULTIPLIER/eum.CONVERT_TO_EU, IF(@viewBy=1, 1, pu.MULTIPLIER)), null)) `FORECAST_CONSUMPTION`
        FROM (
            SELECT ct.CONSUMPTION_ID, MAX(ct.VERSION_ID) MAX_VERSION_ID FROM rm_consumption c LEFT JOIN rm_consumption_trans ct ON c.CONSUMPTION_ID=ct.CONSUMPTION_ID WHERE (@versionId=-1 OR ct.VERSION_ID<=@versionId) AND c.PROGRAM_ID=@programId GROUP BY ct.CONSUMPTION_ID
        ) tc
        LEFT JOIN rm_consumption cons ON tc.CONSUMPTION_ID=cons.`CONSUMPTION_ID`
        LEFT JOIN rm_consumption_trans ct ON cons.CONSUMPTION_ID=ct.CONSUMPTION_ID AND tc.MAX_VERSION_ID=ct.VERSION_ID
        LEFT JOIN rm_planning_unit pu ON ct.`PLANNING_UNIT_ID`=pu.`PLANNING_UNIT_ID`
        LEFT JOIN rm_program_planning_unit ppu ON ct.PLANNING_UNIT_ID=ppu.PLANNING_UNIT_ID AND ppu.PROGRAM_ID=@programId
        LEFT JOIN vw_program p ON p.PROGRAM_ID=@programId
        LEFT JOIN rm_realm_country rc ON p.REALM_COUNTRY_ID=rc.REALM_COUNTRY_ID
        LEFT JOIN rm_equivalency_unit_mapping eum ON pu.FORECASTING_UNIT_ID=eum.FORECASTING_UNIT_ID AND eum.EQUIVALENCY_UNIT_ID=@equivalencyUnitId AND eum.REALM_ID=rc.REALM_ID AND (eum.PROGRAM_ID=@programId OR eum.PROGRAM_ID is NULL)
        WHERE
            ct.CONSUMPTION_DATE BETWEEN SUBDATE(@startDate, INTERVAL @previousMonths MONTH) AND @stopDate AND ct.ACTIVE AND ppu.ACTIVE
            AND (@regionIds='' OR FIND_IN_SET(ct.`REGION_ID`, @regionIds) )
            AND ((@viewBy=1 AND FIND_IN_SET(ct.PLANNING_UNIT_ID,@unitIds)) OR (@viewBy=2 AND FIND_IN_SET(pu.`FORECASTING_UNIT_ID`, @unitIds))) GROUP BY ct.CONSUMPTION_DATE, ct.`REGION_ID`
    ) AS c1 ON c1.CONSUMPTION_DATE BETWEEN SUBDATE(mn.MONTH, INTERVAL @previousMonths MONTH) AND mn.MONTH AND pr.REGION_ID=c1.REGION_ID
    LEFT JOIN (
        SELECT 
            mn.MONTH,
            SUM(IF(mn.`MONTH`=c1.`CONSUMPTION_DATE`, c1.`ADJUSTED_ACTUAL_CONSUMPTION`, null)) `ADJUSTED_ACTUAL_CONSUMPTION`, 
            SUM(IF(mn.`MONTH`=c1.`CONSUMPTION_DATE`, c1.`FORECAST_CONSUMPTION`, null)) `FORECAST_CONSUMPTION`, 
            SUM(c1.`ADJUSTED_ACTUAL_CONSUMPTION`) `TOTAL_ADJUSTED_ACTUAL_CONSUMPTION`, 
            SUM(c1.`FORECAST_CONSUMPTION`) `TOTAL_FORECAST_CONSUMPTION`, 
            SUM(ABS(c1.`ADJUSTED_ACTUAL_CONSUMPTION`-c1.`FORECAST_CONSUMPTION`)) `TOTAL_ABS_DIFF_CONSUMPTION`
        FROM mn 
        LEFT JOIN vw_program p ON p.PROGRAM_ID=@programId
        LEFT JOIN rm_program_region pr ON pr.PROGRAM_ID=p.PROGRAM_ID AND (FIND_IN_SET(pr.REGION_ID, @regionIds) OR @regionIds='')
        LEFT JOIN vw_region r ON pr.REGION_ID=r.REGION_ID
        LEFT JOIN rm_realm_country rc ON p.REALM_COUNTRY_ID=rc.REALM_COUNTRY_ID
        LEFT JOIN 
            (
            SELECT 
                ct.CONSUMPTION_DATE, ct.`REGION_ID`, pu.MULTIPLIER, eum.CONVERT_TO_EU,
                SUM(IF(ct.`ACTUAL_FLAG`=1, IF(ct.`CONSUMPTION_QTY` is null, null, IF(@daysOfStockOut=1, DAY(LAST_DAY(ct.`CONSUMPTION_DATE`))/(DAY(LAST_DAY(ct.`CONSUMPTION_DATE`))-ct.`DAYS_OF_STOCK_OUT`)*ct.`CONSUMPTION_QTY`*IF(@equivalencyUnitId!=0, pu.MULTIPLIER/eum.CONVERT_TO_EU, IF(@viewBy=1, 1, pu.MULTIPLIER)), ct.`CONSUMPTION_QTY`*IF(@equivalencyUnitId!=0, pu.MULTIPLIER/eum.CONVERT_TO_EU, IF(@viewBy=1, 1, pu.MULTIPLIER)))), null)) `ADJUSTED_ACTUAL_CONSUMPTION`,
                SUM(IF(ct.`ACTUAL_FLAG`=0, ct.`CONSUMPTION_QTY`*IF(@equivalencyUnitId!=0, pu.MULTIPLIER/eum.CONVERT_TO_EU, IF(@viewBy=1, 1, pu.MULTIPLIER)), null)) `FORECAST_CONSUMPTION`
            FROM (
                SELECT ct.CONSUMPTION_ID, MAX(ct.VERSION_ID) MAX_VERSION_ID FROM rm_consumption c LEFT JOIN rm_consumption_trans ct ON c.CONSUMPTION_ID=ct.CONSUMPTION_ID WHERE (@versionId=-1 OR ct.VERSION_ID<=@versionId) AND c.PROGRAM_ID=@programId GROUP BY ct.CONSUMPTION_ID
            ) tc
            LEFT JOIN rm_consumption cons ON tc.CONSUMPTION_ID=cons.`CONSUMPTION_ID`
            LEFT JOIN rm_consumption_trans ct ON cons.CONSUMPTION_ID=ct.CONSUMPTION_ID AND tc.MAX_VERSION_ID=ct.VERSION_ID
            LEFT JOIN rm_planning_unit pu ON ct.`PLANNING_UNIT_ID`=pu.`PLANNING_UNIT_ID`
            LEFT JOIN rm_program_planning_unit ppu ON ct.PLANNING_UNIT_ID=ppu.PLANNING_UNIT_ID AND ppu.PROGRAM_ID=@programId
            LEFT JOIN vw_program p ON p.PROGRAM_ID=@programId
            LEFT JOIN rm_realm_country rc ON p.REALM_COUNTRY_ID=rc.REALM_COUNTRY_ID
            LEFT JOIN rm_equivalency_unit_mapping eum ON pu.FORECASTING_UNIT_ID=eum.FORECASTING_UNIT_ID AND eum.EQUIVALENCY_UNIT_ID=@equivalencyUnitId AND eum.REALM_ID=rc.REALM_ID AND (eum.PROGRAM_ID=@programId OR eum.PROGRAM_ID is NULL)
            WHERE
                ct.CONSUMPTION_DATE BETWEEN SUBDATE(@startDate, INTERVAL @previousMonths MONTH) AND @stopDate AND ct.ACTIVE AND ppu.ACTIVE
                AND (@regionIds='' OR FIND_IN_SET(ct.`REGION_ID`, @regionIds) )
                AND ((@viewBy=1 AND FIND_IN_SET(ct.PLANNING_UNIT_ID,@unitIds)) OR (@viewBy=2 AND FIND_IN_SET(pu.`FORECASTING_UNIT_ID`, @unitIds))) GROUP BY ct.CONSUMPTION_DATE, ct.`REGION_ID`
        ) AS c1 ON c1.CONSUMPTION_DATE BETWEEN SUBDATE(mn.MONTH, INTERVAL @previousMonths MONTH) AND mn.MONTH AND pr.REGION_ID=c1.REGION_ID
        WHERE mn.MONTH BETWEEN @startDate AND @stopDate
        GROUP BY mn.MONTH
    ) n ON mn.MONTH=n.MONTH
    WHERE mn.MONTH BETWEEN @startDate AND @stopDate
    GROUP BY mn.MONTH, pr.REGION_ID;
END