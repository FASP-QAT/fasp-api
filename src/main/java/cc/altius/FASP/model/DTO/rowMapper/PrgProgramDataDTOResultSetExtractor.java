/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cc.altius.FASP.model.DTO.rowMapper;

import cc.altius.FASP.model.DTO.PrgBudgetDTO;
import cc.altius.FASP.model.DTO.PrgConsumptionDTO;
import cc.altius.FASP.model.DTO.PrgCountryDTO;
import cc.altius.FASP.model.DTO.PrgCurrencyDTO;
import cc.altius.FASP.model.DTO.PrgDataSourceDTO;
import cc.altius.FASP.model.DTO.PrgDataSourceTypeDTO;
import cc.altius.FASP.model.DTO.PrgFundingSourceDTO;
import cc.altius.FASP.model.DTO.PrgHealthAreaDTO;
import cc.altius.FASP.model.DTO.PrgInventoryDTO;
import cc.altius.FASP.model.DTO.PrgLabelDTO;
import cc.altius.FASP.model.DTO.PrgLanguageDTO;
import cc.altius.FASP.model.DTO.PrgLogisticsUnitDTO;
import cc.altius.FASP.model.DTO.PrgManufacturerDTO;
import cc.altius.FASP.model.DTO.PrgOrganisationDTO;
import cc.altius.FASP.model.DTO.PrgPlanningUnitDTO;
import cc.altius.FASP.model.DTO.PrgProcurementAgentDTO;
import cc.altius.FASP.model.DTO.PrgProcurementAgentLogisiticsUnitDTO;
import cc.altius.FASP.model.DTO.PrgProductCategoryDTO;
import cc.altius.FASP.model.DTO.PrgProductDTO;
import cc.altius.FASP.model.DTO.PrgProgramDataDTO;
import cc.altius.FASP.model.DTO.PrgProgramProductDTO;
import cc.altius.FASP.model.DTO.PrgRealmCountryDTO;
import cc.altius.FASP.model.DTO.PrgRealmDTO;
import cc.altius.FASP.model.DTO.PrgRegionDTO;
import cc.altius.FASP.model.DTO.PrgShipmentBudgetDTO;
import cc.altius.FASP.model.DTO.PrgShipmentDTO;
import cc.altius.FASP.model.DTO.PrgShipmentStatusDTO;
import cc.altius.FASP.model.DTO.PrgSubFundingSourceDTO;
import cc.altius.FASP.model.DTO.PrgUnitDTO;
import cc.altius.FASP.model.DTO.PrgUnitTypeDTO;
import cc.altius.FASP.model.User;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.LinkedList;
import java.util.List;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.ResultSetExtractor;

/**
 *
 * @author altius
 */
public class PrgProgramDataDTOResultSetExtractor implements ResultSetExtractor<List<PrgProgramDataDTO>> {

    @Override
    public List<PrgProgramDataDTO> extractData(ResultSet rs) throws SQLException, DataAccessException {
        PrgProgramDataDTO programData;
        PrgProgramProductDTO programProduct;
        PrgRegionDTO region;
        PrgBudgetDTO budget;
        List<PrgProgramDataDTO> programDataList = new LinkedList<PrgProgramDataDTO>();
        while (rs.next()) {
            programData = new PrgProgramDataDTO();
            programData.setProgramId(rs.getInt("PROGRAM_ID"));
            if (programDataList.indexOf(programData) == -1) {
                programData.setAirFreightPerc(rs.getDouble("AIR_FREIGHT_PERC"));
                programData.setApprovedToShippedLeadTime(rs.getInt("APPROVED_TO_SHIPPED_LEAD_TIME"));
                programData.setDeliveredToReceivedLeadTime(rs.getInt("DELIVERED_TO_RECEIVED_LEAD_TIME"));
                programData.setDraftToSubmittedLeadTime(rs.getInt("DRAFT_TO_SUBMITTED_LEAD_TIME"));

                PrgHealthAreaDTO healthArea = new PrgHealthAreaDTO();
                healthArea.setHealthAreaId(rs.getInt("HEALTH_AREA_ID"));
                PrgLabelDTO healthAreaLabel = new PrgLabelDTO();
                healthAreaLabel.setLabelEn("HEALTH_AREA_NAME_EN");
                healthAreaLabel.setLabelFr("HEALTH_AREA_NAME_FR");
                healthAreaLabel.setLabelPr("HEALTH_AREA_NAME_PR");
                healthAreaLabel.setLabelSp("HEALTH_AREA_NAME_SP");
                healthArea.setLabel(healthAreaLabel);
                programData.setHealthArea(healthArea);

                PrgLabelDTO programLabel = new PrgLabelDTO();
                programLabel.setLabelEn("PROGRAM_NAME_EN");
                programLabel.setLabelFr("PROGRAM_NAME_FR");
                programLabel.setLabelPr("PROGRAM_NAME_PR");
                programLabel.setLabelSp("PROGRAM_NAME_SP");
                programData.setLabel(programLabel);

                User lastModifiedBy = new User();
                lastModifiedBy.setUserId(rs.getInt("LAST_MODIFIED_BY"));
                lastModifiedBy.setUsername(rs.getString("LAST_MODIFIED_BY_USERNAME"));
                programData.setLastModifiedBy(lastModifiedBy);

                programData.setLastModifiedDate(rs.getTimestamp("LAST_MODIFIED_DATE"));
                programData.setMonthsInFutureForAMC(rs.getInt("MONTHS_IN_FUTURE_FOR_AMC"));
                programData.setMonthsInPastForAMC(rs.getInt("MONTHS_IN_PAST_FOR_AMC"));

                PrgOrganisationDTO organisation = new PrgOrganisationDTO();
                PrgLabelDTO organisationLabel = new PrgLabelDTO();
                organisationLabel.setLabelEn(rs.getString("ORGANISATION_NAME_EN"));
                organisationLabel.setLabelFr(rs.getString("ORGANISATION_NAME_FR"));
                organisationLabel.setLabelPr(rs.getString("ORGANISATION_NAME_PR"));
                organisationLabel.setLabelSp(rs.getString("ORGANISATION_NAME_SP"));
                organisation.setLabel(organisationLabel);
                organisation.setOrganisationId(rs.getInt("ORGANISATION_ID"));
                programData.setOrganisation(organisation);

                programData.setPlanToDraftLeadTime(rs.getInt("PLAN_TO_DRAFT_LEAD_TIME"));

                User programManager = new User();
                programManager.setUserId(rs.getInt("PROGRAM_MANAGER_USER_ID"));
                programManager.setUsername(rs.getString("PROGRAM_MANAGER_USERNAME"));
                programData.setProgramManagerUser(programManager);

                programData.setProgramNotes(rs.getString("PROGRAM_NOTES"));

                PrgRealmCountryDTO realmCountry = new PrgRealmCountryDTO();
                realmCountry.setAirFreightPerc(rs.getDouble("REALM_COUNTRY_AIR_FREIGHT_PERC"));
                realmCountry.setArrivedToDeliveredLeadTime(rs.getInt("ARRIVED_TO_DELIVERED_LEAD_TIME"));

                PrgCountryDTO country = new PrgCountryDTO();
                country.setCountryId(rs.getInt("COUNTRY_ID"));

                PrgCurrencyDTO currency = new PrgCurrencyDTO();
                currency.setConversionRateToUsd(rs.getDouble("CONVERSION_RATE_TO_USD"));
                currency.setCurrencyCode(rs.getString("CURRENCY_CODE"));
                currency.setCurrencyId(rs.getInt("CURRENCY_ID"));
                currency.setCurrencySymbol(rs.getString("CURRENCY_SYMBOL"));

                PrgLabelDTO currencyLabel = new PrgLabelDTO();
                currencyLabel.setLabelEn("CURRENCY_NAME_EN");
                currencyLabel.setLabelFr("CURRENCY_NAME_FR");
                currencyLabel.setLabelPr("CURRENCY_NAME_PR");
                currencyLabel.setLabelSp("CURRENCY_NAME_SP");
                currency.setLabel(currencyLabel);
                country.setCurrency(currency);

                PrgLabelDTO countryLabel = new PrgLabelDTO();
                countryLabel.setLabelEn(rs.getString("COUNTRY_NAME_EN"));
                countryLabel.setLabelFr(rs.getString("COUNTRY_NAME_FR"));
                countryLabel.setLabelPr(rs.getString("COUNTRY_NAME_PR"));
                countryLabel.setLabelSp(rs.getString("COUNTRY_NAME_SP"));
                country.setLabel(countryLabel);
                PrgLanguageDTO language = new PrgLanguageDTO();
                language.setLanguageId(rs.getInt("LANGUAGE_ID"));
                language.setLanguageName(rs.getString("LANGUAGE_NAME"));
                country.setLanguage(language);
                realmCountry.setCountry(country);

                PrgCurrencyDTO defaultCurrency = new PrgCurrencyDTO();
                defaultCurrency.setConversionRateToUsd(rs.getDouble("DEFAULT_CONVERSION_RATE_TO_USD"));
                defaultCurrency.setCurrencyCode(rs.getString("DEFAULT_CURRENCY_CODE"));
                defaultCurrency.setCurrencyId(rs.getInt("DEFAULT_CURRENCY_ID"));
                defaultCurrency.setCurrencySymbol(rs.getString("DEFAULT_CURRENCY_SYMBOL"));

                PrgLabelDTO defaultCurrencyLabel = new PrgLabelDTO();
                defaultCurrencyLabel.setLabelEn("DEFAULT_CURRENCY_NAME_EN");
                defaultCurrencyLabel.setLabelFr("DEFAULT_CURRENCY_NAME_FR");
                defaultCurrencyLabel.setLabelPr("DEFAULT_CURRENCY_NAME_PR");
                defaultCurrencyLabel.setLabelSp("DEFAULT_CURRENCY_NAME_SP");
                defaultCurrency.setLabel(defaultCurrencyLabel);
                realmCountry.setDefaultCurrency(defaultCurrency);

                PrgUnitDTO palletUnit = new PrgUnitDTO();
                PrgLabelDTO palletUnitLabel = new PrgLabelDTO();
                palletUnitLabel.setLabelEn(rs.getString("PALLET_UNIT_EN"));
                palletUnitLabel.setLabelFr(rs.getString("PALLET_UNIT_FR"));
                palletUnitLabel.setLabelPr(rs.getString("PALLET_UNIT_PR"));
                palletUnitLabel.setLabelSp(rs.getString("PALLET_UNIT_SP"));
                palletUnit.setLabel(palletUnitLabel);
                palletUnit.setUnitCode(rs.getString("PALLET_UNIT_CODE"));
                palletUnit.setUnitId(rs.getInt("PALLET_UNIT_ID"));

                PrgUnitTypeDTO palletUnitType = new PrgUnitTypeDTO();
                PrgLabelDTO palletUnitTypeLabel = new PrgLabelDTO();
                palletUnitTypeLabel.setLabelEn(rs.getString("PALLET_UNIT_TYPE_NAME_EN"));
                palletUnitTypeLabel.setLabelFr(rs.getString("PALLET_UNIT_TYPE_NAME_FR"));
                palletUnitTypeLabel.setLabelPr(rs.getString("PALLET_UNIT_TYPE_NAME_PR"));
                palletUnitTypeLabel.setLabelSp(rs.getString("PALLET_UNIT_TYPE_NAME_SP"));
                palletUnitType.setLabel(palletUnitTypeLabel);
                palletUnitType.setUnitTypeId(rs.getInt("PALLET_UNIT_TYPE_ID"));
                palletUnit.setUnitType(palletUnitType);
                realmCountry.setPalletUnit(palletUnit);

                PrgRealmDTO realm = new PrgRealmDTO();
                realm.setDefaultRealm(rs.getBoolean("DEFAULT_REALM"));
                PrgLabelDTO realmLabel = new PrgLabelDTO();
                realmLabel.setLabelEn(rs.getString("REALM_NAME_EN"));
                realmLabel.setLabelFr(rs.getString("REALM_NAME_FR"));
                realmLabel.setLabelPr(rs.getString("REALM_NAME_PR"));
                realmLabel.setLabelSp(rs.getString("REALM_NAME_SP"));
                realm.setLabel(realmLabel);
                realm.setMonthsInFutureForAMC(rs.getInt("MONTHS_IN_FUTURE_FOR_AMC_REALM"));
                realm.setMonthsInPastForAMC(rs.getInt("MONTHS_IN_PAST_FOR_AMC_REALM"));
                realm.setOrderFrequency(rs.getInt("ORDER_FREQUENCY"));
                realm.setRealmCode(rs.getString("REALM_CODE"));
                realm.setRealmId(rs.getInt("REALM_ID"));
                realmCountry.setRealm(realm);
                realmCountry.setRealmCountryId(rs.getInt("REALM_COUNTRY_ID"));
                realmCountry.setSeaFreightPerc(rs.getDouble("REALM_COUNTRY_SEA_FREIGHT_PREC"));
                realmCountry.setShippedToArrivedAirLeadTime(rs.getInt("SHIPPED_TO_ARRIVED_AIR_LEAD_TIME"));
                realmCountry.setShippedToArrivedSeaLeadTime(rs.getInt("SHIPPED_TO_ARRIVED_SEA_LEAD_TIME"));

                programData.setRealmCountry(realmCountry);
                programData.setSeaFreightPerc(rs.getDouble("SEA_FREIGHT_PERC"));
                programData.setSubmittedToApprovedLeadTime(rs.getInt("SUBMITTED_TO_APPROVED_LEAD_TIME"));
                programDataList.add(programData);
            }
            programData = programDataList.get(programDataList.indexOf(programData));

            region = new PrgRegionDTO();
            region.setRegionId(rs.getInt("REGION_ID"));
            if (programData.getRegionList().indexOf(region) == -1) {
                region.setCapacityCbm(rs.getDouble("CAPACITY_CBM"));
                PrgLabelDTO regionLabel = new PrgLabelDTO();
                regionLabel.setLabelEn(rs.getString("REGION_NAME_EN"));
                regionLabel.setLabelFr(rs.getString("REGION_NAME_FR"));
                regionLabel.setLabelPr(rs.getString("REGION_NAME_PR"));
                regionLabel.setLabelSp(rs.getString("REGION_NAME_SP"));
                region.setLabel(regionLabel);
                programData.getRegionList().add(region);
            }

            budget = new PrgBudgetDTO();
            budget.setBudgetId(rs.getInt("BUDGET_ID"));
            if (programData.getBudgetData().indexOf(budget) == -1) {
                budget.setBudgetAmount(rs.getDouble("BUDGET_AMOUNT"));
                PrgLabelDTO budgetLabel = new PrgLabelDTO();
                budgetLabel.setLabelEn(rs.getString("BUDGET_NAME_EN"));
                budgetLabel.setLabelFr(rs.getString("BUDGET_NAME_FR"));
                budgetLabel.setLabelPr(rs.getString("BUDGET_NAME_PR"));
                budgetLabel.setLabelSp(rs.getString("BUDGET_NAME_SP"));
                budget.setLabel(budgetLabel);
                budget.setStartDate(rs.getDate("BUDGET_START_DATE"));
                budget.setStopDate(rs.getDate("BUDGET_STOP_DATE"));

                PrgSubFundingSourceDTO subFundingSource = new PrgSubFundingSourceDTO();
                PrgFundingSourceDTO fundingSource = new PrgFundingSourceDTO();
                fundingSource.setFundingSourceId(rs.getInt("FUNDING_SOURCE_ID"));
                PrgLabelDTO fundingSourceLabel = new PrgLabelDTO();
                fundingSourceLabel.setLabelEn(rs.getString("FUNDING_SOURCE_NAME_EN"));
                fundingSourceLabel.setLabelFr(rs.getString("FUNDING_SOURCE_NAME_FR"));
                fundingSourceLabel.setLabelPr(rs.getString("FUNDING_SOURCE_NAME_PR"));
                fundingSourceLabel.setLabelSp(rs.getString("FUNDING_SOURCE_NAME_SP"));
                fundingSource.setLabel(fundingSourceLabel);
                subFundingSource.setFundingSource(fundingSource);
                PrgLabelDTO subFundingSourceLabel = new PrgLabelDTO();
                subFundingSourceLabel.setLabelEn(rs.getString("SUB_FUNDING_SOURCE_NAME_EN"));
                subFundingSourceLabel.setLabelFr(rs.getString("SUB_FUNDING_SOURCE_NAME_FR"));
                subFundingSourceLabel.setLabelPr(rs.getString("SUB_FUNDING_SOURCE_NAME_PR"));
                subFundingSourceLabel.setLabelSp(rs.getString("SUB_FUNDING_SOURCE_NAME_SP"));
                subFundingSource.setLabel(subFundingSourceLabel);
                subFundingSource.setSubFundingSourceId(rs.getInt("SUB_FUNDING_SOURCE_ID"));
                budget.setSubFundingSource(subFundingSource);
                programData.getBudgetData().add(budget);
            }

            programProduct = new PrgProgramProductDTO();
            programProduct.setProgramProductId(rs.getInt("PROGRAM_PRODUCT_ID"));
            if (programData.getProgramProductList().indexOf(programProduct) == -1) {
                programProduct.setMaxMonths(rs.getInt("MAX_MONTHS"));
                programProduct.setMinMonths(rs.getInt("MIN_MONTHS"));
                PrgProductDTO product = new PrgProductDTO();
                product.setProductId(rs.getInt("PRODUCT_ID"));
                PrgUnitDTO forecastUnit = new PrgUnitDTO();
                PrgLabelDTO forecastUnitLabel = new PrgLabelDTO();
                forecastUnitLabel.setLabelEn(rs.getString("FORECAST_UNIT_NAME_EN"));
                forecastUnitLabel.setLabelFr(rs.getString("FORECAST_UNIT_NAME_FR"));
                forecastUnitLabel.setLabelPr(rs.getString("FORECAST_UNIT_NAME_PR"));
                forecastUnitLabel.setLabelSp(rs.getString("FORECAST_UNIT_NAME_SP"));
                forecastUnit.setLabel(forecastUnitLabel);
                forecastUnit.setUnitCode(rs.getString("FORECAST_UNIT_CODE"));
                forecastUnit.setUnitId(rs.getInt("FORECAST_UNIT_ID"));
                PrgUnitTypeDTO forecastUnitType = new PrgUnitTypeDTO();
                PrgLabelDTO forecastUnitTypeLabel = new PrgLabelDTO();
                forecastUnitTypeLabel.setLabelEn(rs.getString("FORECAST_UNIT_TYPE_NAME_EN"));
                forecastUnitTypeLabel.setLabelFr(rs.getString("FORECAST_UNIT_TYPE_NAME_FR"));
                forecastUnitTypeLabel.setLabelPr(rs.getString("FORECAST_UNIT_TYPE_NAME_PR"));
                forecastUnitTypeLabel.setLabelSp(rs.getString("FORECAST_UNIT_TYPE_NAME_SP"));
                forecastUnitType.setLabel(forecastUnitTypeLabel);
                forecastUnitType.setUnitTypeId(rs.getInt("FORECAST_UNIT_TYPE_ID"));
                forecastUnit.setUnitType(forecastUnitType);
                product.setForecastUnit(forecastUnit);
                PrgLabelDTO genericLabel = new PrgLabelDTO();
                genericLabel.setLabelEn(rs.getString("GENERIC_LABEL_EN"));
                genericLabel.setLabelFr(rs.getString("GENERIC_LABEL_FR"));
                genericLabel.setLabelPr(rs.getString("GENERIC_LABEL_PR"));
                genericLabel.setLabelSp(rs.getString("GENERIC_LABEL_SP"));
                product.setGenericLabel(genericLabel);
                PrgLabelDTO productLabel = new PrgLabelDTO();
                productLabel.setLabelEn(rs.getString("PRODUCT_NAME_EN"));
                productLabel.setLabelFr(rs.getString("PRODUCT_NAME_FR"));
                productLabel.setLabelPr(rs.getString("PRODUCT_NAME_PR"));
                productLabel.setLabelSp(rs.getString("PRODUCT_NAME_SP"));
                product.setLabel(productLabel);
                PrgProductCategoryDTO productCategory = new PrgProductCategoryDTO();
                PrgLabelDTO productCategoryLabel = new PrgLabelDTO();
                productCategoryLabel.setLabelEn(rs.getString("PRODUCT_CATEGORY_NAME_EN"));
                productCategoryLabel.setLabelFr(rs.getString("PRODUCT_CATEGORY_NAME_FR"));
                productCategoryLabel.setLabelPr(rs.getString("PRODUCT_CATEGORY_NAME_PR"));
                productCategoryLabel.setLabelSp(rs.getString("PRODUCT_CATEGORY_NAME_SP"));
                productCategory.setLabel(productCategoryLabel);
                productCategory.setProductCategoryId(rs.getInt("PRODUCT_CATEGORY_ID"));
                product.setProductCategory(productCategory);
                PrgInventoryDTO inventory;
                List<PrgInventoryDTO> inventoryList = new LinkedList<PrgInventoryDTO>();
                PrgConsumptionDTO consumption;
                List<PrgConsumptionDTO> consumptionList = new LinkedList<PrgConsumptionDTO>();
                PrgShipmentDTO shipment;
                List<PrgShipmentDTO> shipmentList = new LinkedList<PrgShipmentDTO>();
                while (rs.next()) {
                    inventory = new PrgInventoryDTO();
                    inventory.setInventoryId(rs.getInt("INVENTORY_ID"));
                    if (inventoryList.indexOf(inventory) == -1) {
                        inventory.setActualQty(rs.getDouble("ACTUAL_QTY"));
                        inventory.setAdjustmentQty(rs.getDouble("ADJUSTMENT_QTY"));
                        inventory.setBatchNo(rs.getString("BATCH_NO"));
                        PrgDataSourceDTO dataSource = new PrgDataSourceDTO();
                        dataSource.setDataSourceId(rs.getInt("DATA_SOURCE_ID"));
                        PrgDataSourceTypeDTO dataSourceType = new PrgDataSourceTypeDTO();
                        dataSourceType.setDataSourceTypeId(rs.getInt("DATA_SOURCE_TYPE_ID"));
                        PrgLabelDTO dataSourceTypeLabel = new PrgLabelDTO();
                        dataSourceTypeLabel.setLabelEn(rs.getString("DATA_SOURCE_TYPE_NAME_EN"));
                        dataSourceTypeLabel.setLabelPr(rs.getString("DATA_SOURCE_TYPE_NAME_PR"));
                        dataSourceTypeLabel.setLabelFr(rs.getString("DATA_SOURCE_TYPE_NAME_FR"));
                        dataSourceTypeLabel.setLabelSp(rs.getString("DATA_SOURCE_TYPE_NAME_SP"));
                        dataSourceType.setLabel(dataSourceTypeLabel);
                        dataSource.setDataSourceType(dataSourceType);
                        PrgLabelDTO dataSourceLabel = new PrgLabelDTO();
                        dataSourceLabel.setLabelEn(rs.getString("DATA_SOURCE_NAME_EN"));
                        dataSourceLabel.setLabelPr(rs.getString("DATA_SOURCE_NAME_PR"));
                        dataSourceLabel.setLabelFr(rs.getString("DATA_SOURCE_NAME_FR"));
                        dataSourceLabel.setLabelSp(rs.getString("DATA_SOURCE_NAME_SP"));
                        dataSource.setLabel(dataSourceLabel);
                        inventory.setDataSource(dataSource);
                        inventory.setExpiryDate(rs.getDate("EXPIRY_DATE"));
                        PrgLogisticsUnitDTO inventoryLogisticsUnit = new PrgLogisticsUnitDTO();
                        inventoryLogisticsUnit.setHeightQty(rs.getDouble("INVENTORY_HEIGHT_QTY"));
                        PrgUnitDTO inventoryHeightUnit = new PrgUnitDTO();
                        PrgLabelDTO inventoryHeightUnitLabel = new PrgLabelDTO();
                        inventoryHeightUnitLabel.setLabelEn(rs.getString("INVENTORY_HEIGHT_UNIT_NAME_EN"));
                        inventoryHeightUnitLabel.setLabelFr(rs.getString("INVENTORY_HEIGHT_UNIT_NAME_FR"));
                        inventoryHeightUnitLabel.setLabelPr(rs.getString("INVENTORY_HEIGHT_UNIT_NAME_PR"));
                        inventoryHeightUnitLabel.setLabelSp(rs.getString("INVENTORY_HEIGHT_UNIT_NAME_SP"));
                        inventoryHeightUnit.setLabel(inventoryHeightUnitLabel);
                        inventoryHeightUnit.setUnitCode(rs.getString("INVENTORY_HEIGHT_UNIT_CODE"));
                        inventoryHeightUnit.setUnitId(rs.getInt("INVENTORY_HEIGHT_UNIT_ID"));
                        PrgUnitTypeDTO inventoryHeightUnitType = new PrgUnitTypeDTO();
                        PrgLabelDTO inventoryHeightUnitTypeLabel = new PrgLabelDTO();
                        inventoryHeightUnitTypeLabel.setLabelEn(rs.getString("INVENTORY_HEIGHT_UNIT_TYPE_NAME_EN"));
                        inventoryHeightUnitTypeLabel.setLabelFr(rs.getString("INVENTORY_HEIGHT_UNIT_TYPE_NAME_FR"));
                        inventoryHeightUnitTypeLabel.setLabelPr(rs.getString("INVENTORY_HEIGHT_UNIT_TYPE_NAME_PR"));
                        inventoryHeightUnitTypeLabel.setLabelSp(rs.getString("INVENTORY_HEIGHT_UNIT_TYPE_NAME_SP"));
                        inventoryHeightUnitType.setLabel(inventoryHeightUnitTypeLabel);
                        inventoryHeightUnitType.setUnitTypeId(rs.getInt("INVENTORY_HEIGHT_UNIT_TYPE_ID"));
                        inventoryHeightUnit.setUnitType(inventoryHeightUnitType);
                        inventoryLogisticsUnit.setHeightUnit(inventoryHeightUnit);
                        PrgLabelDTO inventoryLogisticsUnitLabel = new PrgLabelDTO();
                        inventoryLogisticsUnitLabel.setLabelEn(rs.getString("INVENTORY_LOGISTICS_UNIT_NAME_EN"));
                        inventoryLogisticsUnitLabel.setLabelFr(rs.getString("INVENTORY_LOGISTICS_UNIT_NAME_FR"));
                        inventoryLogisticsUnitLabel.setLabelPr(rs.getString("INVENTORY_LOGISTICS_UNIT_NAME_PR"));
                        inventoryLogisticsUnitLabel.setLabelSp(rs.getString("INVENTORY_LOGISTICS_UNIT_NAME_SP"));
                        inventoryLogisticsUnit.setLabel(inventoryLogisticsUnitLabel);
                        inventoryLogisticsUnit.setLengthQty(rs.getInt("INVENTORY_LENGTH_QTY"));

                        PrgUnitDTO inventoryLengthUnit = new PrgUnitDTO();
                        PrgLabelDTO inventoryLengthUnitLabel = new PrgLabelDTO();
                        inventoryLengthUnitLabel.setLabelEn(rs.getString("INVENTORY_LENGTH_UNIT_NAME_EN"));
                        inventoryLengthUnitLabel.setLabelFr(rs.getString("INVENTORY_LENGTH_UNIT_NAME_FR"));
                        inventoryLengthUnitLabel.setLabelPr(rs.getString("INVENTORY_LENGTH_UNIT_NAME_PR"));
                        inventoryLengthUnitLabel.setLabelSp(rs.getString("INVENTORY_LENGTH_UNIT_NAME_SP"));
                        inventoryLengthUnit.setLabel(inventoryLengthUnitLabel);
                        inventoryLengthUnit.setUnitCode(rs.getString("INVENTORY_LENGTH_UNIT_CODE"));
                        inventoryLengthUnit.setUnitId(rs.getInt("INVENTORY_LENGTH_UNIT_ID"));
                        PrgUnitTypeDTO inventoryLengthUnitType = new PrgUnitTypeDTO();
                        PrgLabelDTO inventoryLengthUnitTypeLabel = new PrgLabelDTO();
                        inventoryLengthUnitTypeLabel.setLabelEn(rs.getString("INVENTORY_LENGTH_UNIT_TYPE_NAME_EN"));
                        inventoryLengthUnitTypeLabel.setLabelFr(rs.getString("INVENTORY_LENGTH_UNIT_TYPE_NAME_FR"));
                        inventoryLengthUnitTypeLabel.setLabelPr(rs.getString("INVENTORY_LENGTH_UNIT_TYPE_NAME_PR"));
                        inventoryLengthUnitTypeLabel.setLabelSp(rs.getString("INVENTORY_LENGTH_UNIT_TYPE_NAME_SP"));
                        inventoryLengthUnitType.setLabel(inventoryLengthUnitTypeLabel);
                        inventoryLengthUnitType.setUnitTypeId(rs.getInt("INVENTORY_LENGTH_UNIT_TYPE_ID"));
                        inventoryLengthUnit.setUnitType(inventoryLengthUnitType);
                        inventoryLogisticsUnit.setLengthUnit(inventoryLengthUnit);
                        inventoryLogisticsUnit.setLogisticsUnitId(rs.getInt("INVENTORY_LOGISTICS_UNIT_ID"));
                        PrgManufacturerDTO inventoryManufacturer = new PrgManufacturerDTO();
                        
                        PrgLabelDTO inventoryManufacturerLabel = new PrgLabelDTO();
                        inventoryManufacturerLabel.setLabelEn(rs.getString("INVENTORY_MANUFACTURER_NAME_EN"));
                        inventoryManufacturerLabel.setLabelFr(rs.getString("INVENTORY_MANUFACTURER_NAME_FR"));
                        inventoryManufacturerLabel.setLabelPr(rs.getString("INVENTORY_MANUFACTURER_NAME_PR"));
                        inventoryManufacturerLabel.setLabelSp(rs.getString("INVENTORY_MANUFACTURER_NAME_SP"));
                        inventoryManufacturer.setLabel(inventoryManufacturerLabel);
                        inventoryManufacturer.setManufacturerId(rs.getInt("INVENTORY_MANUFACTURER_ID"));
                        inventoryLogisticsUnit.setManufacturer(inventoryManufacturer);
                        
                        PrgPlanningUnitDTO inventoryPlanningUnit = new PrgPlanningUnitDTO();
                        PrgLabelDTO inventoryPlanningUnitLabel = new PrgLabelDTO();
                        inventoryPlanningUnitLabel.setLabelEn(rs.getString("INVENTORY_PLANNING_UNIT_NAME_EN"));
                        inventoryPlanningUnitLabel.setLabelFr(rs.getString("INVENTORY_PLANNING_UNIT_NAME_FR"));
                        inventoryPlanningUnitLabel.setLabelPr(rs.getString("INVENTORY_PLANNING_UNIT_NAME_PR"));
                        inventoryPlanningUnitLabel.setLabelSp(rs.getString("INVENTORY_PLANNING_UNIT_NAME_SP"));
                        inventoryPlanningUnit.setLabel(inventoryPlanningUnitLabel);
                        inventoryPlanningUnit.setPlanningUnitId(rs.getInt("INVENTORY_PLANNING_UNIT_ID"));
                        inventoryPlanningUnit.setPrice(rs.getDouble("INVENTORY_PRICE"));
                        inventoryPlanningUnit.setQtyOfForecastingUnits(rs.getDouble("INVENTORY_QTY_OF_FORECASTING_UNITS"));
                        PrgUnitDTO inventoryPlanningUnitUnit = new PrgUnitDTO();
                        PrgLabelDTO inventoryPlanningUnitUnitLabel = new PrgLabelDTO();
                        inventoryPlanningUnitUnitLabel.setLabelEn(rs.getString("INVENTORY_PLANNING_UNIT_UNIT_NAME_EN"));
                        inventoryPlanningUnitUnitLabel.setLabelFr(rs.getString("INVENTORY_PLANNING_UNIT_UNIT_NAME_FR"));
                        inventoryPlanningUnitUnitLabel.setLabelPr(rs.getString("INVENTORY_PLANNING_UNIT_UNIT_NAME_PR"));
                        inventoryPlanningUnitUnitLabel.setLabelSp(rs.getString("INVENTORY_PLANNING_UNIT_UNIT_NAME_SP"));
                        inventoryPlanningUnitUnit.setLabel(inventoryPlanningUnitUnitLabel);
                        inventoryPlanningUnitUnit.setUnitCode(rs.getString("INVENTORY_PLANNING_UNIT_UNIT_CODE"));
                        inventoryPlanningUnitUnit.setUnitId(rs.getInt("INVENTORY_PLANNING_UNIT_UNIT_ID"));

                        PrgUnitTypeDTO inventoryPlanningUnitUnitType = new PrgUnitTypeDTO();
                        PrgLabelDTO inventoryPlanningUnitUnitTypeLabel = new PrgLabelDTO();
                        inventoryPlanningUnitUnitTypeLabel.setLabelEn(rs.getString("INVENTORY_PLANNING_UNIT_UNIT_TYPE_NAME_EN"));
                        inventoryPlanningUnitUnitTypeLabel.setLabelFr(rs.getString("INVENTORY_PLANNING_UNIT_UNIT_TYPE_NAME_FR"));
                        inventoryPlanningUnitUnitTypeLabel.setLabelPr(rs.getString("INVENTORY_PLANNING_UNIT_UNIT_TYPE_NAME_PR"));
                        inventoryPlanningUnitUnitTypeLabel.setLabelSp(rs.getString("INVENTORY_PLANNING_UNIT_UNIT_TYPE_NAME_SP"));
                        inventoryPlanningUnitUnitType.setLabel(inventoryPlanningUnitUnitTypeLabel);
                        inventoryPlanningUnitUnitType.setUnitTypeId(rs.getInt("INVENTORY_PLANNING_UNIT_UNIT_TYPE_ID"));
                        inventoryPlanningUnitUnit.setUnitType(inventoryPlanningUnitUnitType);
                        inventoryPlanningUnit.setUnit(inventoryPlanningUnitUnit);
                        inventoryLogisticsUnit.setPlanningUnit(inventoryPlanningUnit);
                        inventoryLogisticsUnit.setQtyInEuro1(rs.getDouble("INVENTORY_QTY_IN_EURO_1"));
                        inventoryLogisticsUnit.setQtyInEuro2(rs.getDouble("INVENTORY_QTY_IN_EURO_2"));
                        inventoryLogisticsUnit.setQtyOfPlanningUnits(rs.getDouble("INVENTORY_QTY_OF_PLANNING_UNITS"));
                        PrgUnitDTO inventoryLogisticsUnitUnit = new PrgUnitDTO();
                        PrgLabelDTO inventoryLogisticsUnitUnitLabel = new PrgLabelDTO();
                        inventoryLogisticsUnitUnitLabel.setLabelEn(rs.getString("INVENTORY_LOGISTICS_UNIT_UNIT_NAME_EN"));
                        inventoryLogisticsUnitUnitLabel.setLabelFr(rs.getString("INVENTORY_LOGISTICS_UNIT_UNIT_NAME_FR"));
                        inventoryLogisticsUnitUnitLabel.setLabelPr(rs.getString("INVENTORY_LOGISTICS_UNIT_UNIT_NAME_PR"));
                        inventoryLogisticsUnitUnitLabel.setLabelSp(rs.getString("INVENTORY_LOGISTICS_UNIT_UNIT_NAME_SP"));
                        inventoryLogisticsUnitUnit.setLabel(inventoryLogisticsUnitUnitLabel);
                        inventoryLogisticsUnitUnit.setUnitCode(rs.getString("INVENTORY_LOGISTICS_UNIT_UNIT_CODE"));
                        inventoryLogisticsUnitUnit.setUnitId(rs.getInt("INVENTORY_LOGISTICS_UNIT_UNIT_ID"));
                        PrgUnitTypeDTO inventoryLogisticsUnitUnitType = new PrgUnitTypeDTO();
                        PrgLabelDTO inventoryLogisticsUnitUnitTypeLabel = new PrgLabelDTO();
                        inventoryLogisticsUnitUnitTypeLabel.setLabelEn(rs.getString("INVENTORY_LOGISTICS_UNIT_UNIT_TYPE_NAME_EN"));
                        inventoryLogisticsUnitUnitTypeLabel.setLabelFr(rs.getString("INVENTORY_LOGISTICS_UNIT_UNIT_TYPE_NAME_FR"));
                        inventoryLogisticsUnitUnitTypeLabel.setLabelPr(rs.getString("INVENTORY_LOGISTICS_UNIT_UNIT_TYPE_NAME_PR"));
                        inventoryLogisticsUnitUnitTypeLabel.setLabelSp(rs.getString("INVENTORY_LOGISTICS_UNIT_UNIT_TYPE_NAME_SP"));
                        inventoryLogisticsUnitUnitType.setLabel(inventoryLogisticsUnitUnitTypeLabel);
                        inventoryLogisticsUnitUnitType.setUnitTypeId(rs.getInt("INVENTORY_LOGISTICS_UNIT_UNIT_TYPE_ID"));
                        inventoryLogisticsUnitUnit.setUnitType(inventoryLogisticsUnitUnitType);
                        inventoryLogisticsUnit.setUnit(inventoryLogisticsUnitUnit);
                        inventoryLogisticsUnit.setVariant(rs.getString("INVENTORY_VARIANT"));

                        inventoryLogisticsUnit.setWeightQty(rs.getDouble("INVENTORY_WEIGHT_QTY"));
                        PrgUnitDTO inventoryWeightUnit = new PrgUnitDTO();
                        PrgLabelDTO inventoryWeightUnitLabel = new PrgLabelDTO();
                        inventoryWeightUnitLabel.setLabelEn(rs.getString("INVENTORY_WEIGHT_UNIT_NAME_EN"));
                        inventoryWeightUnitLabel.setLabelFr(rs.getString("INVENTORY_WEIGHT_UNIT_NAME_FR"));
                        inventoryWeightUnitLabel.setLabelPr(rs.getString("INVENTORY_WEIGHT_UNIT_NAME_PR"));
                        inventoryWeightUnitLabel.setLabelSp(rs.getString("INVENTORY_WEIGHT_UNIT_NAME_SP"));
                        inventoryWeightUnit.setLabel(inventoryWeightUnitLabel);
                        inventoryWeightUnit.setUnitCode(rs.getString("INVENTORY_WEIGHT_UNIT_CODE"));
                        inventoryWeightUnit.setUnitId(rs.getInt("INVENTORY_WEIGHT_UNIT_ID"));
                        PrgUnitTypeDTO inventoryWeightUnitType = new PrgUnitTypeDTO();
                        PrgLabelDTO inventoryWeightUnitTypeLabel = new PrgLabelDTO();
                        inventoryWeightUnitTypeLabel.setLabelEn(rs.getString("INVENTORY_WEIGHT_UNIT_TYPE_NAME_EN"));
                        inventoryWeightUnitTypeLabel.setLabelFr(rs.getString("INVENTORY_WEIGHT_UNIT_TYPE_NAME_FR"));
                        inventoryWeightUnitTypeLabel.setLabelPr(rs.getString("INVENTORY_WEIGHT_UNIT_TYPE_NAME_PR"));
                        inventoryWeightUnitTypeLabel.setLabelSp(rs.getString("INVENTORY_WEIGHT_UNIT_TYPE_NAME_SP"));
                        inventoryWeightUnitType.setLabel(inventoryWeightUnitTypeLabel);
                        inventoryWeightUnitType.setUnitTypeId(rs.getInt("INVENTORY_WEIGHT_UNIT_TYPE_ID"));
                        inventoryWeightUnit.setUnitType(inventoryWeightUnitType);
                        inventoryLogisticsUnit.setWeightUnit(inventoryWeightUnit);
                        inventoryLogisticsUnit.setWidthQty(rs.getDouble("INVENTORY_WIDTH_QTY"));
                        PrgUnitDTO inventoryWidthUnit = new PrgUnitDTO();
                        PrgLabelDTO inventoryWidthUnitLabel = new PrgLabelDTO();
                        inventoryWidthUnitLabel.setLabelEn(rs.getString("INVENTORY_WIDTH_UNIT_NAME_EN"));
                        inventoryWidthUnitLabel.setLabelFr(rs.getString("INVENTORY_WIDTH_UNIT_NAME_FR"));
                        inventoryWidthUnitLabel.setLabelPr(rs.getString("INVENTORY_WIDTH_UNIT_NAME_PR"));
                        inventoryWidthUnitLabel.setLabelSp(rs.getString("INVENTORY_WIDTH_UNIT_NAME_SP"));
                        inventoryWidthUnit.setLabel(inventoryWidthUnitLabel);
                        inventoryWidthUnit.setUnitCode(rs.getString("INVENTORY_WIDTH_UNIT_CODE"));
                        inventoryWidthUnit.setUnitId(rs.getInt("INVENTORY_WIDTH_UNIT_ID"));
                        PrgUnitTypeDTO inventoryWidthUnitType = new PrgUnitTypeDTO();
                        PrgLabelDTO inventoryWidthUnitTypeLabel = new PrgLabelDTO();
                        inventoryWidthUnitTypeLabel.setLabelEn(rs.getString("INVENTORY_WIDTH_UNIT_TYPE_NAME_EN"));
                        inventoryWidthUnitTypeLabel.setLabelFr(rs.getString("INVENTORY_WIDTH_UNIT_TYPE_NAME_FR"));
                        inventoryWidthUnitTypeLabel.setLabelPr(rs.getString("INVENTORY_WIDTH_UNIT_TYPE_NAME_PR"));
                        inventoryWidthUnitTypeLabel.setLabelSp(rs.getString("INVENTORY_WIDTH_UNIT_TYPE_NAME_SP"));
                        inventoryWidthUnitType.setLabel(inventoryWidthUnitTypeLabel);
                        inventoryWidthUnitType.setUnitTypeId(rs.getInt("INVENTORY_WIDTH_UNIT_TYPE_ID"));
                        inventoryWidthUnit.setUnitType(inventoryWidthUnitType);
                        inventoryLogisticsUnit.setWidthUnit(inventoryWidthUnit);
                        inventory.setLogisticsUnit(inventoryLogisticsUnit);
                        inventory.setPackSize(rs.getDouble("INVENTORY_PACK_SIZE"));
                        PrgRegionDTO inventoryRegion = new PrgRegionDTO();
                        inventoryRegion.setCapacityCbm(rs.getDouble("INVENTORY_REGION_CAPACITY_CBM"));
                        PrgLabelDTO inventoryRegionLabel = new PrgLabelDTO();
                        inventoryRegionLabel.setLabelEn(rs.getString("INVENTORY_REGION_NAME_EN"));
                        inventoryRegionLabel.setLabelFr(rs.getString("INVENTORY_REGION_NAME_FR"));
                        inventoryRegionLabel.setLabelPr(rs.getString("INVENTORY_REGION_NAME_PR"));
                        inventoryRegionLabel.setLabelSp(rs.getString("INVENTORY_REGION_NAME_SP"));
                        inventoryRegion.setLabel(inventoryRegionLabel);
                        inventoryRegion.setRegionId(rs.getInt("INVENTORY_REGION_ID"));
                        inventory.setRegion(inventoryRegion);
                        PrgUnitDTO inventoryUnit = new PrgUnitDTO();
                        PrgLabelDTO inventoryUnitLabel = new PrgLabelDTO();
                        inventoryUnitLabel.setLabelEn(rs.getString("INVENTORY_UNIT_NAME_EN"));
                        inventoryUnitLabel.setLabelFr(rs.getString("INVENTORY_UNIT_NAME_FR"));
                        inventoryUnitLabel.setLabelPr(rs.getString("INVENTORY_UNIT_NAME_PR"));
                        inventoryUnitLabel.setLabelSp(rs.getString("INVENTORY_UNIT_NAME_SP"));
                        inventoryUnit.setLabel(inventoryUnitLabel);
                        inventoryUnit.setUnitCode(rs.getString("INVENTORY_UNIT_CODE"));
                        inventoryUnit.setUnitId(rs.getInt("INVENTORY_UNIT_ID"));
                        PrgUnitTypeDTO inventoryUnitType = new PrgUnitTypeDTO();
                        PrgLabelDTO inventoryUnitTypeLabel = new PrgLabelDTO();
                        inventoryUnitTypeLabel.setLabelEn(rs.getString("INVENTORY_UNIT_TYPE_NAME_EN"));
                        inventoryUnitTypeLabel.setLabelFr(rs.getString("INVENTORY_UNIT_TYPE_NAME_FR"));
                        inventoryUnitTypeLabel.setLabelPr(rs.getString("INVENTORY_UNIT_TYPE_NAME_PR"));
                        inventoryUnitTypeLabel.setLabelSp(rs.getString("INVENTORY_UNIT_TYPE_NAME_SP"));
                        inventoryUnitType.setLabel(inventoryUnitTypeLabel);
                        inventoryUnitType.setUnitTypeId(rs.getInt("INVENTORY_UNIT_TYPE_ID"));
                        inventoryUnit.setUnitType(inventoryUnitType);
                        inventory.setUnit(inventoryUnit);
                        inventoryList.add(inventory);
                    }
                    consumption = new PrgConsumptionDTO();
                    consumption.setConsumptionId(rs.getInt("CONSUMPTION_ID"));
                    if (consumptionList.indexOf(consumption) == -1) {
                        consumption.setConsumptionQty(rs.getDouble("CONSUMPTION_QTY"));
                        PrgDataSourceDTO consumptionDataSource = new PrgDataSourceDTO();
                        consumptionDataSource.setDataSourceId(rs.getInt("CONSUMPTION_DATA_SOURCE_ID"));
                        PrgDataSourceTypeDTO consumptionDataSourceType = new PrgDataSourceTypeDTO();
                        consumptionDataSourceType.setDataSourceTypeId(rs.getInt("CONSUMPTION_DATA_SOURCE_TYPE_ID"));
                        PrgLabelDTO consumptionDataSourceTypeLabel = new PrgLabelDTO();
                        consumptionDataSourceTypeLabel.setLabelEn(rs.getString("CONSUMPTION_DATA_SOURCE_TYPE_NAME_EN"));
                        consumptionDataSourceTypeLabel.setLabelFr(rs.getString("CONSUMPTION_DATA_SOURCE_TYPE_NAME_FR"));
                        consumptionDataSourceTypeLabel.setLabelPr(rs.getString("CONSUMPTION_DATA_SOURCE_TYPE_NAME_PR"));
                        consumptionDataSourceTypeLabel.setLabelSp(rs.getString("CONSUMPTION_DATA_SOURCE_TYPE_NAME_SP"));
                        consumptionDataSourceType.setLabel(consumptionDataSourceTypeLabel);
                        consumptionDataSource.setDataSourceType(consumptionDataSourceType);
                        PrgLabelDTO consumptionDataSourceLabel = new PrgLabelDTO();
                        consumptionDataSourceLabel.setLabelEn(rs.getString("CONSUMPTION_DATA_SOURCE_LABEL_EN"));
                        consumptionDataSourceLabel.setLabelFr(rs.getString("CONSUMPTION_DATA_SOURCE_LABEL_FR"));
                        consumptionDataSourceLabel.setLabelPr(rs.getString("CONSUMPTION_DATA_SOURCE_LABEL_PR"));
                        consumptionDataSourceLabel.setLabelSp(rs.getString("CONSUMPTION_DATA_SOURCE_LABEL_SP"));
                        consumptionDataSource.setLabel(consumptionDataSourceLabel);
                        consumption.setDataSource(consumptionDataSource);

                        consumption.setDaysOfStockOut(rs.getInt("DAYS_OF_STOCK_OUT"));

                        PrgLogisticsUnitDTO consumptionLogisticsUnit = new PrgLogisticsUnitDTO();
                        consumptionLogisticsUnit.setHeightQty(rs.getDouble("CONSUMPTION_HEIGHT_QTY"));
                        PrgUnitDTO consumptionHeightUnit = new PrgUnitDTO();
                        PrgLabelDTO consumptionHeightUnitLabel = new PrgLabelDTO();
                        consumptionHeightUnitLabel.setLabelEn(rs.getString("CONSUMPTION_HEIGHT_UNIT_NAME_EN"));
                        consumptionHeightUnitLabel.setLabelFr(rs.getString("CONSUMPTION_HEIGHT_UNIT_NAME_FR"));
                        consumptionHeightUnitLabel.setLabelPr(rs.getString("CONSUMPTION_HEIGHT_UNIT_NAME_PR"));
                        consumptionHeightUnitLabel.setLabelSp(rs.getString("CONSUMPTION_HEIGHT_UNIT_NAME_SP"));
                        consumptionHeightUnit.setLabel(consumptionHeightUnitLabel);
                        consumptionHeightUnit.setUnitCode(rs.getString("CONSUMPTION_HEIGHT_UNIT_CODE"));
                        consumptionHeightUnit.setUnitId(rs.getInt("CONSUMPTION_HEIGHT_UNIT_ID"));
                        PrgUnitTypeDTO consumptionHeightUnitType = new PrgUnitTypeDTO();
                        PrgLabelDTO consumptionHeightUnitTypeLabel = new PrgLabelDTO();
                        consumptionHeightUnitTypeLabel.setLabelEn(rs.getString("CONSUMPTION_HEIGHT_UNIT_TYPE_NAME_EN"));
                        consumptionHeightUnitTypeLabel.setLabelFr(rs.getString("CONSUMPTION_HEIGHT_UNIT_TYPE_NAME_FR"));
                        consumptionHeightUnitTypeLabel.setLabelPr(rs.getString("CONSUMPTION_HEIGHT_UNIT_TYPE_NAME_PR"));
                        consumptionHeightUnitTypeLabel.setLabelSp(rs.getString("CONSUMPTION_HEIGHT_UNIT_TYPE_NAME_SP"));
                        consumptionHeightUnitType.setLabel(consumptionHeightUnitTypeLabel);
                        consumptionHeightUnitType.setUnitTypeId(rs.getInt("CONSUMPTION_HEIGHT_UNIT_TYPE_ID"));
                        consumptionHeightUnit.setUnitType(consumptionHeightUnitType);
                        consumptionLogisticsUnit.setHeightUnit(consumptionHeightUnit);
                        PrgLabelDTO consumptionLogisticsUnitLabel = new PrgLabelDTO();
                        consumptionLogisticsUnitLabel.setLabelEn(rs.getString("CONSUMPTION_LOGISTICS_UNIT_NAME_EN"));
                        consumptionLogisticsUnitLabel.setLabelFr(rs.getString("CONSUMPTION_LOGISTICS_UNIT_NAME_FR"));
                        consumptionLogisticsUnitLabel.setLabelPr(rs.getString("CONSUMPTION_LOGISTICS_UNIT_NAME_PR"));
                        consumptionLogisticsUnitLabel.setLabelSp(rs.getString("CONSUMPTION_LOGISTICS_UNIT_NAME_SP"));
                        consumptionLogisticsUnit.setLabel(consumptionLogisticsUnitLabel);
                        consumptionLogisticsUnit.setLengthQty(rs.getInt("CONSUMPTION_LENGTH_QTY"));

                        PrgUnitDTO consumptionLengthUnit = new PrgUnitDTO();
                        PrgLabelDTO consumptionLengthUnitLabel = new PrgLabelDTO();
                        consumptionLengthUnitLabel.setLabelEn(rs.getString("CONSUMPTION_LENGTH_UNIT_NAME_EN"));
                        consumptionLengthUnitLabel.setLabelFr(rs.getString("CONSUMPTION_LENGTH_UNIT_NAME_FR"));
                        consumptionLengthUnitLabel.setLabelPr(rs.getString("CONSUMPTION_LENGTH_UNIT_NAME_PR"));
                        consumptionLengthUnitLabel.setLabelSp(rs.getString("CONSUMPTION_LENGTH_UNIT_NAME_SP"));
                        consumptionLengthUnit.setLabel(consumptionLengthUnitLabel);
                        consumptionLengthUnit.setUnitCode(rs.getString("CONSUMPTION_LENGTH_UNIT_CODE"));
                        consumptionLengthUnit.setUnitId(rs.getInt("CONSUMPTION_LENGTH_UNIT_ID"));
                        PrgUnitTypeDTO consumptionLengthUnitType = new PrgUnitTypeDTO();
                        PrgLabelDTO consumptionLengthUnitTypeLabel = new PrgLabelDTO();
                        consumptionLengthUnitTypeLabel.setLabelEn(rs.getString("CONSUMPTION_LENGTH_UNIT_TYPE_NAME_EN"));
                        consumptionLengthUnitTypeLabel.setLabelFr(rs.getString("CONSUMPTION_LENGTH_UNIT_TYPE_NAME_FR"));
                        consumptionLengthUnitTypeLabel.setLabelPr(rs.getString("CONSUMPTION_LENGTH_UNIT_TYPE_NAME_PR"));
                        consumptionLengthUnitTypeLabel.setLabelSp(rs.getString("CONSUMPTION_LENGTH_UNIT_TYPE_NAME_SP"));
                        consumptionLengthUnitType.setLabel(consumptionLengthUnitTypeLabel);
                        consumptionLengthUnitType.setUnitTypeId(rs.getInt("CONSUMPTION_LENGTH_UNIT_TYPE_ID"));
                        consumptionLengthUnit.setUnitType(consumptionLengthUnitType);
                        consumptionLogisticsUnit.setLengthUnit(consumptionLengthUnit);
                        consumptionLogisticsUnit.setLogisticsUnitId(rs.getInt("CONSUMPTION_LOGISTICS_UNIT_ID"));
                        PrgManufacturerDTO consumptionManufacturer = new PrgManufacturerDTO();
                        PrgLabelDTO consumptionManufacturerLabel = new PrgLabelDTO();
                        consumptionManufacturerLabel.setLabelEn(rs.getString("CONSUMPTION_MANUFACTURER_NAME_EN"));
                        consumptionManufacturerLabel.setLabelFr(rs.getString("CONSUMPTION_MANUFACTURER_NAME_FR"));
                        consumptionManufacturerLabel.setLabelPr(rs.getString("CONSUMPTION_MANUFACTURER_NAME_PR"));
                        consumptionManufacturerLabel.setLabelSp(rs.getString("CONSUMPTION_MANUFACTURER_NAME_SP"));
                        consumptionManufacturer.setLabel(consumptionManufacturerLabel);
                        consumptionManufacturer.setManufacturerId(rs.getInt("CONSUMPTION_MANUFACTURER_ID"));
                        consumptionLogisticsUnit.setManufacturer(consumptionManufacturer);
                        PrgPlanningUnitDTO consumptionPlanningUnit = new PrgPlanningUnitDTO();
                        PrgLabelDTO consumptionPlanningUnitLabel = new PrgLabelDTO();
                        consumptionPlanningUnitLabel.setLabelEn(rs.getString("CONSUMPTION_PLANNING_UNIT_NAME_EN"));
                        consumptionPlanningUnitLabel.setLabelFr(rs.getString("CONSUMPTION_PLANNING_UNIT_NAME_FR"));
                        consumptionPlanningUnitLabel.setLabelPr(rs.getString("CONSUMPTION_PLANNING_UNIT_NAME_PR"));
                        consumptionPlanningUnitLabel.setLabelSp(rs.getString("CONSUMPTION_PLANNING_UNIT_NAME_SP"));
                        consumptionPlanningUnit.setLabel(consumptionPlanningUnitLabel);
                        consumptionPlanningUnit.setPlanningUnitId(rs.getInt("CONSUMPTION_PLANNING_UNIT_ID"));
                        consumptionPlanningUnit.setPrice(rs.getDouble("CONSUMPTION_PRICE"));
                        consumptionPlanningUnit.setQtyOfForecastingUnits(rs.getDouble("CONSUMPTION_QTY_OF_FORECASTING_UNITS"));
                        PrgUnitDTO consumptionPlanningUnitUnit = new PrgUnitDTO();
                        PrgLabelDTO consumptionPlanningUnitUnitLabel = new PrgLabelDTO();
                        consumptionPlanningUnitUnitLabel.setLabelEn(rs.getString("CONSUMPTION_PLANNING_UNIT_UNIT_NAME_EN"));
                        consumptionPlanningUnitUnitLabel.setLabelFr(rs.getString("CONSUMPTION_PLANNING_UNIT_UNIT_NAME_FR"));
                        consumptionPlanningUnitUnitLabel.setLabelPr(rs.getString("CONSUMPTION_PLANNING_UNIT_UNIT_NAME_PR"));
                        consumptionPlanningUnitUnitLabel.setLabelSp(rs.getString("CONSUMPTION_PLANNING_UNIT_UNIT_NAME_SP"));
                        consumptionPlanningUnitUnit.setLabel(consumptionPlanningUnitUnitLabel);
                        consumptionPlanningUnitUnit.setUnitCode(rs.getString("CONSUMPTION_PLANNING_UNIT_UNIT_CODE"));
                        consumptionPlanningUnitUnit.setUnitId(rs.getInt("CONSUMPTION_PLANNING_UNIT_UNIT_ID"));

                        PrgUnitTypeDTO consumptionPlanningUnitUnitType = new PrgUnitTypeDTO();
                        PrgLabelDTO consumptionPlanningUnitUnitTypeLabel = new PrgLabelDTO();
                        consumptionPlanningUnitUnitTypeLabel.setLabelEn(rs.getString("CONSUMPTION_PLANNING_UNIT_UNIT_TYPE_NAME_EN"));
                        consumptionPlanningUnitUnitTypeLabel.setLabelFr(rs.getString("CONSUMPTION_PLANNING_UNIT_UNIT_TYPE_NAME_FR"));
                        consumptionPlanningUnitUnitTypeLabel.setLabelPr(rs.getString("CONSUMPTION_PLANNING_UNIT_UNIT_TYPE_NAME_PR"));
                        consumptionPlanningUnitUnitTypeLabel.setLabelSp(rs.getString("CONSUMPTION_PLANNING_UNIT_UNIT_TYPE_NAME_SP"));
                        consumptionPlanningUnitUnitType.setLabel(consumptionPlanningUnitUnitTypeLabel);
                        consumptionPlanningUnitUnitType.setUnitTypeId(rs.getInt("CONSUMPTION_PLANNING_UNIT_UNIT_TYPE_ID"));
                        consumptionPlanningUnitUnit.setUnitType(consumptionPlanningUnitUnitType);
                        consumptionPlanningUnit.setUnit(consumptionPlanningUnitUnit);
                        consumptionLogisticsUnit.setPlanningUnit(consumptionPlanningUnit);
                        consumptionLogisticsUnit.setQtyInEuro1(rs.getDouble("CONSUMPTION_QTY_IN_EURO_1"));
                        consumptionLogisticsUnit.setQtyInEuro2(rs.getDouble("CONSUMPTION_QTY_IN_EURO_2"));
                        consumptionLogisticsUnit.setQtyOfPlanningUnits(rs.getDouble("CONSUMPTION_QTY_OF_PLANNING_UNITS"));
                        PrgUnitDTO consumptionLogisticsUnitUnit = new PrgUnitDTO();
                        PrgLabelDTO consumptionLogisticsUnitUnitLabel = new PrgLabelDTO();
                        consumptionLogisticsUnitUnitLabel.setLabelEn(rs.getString("CONSUMPTION_LOGISTICS_UNIT_UNIT_NAME_EN"));
                        consumptionLogisticsUnitUnitLabel.setLabelFr(rs.getString("CONSUMPTION_LOGISTICS_UNIT_UNIT_NAME_FR"));
                        consumptionLogisticsUnitUnitLabel.setLabelPr(rs.getString("CONSUMPTION_LOGISTICS_UNIT_UNIT_NAME_PR"));
                        consumptionLogisticsUnitUnitLabel.setLabelSp(rs.getString("CONSUMPTION_LOGISTICS_UNIT_UNIT_NAME_SP"));
                        consumptionLogisticsUnitUnit.setLabel(consumptionLogisticsUnitUnitLabel);
                        consumptionLogisticsUnitUnit.setUnitCode(rs.getString("CONSUMPTION_LOGISTICS_UNIT_UNIT_CODE"));
                        consumptionLogisticsUnitUnit.setUnitId(rs.getInt("CONSUMPTION_LOGISTICS_UNIT_UNIT_ID"));
                        PrgUnitTypeDTO consumptionLogisticsUnitUnitType = new PrgUnitTypeDTO();
                        PrgLabelDTO consumptionLogisticsUnitUnitTypeLabel = new PrgLabelDTO();
                        consumptionLogisticsUnitUnitTypeLabel.setLabelEn(rs.getString("CONSUMPTION_LOGISTICS_UNIT_UNIT_TYPE_NAME_EN"));
                        consumptionLogisticsUnitUnitTypeLabel.setLabelFr(rs.getString("CONSUMPTION_LOGISTICS_UNIT_UNIT_TYPE_NAME_FR"));
                        consumptionLogisticsUnitUnitTypeLabel.setLabelPr(rs.getString("CONSUMPTION_LOGISTICS_UNIT_UNIT_TYPE_NAME_PR"));
                        consumptionLogisticsUnitUnitTypeLabel.setLabelSp(rs.getString("CONSUMPTION_LOGISTICS_UNIT_UNIT_TYPE_NAME_SP"));
                        consumptionLogisticsUnitUnitType.setLabel(consumptionLogisticsUnitUnitTypeLabel);
                        consumptionLogisticsUnitUnitType.setUnitTypeId(rs.getInt("CONSUMPTION_LOGISTICS_UNIT_UNIT_TYPE_ID"));
                        consumptionLogisticsUnitUnit.setUnitType(consumptionLogisticsUnitUnitType);
                        consumptionLogisticsUnit.setUnit(consumptionLogisticsUnitUnit);
                        consumptionLogisticsUnit.setVariant(rs.getString("CONSUMPTION_VARIANT"));

                        consumptionLogisticsUnit.setWeightQty(rs.getDouble("CONSUMPTION_WEIGHT_QTY"));
                        PrgUnitDTO consumptionWeightUnit = new PrgUnitDTO();
                        PrgLabelDTO consumptionWeightUnitLabel = new PrgLabelDTO();
                        consumptionWeightUnitLabel.setLabelEn(rs.getString("CONSUMPTION_WEIGHT_UNIT_NAME_EN"));
                        consumptionWeightUnitLabel.setLabelFr(rs.getString("CONSUMPTION_WEIGHT_UNIT_NAME_FR"));
                        consumptionWeightUnitLabel.setLabelPr(rs.getString("CONSUMPTION_WEIGHT_UNIT_NAME_PR"));
                        consumptionWeightUnitLabel.setLabelSp(rs.getString("CONSUMPTION_WEIGHT_UNIT_NAME_SP"));
                        consumptionWeightUnit.setLabel(consumptionWeightUnitLabel);
                        consumptionWeightUnit.setUnitCode(rs.getString("CONSUMPTION_WEIGHT_UNIT_CODE"));
                        consumptionWeightUnit.setUnitId(rs.getInt("CONSUMPTION_WEIGHT_UNIT_ID"));
                        PrgUnitTypeDTO consumptionWeightUnitType = new PrgUnitTypeDTO();
                        PrgLabelDTO consumptionWeightUnitTypeLabel = new PrgLabelDTO();
                        consumptionWeightUnitTypeLabel.setLabelEn(rs.getString("CONSUMPTION_WEIGHT_UNIT_TYPE_NAME_EN"));
                        consumptionWeightUnitTypeLabel.setLabelFr(rs.getString("CONSUMPTION_WEIGHT_UNIT_TYPE_NAME_FR"));
                        consumptionWeightUnitTypeLabel.setLabelPr(rs.getString("CONSUMPTION_WEIGHT_UNIT_TYPE_NAME_PR"));
                        consumptionWeightUnitTypeLabel.setLabelSp(rs.getString("CONSUMPTION_WEIGHT_UNIT_TYPE_NAME_SP"));
                        consumptionWeightUnitType.setLabel(consumptionWeightUnitTypeLabel);
                        consumptionWeightUnitType.setUnitTypeId(rs.getInt("CONSUMPTION_WEIGHT_UNIT_TYPE_ID"));
                        consumptionWeightUnit.setUnitType(consumptionWeightUnitType);
                        consumptionLogisticsUnit.setWeightUnit(consumptionWeightUnit);
                        consumptionLogisticsUnit.setWidthQty(rs.getDouble("CONSUMPTION_WIDTH_QTY"));
                        PrgUnitDTO consumptionWidthUnit = new PrgUnitDTO();
                        PrgLabelDTO consumptionWidthUnitLabel = new PrgLabelDTO();
                        consumptionWidthUnitLabel.setLabelEn(rs.getString("CONSUMPTION_WIDTH_UNIT_NAME_EN"));
                        consumptionWidthUnitLabel.setLabelFr(rs.getString("CONSUMPTION_WIDTH_UNIT_NAME_FR"));
                        consumptionWidthUnitLabel.setLabelPr(rs.getString("CONSUMPTION_WIDTH_UNIT_NAME_PR"));
                        consumptionWidthUnitLabel.setLabelSp(rs.getString("CONSUMPTION_WIDTH_UNIT_NAME_SP"));
                        consumptionWidthUnit.setLabel(consumptionWidthUnitLabel);
                        consumptionWidthUnit.setUnitCode(rs.getString("CONSUMPTION_WIDTH_UNIT_CODE"));
                        consumptionWidthUnit.setUnitId(rs.getInt("CONSUMPTION_WIDTH_UNIT_ID"));
                        PrgUnitTypeDTO consumptionWidthUnitType = new PrgUnitTypeDTO();
                        PrgLabelDTO consumptionWidthUnitTypeLabel = new PrgLabelDTO();
                        consumptionWidthUnitTypeLabel.setLabelEn(rs.getString("CONSUMPTION_WIDTH_UNIT_TYPE_NAME_EN"));
                        consumptionWidthUnitTypeLabel.setLabelFr(rs.getString("CONSUMPTION_WIDTH_UNIT_TYPE_NAME_FR"));
                        consumptionWidthUnitTypeLabel.setLabelPr(rs.getString("CONSUMPTION_WIDTH_UNIT_TYPE_NAME_PR"));
                        consumptionWidthUnitTypeLabel.setLabelSp(rs.getString("CONSUMPTION_WIDTH_UNIT_TYPE_NAME_SP"));
                        consumptionWidthUnitType.setLabel(consumptionWidthUnitTypeLabel);
                        consumptionWidthUnitType.setUnitTypeId(rs.getInt("CONSUMPTION_WIDTH_UNIT_TYPE_ID"));
                        consumptionWidthUnit.setUnitType(consumptionWidthUnitType);
                        consumptionLogisticsUnit.setWidthUnit(consumptionWidthUnit);
                        consumption.setLogisticsUnit(consumptionLogisticsUnit);
                        consumption.setPackSize(rs.getDouble("CONSUMPTION_PACK_SIZE"));
                        PrgRegionDTO consumptionRegion = new PrgRegionDTO();
                        consumptionRegion.setCapacityCbm(rs.getDouble("CONSUMPTION_REGION_CAPACITY_CBM"));
                        PrgLabelDTO consumptionRegionLabel = new PrgLabelDTO();
                        consumptionRegionLabel.setLabelEn(rs.getString("CONSUMPTION_REGION_NAME_EN"));
                        consumptionRegionLabel.setLabelFr(rs.getString("CONSUMPTION_REGION_NAME_FR"));
                        consumptionRegionLabel.setLabelPr(rs.getString("CONSUMPTION_REGION_NAME_PR"));
                        consumptionRegionLabel.setLabelSp(rs.getString("CONSUMPTION_REGION_NAME_SP"));
                        consumptionRegion.setLabel(consumptionRegionLabel);
                        consumptionRegion.setRegionId(rs.getInt("CONSUMPTION_REGION_ID"));
                        consumption.setRegion(consumptionRegion);
                        PrgUnitDTO consumptionUnit = new PrgUnitDTO();
                        PrgLabelDTO consumptionUnitLabel = new PrgLabelDTO();
                        consumptionUnitLabel.setLabelEn(rs.getString("CONSUMPTION_UNIT_NAME_EN"));
                        consumptionUnitLabel.setLabelFr(rs.getString("CONSUMPTION_UNIT_NAME_FR"));
                        consumptionUnitLabel.setLabelPr(rs.getString("CONSUMPTION_UNIT_NAME_PR"));
                        consumptionUnitLabel.setLabelSp(rs.getString("CONSUMPTION_UNIT_NAME_SP"));
                        consumptionUnit.setLabel(consumptionUnitLabel);
                        consumptionUnit.setUnitCode(rs.getString("CONSUMPTION_UNIT_CODE"));
                        consumptionUnit.setUnitId(rs.getInt("CONSUMPTION_UNIT_ID"));
                        PrgUnitTypeDTO consumptionUnitType = new PrgUnitTypeDTO();
                        PrgLabelDTO consumptionUnitTypeLabel = new PrgLabelDTO();
                        consumptionUnitTypeLabel.setLabelEn(rs.getString("CONSUMPTION_UNIT_TYPE_NAME_EN"));
                        consumptionUnitTypeLabel.setLabelFr(rs.getString("CONSUMPTION_UNIT_TYPE_NAME_FR"));
                        consumptionUnitTypeLabel.setLabelPr(rs.getString("CONSUMPTION_UNIT_TYPE_NAME_PR"));
                        consumptionUnitTypeLabel.setLabelSp(rs.getString("CONSUMPTION_UNIT_TYPE_NAME_SP"));
                        consumptionUnitType.setLabel(consumptionUnitTypeLabel);
                        consumptionUnitType.setUnitTypeId(rs.getInt("CONSUMPTION_UNIT_TYPE_ID"));
                        consumptionUnit.setUnitType(consumptionUnitType);
                        consumption.setUnit(consumptionUnit);
                        consumption.setStartDate(rs.getDate("CONSUMPTION_START_DATE"));
                        consumption.setStopDate(rs.getDate("CONSUMPTION_STOP_DATE"));
                        consumptionList.add(consumption);
                    }
                    shipment = new PrgShipmentDTO();
                    shipment.setShipmentId(rs.getInt("SHIPMENT_ID"));
                    if (shipmentList.indexOf(shipment) == -1) {
                        shipment.setArriveDate(rs.getDate("ARRIVE_DATE"));
                        PrgDataSourceDTO shipmentDataSource = new PrgDataSourceDTO();
                        shipmentDataSource.setDataSourceId(rs.getInt("SHIPMENT_DATA_SOURCE_ID"));
                        PrgDataSourceTypeDTO shipmentDataSourceType = new PrgDataSourceTypeDTO();
                        shipmentDataSourceType.setDataSourceTypeId(rs.getInt("SHIPMENT_DATA_SOURCE_TYPE_ID"));
                        PrgLabelDTO shipmentDataSourceTypeLabel = new PrgLabelDTO();
                        shipmentDataSourceTypeLabel.setLabelEn(rs.getString("SHIPMENT_DATA_SOURCE_TYPE_NAME_EN"));
                        shipmentDataSourceTypeLabel.setLabelFr(rs.getString("SHIPMENT_DATA_SOURCE_TYPE_NAME_FR"));
                        shipmentDataSourceTypeLabel.setLabelPr(rs.getString("SHIPMENT_DATA_SOURCE_TYPE_NAME_PR"));
                        shipmentDataSourceTypeLabel.setLabelSp(rs.getString("SHIPMENT_DATA_SOURCE_TYPE_NAME_SP"));
                        shipmentDataSourceType.setLabel(shipmentDataSourceTypeLabel);
                        shipmentDataSource.setDataSourceType(shipmentDataSourceType);
                        PrgLabelDTO shipmentDataSourceLabel = new PrgLabelDTO();
                        shipmentDataSourceLabel.setLabelEn(rs.getString("SHIPMENT_DATA_SOURCE_LABEL_EN"));
                        shipmentDataSourceLabel.setLabelFr(rs.getString("SHIPMENT_DATA_SOURCE_LABEL_FR"));
                        shipmentDataSourceLabel.setLabelPr(rs.getString("SHIPMENT_DATA_SOURCE_LABEL_PR"));
                        shipmentDataSourceLabel.setLabelSp(rs.getString("SHIPMENT_DATA_SOURCE_LABEL_SP"));
                        shipmentDataSource.setLabel(shipmentDataSourceLabel);
                        shipment.setDataSource(shipmentDataSource);
                        shipment.setFrieghtPrice(rs.getDouble("FRIEGHT_PRICE"));
                        PrgLogisticsUnitDTO shipmentLogisticsUnit = new PrgLogisticsUnitDTO();
                        shipmentLogisticsUnit.setHeightQty(rs.getDouble("SHIPMENT_HEIGHT_QTY"));
                        PrgUnitDTO shipmentHeightUnit = new PrgUnitDTO();
                        PrgLabelDTO shipmentHeightUnitLabel = new PrgLabelDTO();
                        shipmentHeightUnitLabel.setLabelEn(rs.getString("SHIPMENT_HEIGHT_UNIT_NAME_EN"));
                        shipmentHeightUnitLabel.setLabelFr(rs.getString("SHIPMENT_HEIGHT_UNIT_NAME_FR"));
                        shipmentHeightUnitLabel.setLabelPr(rs.getString("SHIPMENT_HEIGHT_UNIT_NAME_PR"));
                        shipmentHeightUnitLabel.setLabelSp(rs.getString("SHIPMENT_HEIGHT_UNIT_NAME_SP"));
                        shipmentHeightUnit.setLabel(shipmentHeightUnitLabel);
                        shipmentHeightUnit.setUnitCode(rs.getString("SHIPMENT_HEIGHT_UNIT_CODE"));
                        shipmentHeightUnit.setUnitId(rs.getInt("SHIPMENT_HEIGHT_UNIT_ID"));
                        PrgUnitTypeDTO shipmentHeightUnitType = new PrgUnitTypeDTO();
                        PrgLabelDTO shipmentHeightUnitTypeLabel = new PrgLabelDTO();
                        shipmentHeightUnitTypeLabel.setLabelEn(rs.getString("SHIPMENT_HEIGHT_UNIT_TYPE_NAME_EN"));
                        shipmentHeightUnitTypeLabel.setLabelFr(rs.getString("SHIPMENT_HEIGHT_UNIT_TYPE_NAME_FR"));
                        shipmentHeightUnitTypeLabel.setLabelPr(rs.getString("SHIPMENT_HEIGHT_UNIT_TYPE_NAME_PR"));
                        shipmentHeightUnitTypeLabel.setLabelSp(rs.getString("SHIPMENT_HEIGHT_UNIT_TYPE_NAME_SP"));
                        shipmentHeightUnitType.setLabel(shipmentHeightUnitTypeLabel);
                        shipmentHeightUnitType.setUnitTypeId(rs.getInt("SHIPMENT_HEIGHT_UNIT_TYPE_ID"));
                        shipmentHeightUnit.setUnitType(shipmentHeightUnitType);
                        shipmentLogisticsUnit.setHeightUnit(shipmentHeightUnit);
                        PrgLabelDTO shipmentLogisticsUnitLabel = new PrgLabelDTO();
                        shipmentLogisticsUnitLabel.setLabelEn(rs.getString("SHIPMENT_LOGISTICS_UNIT_NAME_EN"));
                        shipmentLogisticsUnitLabel.setLabelFr(rs.getString("SHIPMENT_LOGISTICS_UNIT_NAME_FR"));
                        shipmentLogisticsUnitLabel.setLabelPr(rs.getString("SHIPMENT_LOGISTICS_UNIT_NAME_PR"));
                        shipmentLogisticsUnitLabel.setLabelSp(rs.getString("SHIPMENT_LOGISTICS_UNIT_NAME_SP"));
                        shipmentLogisticsUnit.setLabel(shipmentLogisticsUnitLabel);
                        shipmentLogisticsUnit.setLengthQty(rs.getInt("SHIPMENT_LENGTH_QTY"));

                        PrgUnitDTO shipmentLengthUnit = new PrgUnitDTO();
                        PrgLabelDTO shipmentLengthUnitLabel = new PrgLabelDTO();
                        shipmentLengthUnitLabel.setLabelEn(rs.getString("SHIPMENT_LENGTH_UNIT_NAME_EN"));
                        shipmentLengthUnitLabel.setLabelFr(rs.getString("SHIPMENT_LENGTH_UNIT_NAME_FR"));
                        shipmentLengthUnitLabel.setLabelPr(rs.getString("SHIPMENT_LENGTH_UNIT_NAME_PR"));
                        shipmentLengthUnitLabel.setLabelSp(rs.getString("SHIPMENT_LENGTH_UNIT_NAME_SP"));
                        shipmentLengthUnit.setLabel(shipmentLengthUnitLabel);
                        shipmentLengthUnit.setUnitCode(rs.getString("SHIPMENT_LENGTH_UNIT_CODE"));
                        shipmentLengthUnit.setUnitId(rs.getInt("SHIPMENT_LENGTH_UNIT_ID"));
                        PrgUnitTypeDTO shipmentLengthUnitType = new PrgUnitTypeDTO();
                        PrgLabelDTO shipmentLengthUnitTypeLabel = new PrgLabelDTO();
                        shipmentLengthUnitTypeLabel.setLabelEn(rs.getString("SHIPMENT_LENGTH_UNIT_TYPE_NAME_EN"));
                        shipmentLengthUnitTypeLabel.setLabelFr(rs.getString("SHIPMENT_LENGTH_UNIT_TYPE_NAME_FR"));
                        shipmentLengthUnitTypeLabel.setLabelPr(rs.getString("SHIPMENT_LENGTH_UNIT_TYPE_NAME_PR"));
                        shipmentLengthUnitTypeLabel.setLabelSp(rs.getString("SHIPMENT_LENGTH_UNIT_TYPE_NAME_SP"));
                        shipmentLengthUnitType.setLabel(shipmentLengthUnitTypeLabel);
                        shipmentLengthUnitType.setUnitTypeId(rs.getInt("SHIPMENT_LENGTH_UNIT_TYPE_ID"));
                        shipmentLengthUnit.setUnitType(shipmentLengthUnitType);
                        shipmentLogisticsUnit.setLengthUnit(shipmentLengthUnit);
                        shipmentLogisticsUnit.setLogisticsUnitId(rs.getInt("SHIPMENT_LOGISTICS_UNIT_ID"));
                        PrgManufacturerDTO shipmentManufacturer = new PrgManufacturerDTO();
                        PrgLabelDTO shipmentManufacturerLabel = new PrgLabelDTO();
                        shipmentManufacturerLabel.setLabelEn(rs.getString("SHIPMENT_MANUFACTURER_NAME_EN"));
                        shipmentManufacturerLabel.setLabelFr(rs.getString("SHIPMENT_MANUFACTURER_NAME_FR"));
                        shipmentManufacturerLabel.setLabelPr(rs.getString("SHIPMENT_MANUFACTURER_NAME_PR"));
                        shipmentManufacturerLabel.setLabelSp(rs.getString("SHIPMENT_MANUFACTURER_NAME_SP"));
                        shipmentManufacturer.setLabel(shipmentManufacturerLabel);
                        shipmentManufacturer.setManufacturerId(rs.getInt("SHIPMENT_MANUFACTURER_ID"));
                        shipmentLogisticsUnit.setManufacturer(shipmentManufacturer);
                        PrgPlanningUnitDTO shipmentPlanningUnit = new PrgPlanningUnitDTO();
                        PrgLabelDTO shipmentPlanningUnitLabel = new PrgLabelDTO();
                        shipmentPlanningUnitLabel.setLabelEn(rs.getString("SHIPMENT_PLANNING_UNIT_NAME_EN"));
                        shipmentPlanningUnitLabel.setLabelFr(rs.getString("SHIPMENT_PLANNING_UNIT_NAME_FR"));
                        shipmentPlanningUnitLabel.setLabelPr(rs.getString("SHIPMENT_PLANNING_UNIT_NAME_PR"));
                        shipmentPlanningUnitLabel.setLabelSp(rs.getString("SHIPMENT_PLANNING_UNIT_NAME_SP"));
                        shipmentPlanningUnit.setLabel(shipmentPlanningUnitLabel);
                        shipmentPlanningUnit.setPlanningUnitId(rs.getInt("SHIPMENT_PLANNING_UNIT_ID"));
                        shipmentPlanningUnit.setPrice(rs.getDouble("SHIPMENT_PU_SHIPMENT_PRICE"));
                        shipmentPlanningUnit.setQtyOfForecastingUnits(rs.getDouble("SHIPMENT_QTY_OF_FORECASTING_UNITS"));
                        PrgUnitDTO shipmentPlanningUnitUnit = new PrgUnitDTO();
                        PrgLabelDTO shipmentPlanningUnitUnitLabel = new PrgLabelDTO();
                        shipmentPlanningUnitUnitLabel.setLabelEn(rs.getString("SHIPMENT_PLANNING_UNIT_UNIT_NAME_EN"));
                        shipmentPlanningUnitUnitLabel.setLabelFr(rs.getString("SHIPMENT_PLANNING_UNIT_UNIT_NAME_FR"));
                        shipmentPlanningUnitUnitLabel.setLabelPr(rs.getString("SHIPMENT_PLANNING_UNIT_UNIT_NAME_PR"));
                        shipmentPlanningUnitUnitLabel.setLabelSp(rs.getString("SHIPMENT_PLANNING_UNIT_UNIT_NAME_SP"));
                        shipmentPlanningUnitUnit.setLabel(shipmentPlanningUnitUnitLabel);
                        shipmentPlanningUnitUnit.setUnitCode(rs.getString("SHIPMENT_PLANNING_UNIT_UNIT_CODE"));
                        shipmentPlanningUnitUnit.setUnitId(rs.getInt("SHIPMENT_PLANNING_UNIT_UNIT_ID"));

                        PrgUnitTypeDTO shipmentPlanningUnitUnitType = new PrgUnitTypeDTO();
                        PrgLabelDTO shipmentPlanningUnitUnitTypeLabel = new PrgLabelDTO();
                        shipmentPlanningUnitUnitTypeLabel.setLabelEn(rs.getString("SHIPMENT_PLANNING_UNIT_UNIT_TYPE_NAME_EN"));
                        shipmentPlanningUnitUnitTypeLabel.setLabelFr(rs.getString("SHIPMENT_PLANNING_UNIT_UNIT_TYPE_NAME_FR"));
                        shipmentPlanningUnitUnitTypeLabel.setLabelPr(rs.getString("SHIPMENT_PLANNING_UNIT_UNIT_TYPE_NAME_PR"));
                        shipmentPlanningUnitUnitTypeLabel.setLabelSp(rs.getString("SHIPMENT_PLANNING_UNIT_UNIT_TYPE_NAME_SP"));
                        shipmentPlanningUnitUnitType.setLabel(shipmentPlanningUnitUnitTypeLabel);
                        shipmentPlanningUnitUnitType.setUnitTypeId(rs.getInt("SHIPMENT_PLANNING_UNIT_UNIT_TYPE_ID"));
                        shipmentPlanningUnitUnit.setUnitType(shipmentPlanningUnitUnitType);
                        shipmentPlanningUnit.setUnit(shipmentPlanningUnitUnit);
                        shipmentLogisticsUnit.setPlanningUnit(shipmentPlanningUnit);
                        shipmentLogisticsUnit.setQtyInEuro1(rs.getDouble("SHIPMENT_QTY_IN_EURO_1"));
                        shipmentLogisticsUnit.setQtyInEuro2(rs.getDouble("SHIPMENT_QTY_IN_EURO_2"));
                        shipmentLogisticsUnit.setQtyOfPlanningUnits(rs.getDouble("SHIPMENT_QTY_OF_PLANNING_UNITS"));
                        PrgUnitDTO shipmentLogisticsUnitUnit = new PrgUnitDTO();
                        PrgLabelDTO shipmentLogisticsUnitUnitLabel = new PrgLabelDTO();
                        shipmentLogisticsUnitUnitLabel.setLabelEn(rs.getString("SHIPMENT_LOGISTICS_UNIT_UNIT_NAME_EN"));
                        shipmentLogisticsUnitUnitLabel.setLabelFr(rs.getString("SHIPMENT_LOGISTICS_UNIT_UNIT_NAME_FR"));
                        shipmentLogisticsUnitUnitLabel.setLabelPr(rs.getString("SHIPMENT_LOGISTICS_UNIT_UNIT_NAME_PR"));
                        shipmentLogisticsUnitUnitLabel.setLabelSp(rs.getString("SHIPMENT_LOGISTICS_UNIT_UNIT_NAME_SP"));
                        shipmentLogisticsUnitUnit.setLabel(shipmentLogisticsUnitUnitLabel);
                        shipmentLogisticsUnitUnit.setUnitCode(rs.getString("SHIPMENT_LOGISTICS_UNIT_UNIT_CODE"));
                        shipmentLogisticsUnitUnit.setUnitId(rs.getInt("SHIPMENT_LOGISTICS_UNIT_UNIT_ID"));
                        PrgUnitTypeDTO shipmentLogisticsUnitUnitType = new PrgUnitTypeDTO();
                        PrgLabelDTO shipmentLogisticsUnitUnitTypeLabel = new PrgLabelDTO();
                        shipmentLogisticsUnitUnitTypeLabel.setLabelEn(rs.getString("SHIPMENT_LOGISTICS_UNIT_UNIT_TYPE_NAME_EN"));
                        shipmentLogisticsUnitUnitTypeLabel.setLabelFr(rs.getString("SHIPMENT_LOGISTICS_UNIT_UNIT_TYPE_NAME_FR"));
                        shipmentLogisticsUnitUnitTypeLabel.setLabelPr(rs.getString("SHIPMENT_LOGISTICS_UNIT_UNIT_TYPE_NAME_PR"));
                        shipmentLogisticsUnitUnitTypeLabel.setLabelSp(rs.getString("SHIPMENT_LOGISTICS_UNIT_UNIT_TYPE_NAME_SP"));
                        shipmentLogisticsUnitUnitType.setLabel(shipmentLogisticsUnitUnitTypeLabel);
                        shipmentLogisticsUnitUnitType.setUnitTypeId(rs.getInt("SHIPMENT_LOGISTICS_UNIT_UNIT_TYPE_ID"));
                        shipmentLogisticsUnitUnit.setUnitType(shipmentLogisticsUnitUnitType);
                        shipmentLogisticsUnit.setUnit(shipmentLogisticsUnitUnit);
                        shipmentLogisticsUnit.setVariant(rs.getString("SHIPMENT_VARIANT"));

                        shipmentLogisticsUnit.setWeightQty(rs.getDouble("SHIPMENT_WEIGHT_QTY"));
                        PrgUnitDTO shipmentWeightUnit = new PrgUnitDTO();
                        PrgLabelDTO shipmentWeightUnitLabel = new PrgLabelDTO();
                        shipmentWeightUnitLabel.setLabelEn(rs.getString("SHIPMENT_WEIGHT_UNIT_NAME_EN"));
                        shipmentWeightUnitLabel.setLabelFr(rs.getString("SHIPMENT_WEIGHT_UNIT_NAME_FR"));
                        shipmentWeightUnitLabel.setLabelPr(rs.getString("SHIPMENT_WEIGHT_UNIT_NAME_PR"));
                        shipmentWeightUnitLabel.setLabelSp(rs.getString("SHIPMENT_WEIGHT_UNIT_NAME_SP"));
                        shipmentWeightUnit.setLabel(shipmentWeightUnitLabel);
                        shipmentWeightUnit.setUnitCode(rs.getString("SHIPMENT_WEIGHT_UNIT_CODE"));
                        shipmentWeightUnit.setUnitId(rs.getInt("SHIPMENT_WEIGHT_UNIT_ID"));
                        PrgUnitTypeDTO shipmentWeightUnitType = new PrgUnitTypeDTO();
                        PrgLabelDTO shipmentWeightUnitTypeLabel = new PrgLabelDTO();
                        shipmentWeightUnitTypeLabel.setLabelEn(rs.getString("SHIPMENT_WEIGHT_UNIT_TYPE_NAME_EN"));
                        shipmentWeightUnitTypeLabel.setLabelFr(rs.getString("SHIPMENT_WEIGHT_UNIT_TYPE_NAME_FR"));
                        shipmentWeightUnitTypeLabel.setLabelPr(rs.getString("SHIPMENT_WEIGHT_UNIT_TYPE_NAME_PR"));
                        shipmentWeightUnitTypeLabel.setLabelSp(rs.getString("SHIPMENT_WEIGHT_UNIT_TYPE_NAME_SP"));
                        shipmentWeightUnitType.setLabel(shipmentWeightUnitTypeLabel);
                        shipmentWeightUnitType.setUnitTypeId(rs.getInt("SHIPMENT_WEIGHT_UNIT_TYPE_ID"));
                        shipmentWeightUnit.setUnitType(shipmentWeightUnitType);
                        shipmentLogisticsUnit.setWeightUnit(shipmentWeightUnit);
                        shipmentLogisticsUnit.setWidthQty(rs.getDouble("SHIPMENT_WIDTH_QTY"));
                        PrgUnitDTO shipmentWidthUnit = new PrgUnitDTO();
                        PrgLabelDTO shipmentWidthUnitLabel = new PrgLabelDTO();
                        shipmentWidthUnitLabel.setLabelEn(rs.getString("SHIPMENT_WIDTH_UNIT_NAME_EN"));
                        shipmentWidthUnitLabel.setLabelFr(rs.getString("SHIPMENT_WIDTH_UNIT_NAME_FR"));
                        shipmentWidthUnitLabel.setLabelPr(rs.getString("SHIPMENT_WIDTH_UNIT_NAME_PR"));
                        shipmentWidthUnitLabel.setLabelSp(rs.getString("SHIPMENT_WIDTH_UNIT_NAME_SP"));
                        shipmentWidthUnit.setLabel(shipmentWidthUnitLabel);
                        shipmentWidthUnit.setUnitCode(rs.getString("SHIPMENT_WIDTH_UNIT_CODE"));
                        shipmentWidthUnit.setUnitId(rs.getInt("SHIPMENT_WIDTH_UNIT_ID"));
                        PrgUnitTypeDTO shipmentWidthUnitType = new PrgUnitTypeDTO();
                        PrgLabelDTO shipmentWidthUnitTypeLabel = new PrgLabelDTO();
                        shipmentWidthUnitTypeLabel.setLabelEn(rs.getString("SHIPMENT_WIDTH_UNIT_TYPE_NAME_EN"));
                        shipmentWidthUnitTypeLabel.setLabelFr(rs.getString("SHIPMENT_WIDTH_UNIT_TYPE_NAME_FR"));
                        shipmentWidthUnitTypeLabel.setLabelPr(rs.getString("SHIPMENT_WIDTH_UNIT_TYPE_NAME_PR"));
                        shipmentWidthUnitTypeLabel.setLabelSp(rs.getString("SHIPMENT_WIDTH_UNIT_TYPE_NAME_SP"));
                        shipmentWidthUnitType.setLabel(shipmentWidthUnitTypeLabel);
                        shipmentWidthUnitType.setUnitTypeId(rs.getInt("SHIPMENT_WIDTH_UNIT_TYPE_ID"));
                        shipmentWidthUnit.setUnitType(shipmentWidthUnitType);
                        shipmentLogisticsUnit.setWidthUnit(shipmentWidthUnit);
                        shipment.setLogisticsUnit(shipmentLogisticsUnit);
                        shipment.setNotes(rs.getString("SHIPMENT_NOTES"));
                        shipment.setOrderDate(rs.getDate("ORDER_DATE"));
                        shipment.setPoroNumber(rs.getString("PO_RO_NUMBER"));
                        PrgProcurementAgentDTO procurementAgent = new PrgProcurementAgentDTO();
                        PrgLabelDTO procurementAgentLabel = new PrgLabelDTO();
                        procurementAgentLabel.setLabelEn(rs.getString("PROCURMENT_AGENT_NAME_EN"));
                        procurementAgentLabel.setLabelFr(rs.getString("PROCURMENT_AGENT_NAME_FR"));
                        procurementAgentLabel.setLabelPr(rs.getString("PROCURMENT_AGENT_NAME_PR"));
                        procurementAgentLabel.setLabelSp(rs.getString("PROCURMENT_AGENT_NAME_SP"));
                        procurementAgent.setLabel(procurementAgentLabel);
                        procurementAgent.setProcurementAgentId(rs.getInt("PROCURMENT_AGENT_ID"));
                        procurementAgent.setSubmittedToApprovedLeadTime(rs.getInt("PROCURMENT_AGENT_SUBMITTED_TO_APPROVED_LEAD_TIME"));
                        PrgProcurementAgentLogisiticsUnitDTO procurementAgentLogisiticsUnit = new PrgProcurementAgentLogisiticsUnitDTO();
                        procurementAgentLogisiticsUnit.setApprovedToShipLeadTime(rs.getInt("APPROVED_TO_SHIP_LEAD_TIME"));
                        procurementAgentLogisiticsUnit.setPrice(rs.getDouble("PRICE"));
                        procurementAgentLogisiticsUnit.setProcurementAgentSkuId(rs.getInt("PROCUREMENT_AGENT_SKU_ID"));
                        procurementAgentLogisiticsUnit.setSkuCode(rs.getString("SKU_CODE"));
                        procurementAgent.setPrgProcurementAgentLogisiticsUnit(procurementAgentLogisiticsUnit);
                        procurementAgent.setProcurementAgentId(rs.getInt("PROCUREMENT_AGENT_ID"));
                        shipment.setProcurementAgent(procurementAgent);
                        shipment.setQty(rs.getDouble("QTY"));
                        shipment.setReceiveDate(rs.getDate("RECEIVE_DATE"));
                        PrgRegionDTO shipmentRegion = new PrgRegionDTO();
                        shipmentRegion.setCapacityCbm(rs.getDouble("SHIPMENT_REGION_CAPACITY_CBM"));
                        PrgLabelDTO shipmentRegionLabel = new PrgLabelDTO();
                        shipmentRegionLabel.setLabelEn(rs.getString("SHIPMENT_REGION_NAME_EN"));
                        shipmentRegionLabel.setLabelFr(rs.getString("SHIPMENT_REGION_NAME_FR"));
                        shipmentRegionLabel.setLabelPr(rs.getString("SHIPMENT_REGION_NAME_PR"));
                        shipmentRegionLabel.setLabelSp(rs.getString("SHIPMENT_REGION_NAME_SP"));
                        shipmentRegion.setLabel(shipmentRegionLabel);
                        shipmentRegion.setRegionId(rs.getInt("SHIPMENT_REGION_ID"));
                        shipment.setRegion(shipmentRegion);
                        shipment.setShipDate(rs.getDate("SHIP_DATE"));

                        PrgShipmentBudgetDTO shipmentBudget = new PrgShipmentBudgetDTO();
                        PrgBudgetDTO shipBud = new PrgBudgetDTO();
                        shipBud.setBudgetAmount(rs.getDouble("SHIPMENT_BUD_AMOUNT"));
                        shipBud.setBudgetId(rs.getInt("SHIPMENT_BUD_BUDGET_ID"));
                        PrgLabelDTO shipBudLabel = new PrgLabelDTO();
                        shipBudLabel.setLabelEn(rs.getString("SHIPMENT_BUD_NAME_EN"));
                        shipBudLabel.setLabelFr(rs.getString("SHIPMENT_BUD_NAME_FR"));
                        shipBudLabel.setLabelPr(rs.getString("SHIPMENT_BUD_NAME_PR"));
                        shipBudLabel.setLabelSp(rs.getString("SHIPMENT_BUD_NAME_SP"));
                        shipBud.setLabel(shipBudLabel);
                        shipBud.setStartDate(rs.getDate("SHIPMENT_BUD_START_DATE"));
                        shipBud.setStopDate(rs.getDate("SHIPMENT_BUD_STOP_DATE"));
                        shipmentBudget.setBudget(shipBud);
                        shipmentBudget.setBudgetAmount(rs.getDouble("SHIPMENT_BUDGET_AMOUNT"));
                        shipmentBudget.setShipmentBudgetId(rs.getInt("SHIPMENT_BUDGET_ID"));
                        PrgSubFundingSourceDTO shipmentBudgetSubFundingSource = new PrgSubFundingSourceDTO();
                        PrgFundingSourceDTO shipmentBudgetFundingSource = new PrgFundingSourceDTO();
                        shipmentBudgetFundingSource.setFundingSourceId(rs.getInt("SHIPMENT_BUDGET_FUNDING_SOURCE_ID"));
                        PrgLabelDTO shipmentBudgetFundingSourceLabel = new PrgLabelDTO();
                        shipmentBudgetFundingSourceLabel.setLabelEn(rs.getString("SHIPMENT_BUDGET_FUNDING_SOURCE_NAME_EN"));
                        shipmentBudgetFundingSourceLabel.setLabelFr(rs.getString("SHIPMENT_BUDGET_FUNDING_SOURCE_NAME_FR"));
                        shipmentBudgetFundingSourceLabel.setLabelPr(rs.getString("SHIPMENT_BUDGET_FUNDING_SOURCE_NAME_PR"));
                        shipmentBudgetFundingSourceLabel.setLabelSp(rs.getString("SHIPMENT_BUDGET_FUNDING_SOURCE_NAME_SP"));
                        shipmentBudgetFundingSource.setLabel(shipmentBudgetFundingSourceLabel);
                        shipmentBudgetSubFundingSource.setFundingSource(shipmentBudgetFundingSource);
                        PrgLabelDTO shipmentBudgetSubFundingSourceLabel = new PrgLabelDTO();
                        shipmentBudgetSubFundingSourceLabel.setLabelEn(rs.getString("SHIPMENT_BUDGET_SUB_FUNDING_SOURCE_NAME_EN"));
                        shipmentBudgetSubFundingSourceLabel.setLabelFr(rs.getString("SHIPMENT_BUDGET_SUB_FUNDING_SOURCE_NAME_FR"));
                        shipmentBudgetSubFundingSourceLabel.setLabelPr(rs.getString("SHIPMENT_BUDGET_SUB_FUNDING_SOURCE_NAME_PR"));
                        shipmentBudgetSubFundingSourceLabel.setLabelSp(rs.getString("SHIPMENT_BUDGET_SUB_FUNDING_SOURCE_NAME_SP"));
                        shipmentBudgetSubFundingSource.setLabel(shipmentBudgetSubFundingSourceLabel);
                        shipmentBudgetSubFundingSource.setSubFundingSourceId(rs.getInt("SHIPMENT_BUDGET_SUB_FUNDING_SOURCE_ID"));
                        shipmentBudget.setSubFundingSource(shipmentBudgetSubFundingSource);
                        shipment.setShipmentBudget(shipmentBudget);
                        shipment.setShipmentPrice(rs.getDouble("SHIPMENT_PRICE"));
                        PrgShipmentStatusDTO shipmentStatus = new PrgShipmentStatusDTO();
                        PrgLabelDTO shipmentStatusLabel = new PrgLabelDTO();
                        shipmentStatusLabel.setLabelEn(rs.getString("SHIPMENT_STATUS_NAME_EN"));
                        shipmentStatusLabel.setLabelFr(rs.getString("SHIPMENT_STATUS_NAME_FR"));
                        shipmentStatusLabel.setLabelPr(rs.getString("SHIPMENT_STATUS_NAME_PR"));
                        shipmentStatusLabel.setLabelSp(rs.getString("SHIPMENT_STATUS_NAME_SP"));
                        shipmentStatus.setLabel(shipmentStatusLabel);
                        shipmentStatus.setShipmentStatusId(rs.getInt("SHIPMENT_STATUS_ID"));
                        shipment.setShipmentStatus(shipmentStatus);
                        shipment.setSuggestedQty(rs.getDouble("SUGGESTED_QTY"));
                        shipmentList.add(shipment);
                    }
                }
                product.setInventoryData(inventoryList);
                product.setConsumptionData(consumptionList);
                product.setShipmentData(shipmentList);
                programProduct.setProduct(product);
                programData.getProgramProductList().add(programProduct);
            }
        }
        return programDataList;
    }
}